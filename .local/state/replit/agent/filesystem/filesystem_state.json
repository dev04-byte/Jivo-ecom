{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# E-commerce Purchase Order Management System\n\n## Overview\n\nThis is a comprehensive e-commerce purchase order management web application for suppliers distributing products across multiple Indian cities. The system streamlines purchase order management, replacing manual data entry with an automated, API-driven solution. It currently focuses on Platform PO management, with plans for expansion into distributor POs, secondary sales, and inventory management. Key capabilities include a unified PO upload system supporting five major platforms (Flipkart Grocery, Zepto, City Mall, Blinkit, and Swiggy Instamart), specialized inventory management for six major platforms (JioMart, Blinkit, Amazon, Swiggy, FlipKart, and more), and a comprehensive secondary sales system for Amazon, Zepto, Blinkit, and Swiggy. The system also features a SQL query module for custom reporting and analytics with integrated terminal access for advanced data analysis.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite\n- **UI Framework**: Shadcn/UI components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables\n- **State Management**: TanStack React Query\n- **Routing**: Wouter\n- **Form Handling**: React Hook Form with Zod validation\n- **Layout**: Sidebar-based modular design with responsive mobile support\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful APIs with consistent error handling\n- **Request Processing**: JSON body parsing with URL encoding support\n\n### Database Architecture\n- **ORM**: Drizzle ORM with TypeScript schema definitions\n- **Database**: PostgreSQL via Neon serverless\n- **Connection**: WebSocket-based connection pooling\n- **Migrations**: Drizzle Kit\n- **Schema Design**: Normalized relational structure, SAP B1 Hanna ERP integration-ready item master, platform-specific item mappings, comprehensive PO and line item tracking.\n\n### Core Database Tables\n1. **sap_item_mst**: Master item catalog matching SAP B1 Hanna ERP structure\n2. **pf_mst**: E-commerce platform registry\n3. **pf_item_mst**: Platform-specific item mappings with SAP references\n4. **pf_po**: Purchase order headers\n5. **pf_order_items**: Line-item details for purchase orders\n6. **INV_FlipKart_JM_Daily**: FlipKart daily inventory tracking with comprehensive metrics (41 records imported successfully)\n7. **INV_FlipKart_JM_Range**: FlipKart range-based inventory reporting (ready for range-based imports)\n\n### Authentication & Security\n- Session-based authentication\n- CORS-enabled for cross-origin requests\n- Environment-based configuration\n\n### Development Workflow\n- **Build System**: Vite for frontend, esbuild for backend production builds\n- **Development**: Concurrent frontend/backend development with HMR\n- **Code Quality**: TypeScript strict mode\n\n### API Structure\n- **Platform Management**: CRUD operations\n- **Item Management**: SAP item synchronization and platform mapping\n- **PO Management**: Full lifecycle PO creation, editing, and status tracking\n- **Unified PO Upload**: Single endpoint for any vendor PO with platform selection and preview capabilities\n- **FlipKart Inventory Management**: Complete integration with daily and range-based inventory tracking including sales metrics, warehouse management, and product dimensions\n- **Search & Filtering**: Dynamic item search\n\n### File Organization\n- **Monorepo Structure**: Shared TypeScript schemas\n- **Client**: React application\n- **Server**: Express API\n- **Shared**: Common type definitions and database schemas\n\n### Scalability Considerations\n- **Modular Design**: Sidebar-based module system\n- **API-First**: All data interactions through RESTful APIs\n- **Type Safety**: End-to-end TypeScript\n- **Caching Strategy**: React Query for optimistic updates\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: TypeScript-first ORM\n\n### UI/UX Libraries\n- **Radix UI**: Accessible component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library\n\n### Development Tools\n- **Vite**: Fast build tool\n- **TypeScript**: Static typing\n- **Replit Integration**: Development environment with cartographer plugin\n- **Claude Code CLI**: Integrated AI coding assistance using subscription authentication (bypasses API costs)\n\n### State Management\n- **TanStack React Query**: Server state management\n- **React Hook Form**: Performance-optimized form handling\n- **Zod**: Runtime type validation\n\n### Integrations\n- **SQL Server**: For SAP item master synchronization\n- **Claude Code**: AI coding assistant using subscription authentication","size_bytes":4814},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { callSpGetItemDetails } from \"./sqlserver\";\nimport { setupAuth } from \"./auth\";\n\nimport { insertPfPoSchema, insertPfOrderItemsSchema, insertFlipkartGroceryPoHeaderSchema, insertFlipkartGroceryPoLinesSchema, insertDistributorMstSchema, insertDistributorPoSchema, insertDistributorOrderItemsSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { seedTestData } from \"./seed-data\";\nimport { parseFlipkartGroceryPO, parseZeptoPO, parseCityMallPO, parseBlinkitPO } from \"./csv-parser\";\nimport { parseSwiggyPO } from \"./swiggy-parser\";\nimport { parseBigBasketPO } from \"./bigbasket-parser\";\nimport { parseZomatoPO } from \"./zomato-parser\";\nimport { parseDealsharePO } from \"./dealshare-parser\";\nimport { parseAmazonSecondarySales } from \"./amazon-secondary-sales-parser\";\nimport { parseZeptoSecondaryData } from \"./zepto-secondary-sales-parser\";\nimport { parseBlinkitSecondarySalesFile } from \"./blinkit-secondary-sales-parser\";\nimport { parseSwiggySecondaryData } from \"./swiggy-secondary-sales-parser\";\nimport { parseJioMartSaleSecondarySales } from \"./jiomartsale-secondary-sales-parser\";\nimport { parseJioMartCancelSecondarySales } from \"./jiomartcancel-secondary-sales-parser\";\nimport { parseBigBasketSecondarySales } from \"./bigbasket-secondary-sales-parser\";\nimport { parseFlipkartSecondaryData } from \"./flipkart-parser\";\nimport { parseJioMartInventoryCsv } from \"./jiomart-inventory-parser\";\nimport { parseBlinkitInventoryCsv } from \"./blinkit-inventory-parser\";\nimport { parseAmazonInventoryFile } from \"./amazon-inventory-parser\";\nimport { parseFlipkartInventoryCSV } from \"./flipkart-inventory-parser\";\nimport { parseZeptoInventory } from \"./zepto-inventory-parser\";\nimport { db } from \"./db\";\nimport { sql } from \"drizzle-orm\";\nimport { \n  scAmJwDaily, scAmJwRange, scAmJmDaily, scAmJmRange,\n  scZeptoJmDaily, scZeptoJmRange, \n  scBlinkitJmDaily, scBlinkitJmRange,\n  scSwiggyJmDaily, scSwiggyJmRange,\n  scJioMartSaleJmDaily, scJioMartSaleJmRange,\n  scJioMartCancelJmDaily, scJioMartCancelJmRange,\n  scBigBasketJmDaily, scBigBasketJmRange,\n  scFlipkartJm2Month, scFlipkartChirag2Month,\n  invJioMartJmDaily, invJioMartJmRange,\n  invBlinkitJmDaily, invBlinkitJmRange,\n  invFlipkartJmDaily, invFlipkartJmRange\n} from \"@shared/schema\";\n\nimport multer from 'multer';\nimport crypto from \"crypto\";\n\n// Utility function to create dates without timezone conversion issues\nfunction createDateFromYMDString(dateString: string): Date {\n  if (!dateString) return new Date();\n  // For HTML date inputs that return YYYY-MM-DD, create date in UTC to avoid timezone shifts\n  return new Date(dateString + 'T00:00:00.000Z');\n}\n\nfunction createEndDateFromYMDString(dateString: string): Date {\n  if (!dateString) return new Date();\n  // For end dates, set to end of day in UTC\n  return new Date(dateString + 'T23:59:59.999Z');\n}\n\nconst createPoSchema = z.object({\n  po: insertPfPoSchema.extend({\n    order_date: z.string().transform(str => new Date(str)),\n    expiry_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n    appointment_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n  }),\n  items: z.array(insertPfOrderItemsSchema)\n});\n\nconst updatePoSchema = z.object({\n  po: insertPfPoSchema.partial().extend({\n    order_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n    expiry_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n    appointment_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n  }),\n  items: z.array(insertPfOrderItemsSchema).optional()\n});\n\nconst createFlipkartGroceryPoSchema = z.object({\n  header: insertFlipkartGroceryPoHeaderSchema.extend({\n    order_date: z.string().transform(str => new Date(str)),\n    po_expiry_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n  }),\n  lines: z.array(insertFlipkartGroceryPoLinesSchema.extend({\n    required_by_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n  }))\n});\n\nconst updateFlipkartGroceryPoSchema = z.object({\n  header: insertFlipkartGroceryPoHeaderSchema.partial().extend({\n    order_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n    po_expiry_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n  }),\n  lines: z.array(insertFlipkartGroceryPoLinesSchema.extend({\n    required_by_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n  })).optional()\n});\n\n// Distributor PO schemas\nconst createDistributorPoSchema = z.object({\n  header: insertDistributorPoSchema.extend({\n    order_date: z.string().transform(str => new Date(str)),\n    expiry_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n    appointment_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n  }),\n  items: z.array(insertDistributorOrderItemsSchema)\n});\n\nconst updateDistributorPoSchema = z.object({\n  header: insertDistributorPoSchema.partial().extend({\n    order_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n    expiry_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n    appointment_date: z.string().optional().transform(str => str ? new Date(str) : undefined),\n  }),\n  items: z.array(insertDistributorOrderItemsSchema).optional()\n});\n\n// Configure multer for file uploads\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024 } // 5MB limit\n});\n\n// Import crypto for file hashing\nimport crypto from 'crypto';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication first\n  setupAuth(app);\n  // Platform routes\n  app.get(\"/api/platforms\", async (_req, res) => {\n    try {\n      const platforms = await storage.getAllPlatforms();\n      res.json(platforms);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch platforms\" });\n    }\n  });\n\n  app.post(\"/api/platforms\", async (req, res) => {\n    try {\n      const platform = await storage.createPlatform(req.body);\n      res.status(201).json(platform);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create platform\" });\n    }\n  });\n\n  // SAP Items routes\n  app.get(\"/api/sap-items\", async (_req, res) => {\n    try {\n      const items = await storage.getAllSapItems();\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch SAP items\" });\n    }\n  });\n\n  app.post(\"/api/sap-items\", async (req, res) => {\n    try {\n      const item = await storage.createSapItem(req.body);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create SAP item\" });\n    }\n  });\n\n  // Get all SAP items from API table\n  app.get(\"/api/sap-items-api\", async (req, res) => {\n    try {\n      const items = await storage.getAllSapItemsApi();\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching SAP items from API:\", error);\n      res.status(500).json({ error: \"Failed to fetch SAP items from API\" });\n    }\n  });\n\n  // Sync SAP items from SQL Server API\n  app.post(\"/api/sap-items-api/sync\", async (req, res) => {\n    try {\n      console.log(\"Starting SAP items sync from SQL Server...\");\n      \n      // Call the SQL Server stored procedure\n      const sqlServerItems = await callSpGetItemDetails();\n      console.log(`Retrieved ${sqlServerItems.length} items from SQL Server`);\n\n      // Transform SQL Server data to match our schema\n      const transformedItems = sqlServerItems.map((item: any) => ({\n        itemcode: item.ItemCode || item.itemcode,\n        itemname: item.ItemName || item.itemname,\n        type: item.Type || item.type,\n        itemgroup: item.ItemGroup || item.itemgroup,\n        variety: item.Variety || item.variety,\n        subgroup: item.SubGroup || item.subgroup,\n        brand: item.Brand || item.brand,\n        uom: item.UOM || item.uom,\n        taxrate: item.TaxRate || item.taxrate,\n        unitsize: item.UnitSize || item.unitsize,\n        is_litre: item.IsLitre || item.is_litre || false,\n        case_pack: item.CasePack || item.case_pack\n      }));\n\n      // Sync to database\n      const syncedCount = await storage.syncSapItemsFromApi(transformedItems);\n      \n      console.log(`Successfully synced ${syncedCount} SAP items`);\n      res.json({ \n        success: true, \n        message: `Successfully synced ${syncedCount} SAP items from SQL Server database`,\n        count: syncedCount \n      });\n    } catch (error) {\n      console.error(\"Error syncing SAP items:\", error);\n      \n      // Check if it's a connection error\n      if (error instanceof Error && error.message.includes('Failed to connect')) {\n        res.status(503).json({ \n          error: \"SQL Server Connection Failed\", \n          details: `Unable to connect to SQL Server at 103.89.44.240:1433. Please check if the server is accessible and VPN connection is active.`,\n          suggestion: \"Contact your IT administrator to verify SQL Server connectivity from this environment.\"\n        });\n      } else {\n        res.status(500).json({ \n          error: \"Failed to sync SAP items\", \n          details: error instanceof Error ? error.message : \"Unknown error\" \n        });\n      }\n    }\n  });\n\n  // Platform Items routes\n  app.get(\"/api/platform-items\", async (req, res) => {\n    try {\n      const { platformId, search } = req.query;\n      const items = await storage.getPlatformItems(\n        platformId ? parseInt(platformId as string) : undefined,\n        search as string\n      );\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch platform items\" });\n    }\n  });\n\n  // Distributors API\n  app.get(\"/api/distributors\", async (req, res) => {\n    try {\n      const distributors = await storage.getAllDistributors();\n      res.json(distributors);\n    } catch (error) {\n      console.error(\"Error fetching distributors:\", error);\n      res.status(500).json({ error: \"Failed to fetch distributors\" });\n    }\n  });\n\n  app.post(\"/api/platform-items\", async (req, res) => {\n    try {\n      const item = await storage.createPlatformItem(req.body);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create platform item\" });\n    }\n  });\n\n  // PO routes\n  app.get(\"/api/pos\", async (_req, res) => {\n    try {\n      const pos = await storage.getAllPos();\n      res.json(pos);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch POs\" });\n    }\n  });\n\n  app.get(\"/api/pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const po = await storage.getPoById(id);\n      if (!po) {\n        return res.status(404).json({ message: \"PO not found\" });\n      }\n      res.json(po);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch PO\" });\n    }\n  });\n\n  app.post(\"/api/pos\", async (req, res) => {\n    try {\n      const validatedData = createPoSchema.parse(req.body);\n      const po = await storage.createPo(validatedData.po, validatedData.items);\n      res.status(201).json(po);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create PO\" });\n    }\n  });\n\n  app.put(\"/api/pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = updatePoSchema.parse(req.body);\n      const po = await storage.updatePo(id, validatedData.po, validatedData.items);\n      res.json(po);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update PO\" });\n    }\n  });\n\n  app.delete(\"/api/pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deletePo(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete PO\" });\n    }\n  });\n\n  // Order Items routes\n  app.get(\"/api/order-items\", async (_req, res) => {\n    try {\n      const orderItems = await storage.getAllOrderItems();\n      res.json(orderItems);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch order items\" });\n    }\n  });\n\n  app.patch(\"/api/order-items/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status } = req.body;\n      \n      if (!status) {\n        return res.status(400).json({ message: \"Status is required\" });\n      }\n\n      const updatedItem = await storage.updateOrderItemStatus(id, status);\n      res.json(updatedItem);\n    } catch (error) {\n      console.error(\"Error updating order item status:\", error);\n      res.status(500).json({ message: \"Failed to update order item status\" });\n    }\n  });\n\n  // CSV parsing endpoint\n  app.post(\"/api/parse-flipkart-csv\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const csvContent = req.file.buffer.toString('utf-8');\n      const uploadedBy = req.body.uploadedBy || 'system';\n      \n      const parsedData = parseFlipkartGroceryPO(csvContent, uploadedBy);\n      res.json(parsedData);\n    } catch (error) {\n      console.error('CSV parsing error:', error);\n      res.status(500).json({ message: \"Failed to parse CSV file\" });\n    }\n  });\n\n  // Flipkart Grocery PO routes\n  app.get(\"/api/flipkart-grocery-pos\", async (_req, res) => {\n    try {\n      const pos = await storage.getAllFlipkartGroceryPos();\n      res.json(pos);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch Flipkart grocery POs\" });\n    }\n  });\n\n  app.get(\"/api/flipkart-grocery-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const po = await storage.getFlipkartGroceryPoById(id);\n      if (!po) {\n        return res.status(404).json({ message: \"Flipkart grocery PO not found\" });\n      }\n      res.json(po);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch Flipkart grocery PO\" });\n    }\n  });\n\n  app.post(\"/api/flipkart-grocery-pos\", async (req, res) => {\n    try {\n      const validatedData = createFlipkartGroceryPoSchema.parse(req.body);\n      const po = await storage.createFlipkartGroceryPo(validatedData.header, validatedData.lines);\n      res.status(201).json(po);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create Flipkart grocery PO\" });\n    }\n  });\n\n  app.put(\"/api/flipkart-grocery-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = updateFlipkartGroceryPoSchema.parse(req.body);\n      const po = await storage.updateFlipkartGroceryPo(id, validatedData.header, validatedData.lines);\n      res.json(po);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update Flipkart grocery PO\" });\n    }\n  });\n\n  app.delete(\"/api/flipkart-grocery-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteFlipkartGroceryPo(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete Flipkart grocery PO\" });\n    }\n  });\n\n  app.get(\"/api/flipkart-grocery-pos/:id/lines\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const lines = await storage.getFlipkartGroceryPoLines(id);\n      res.json(lines);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch Flipkart grocery PO lines\" });\n    }\n  });\n\n  // Seed data endpoint (only for development)\n  app.post(\"/api/seed-test-data\", async (_req, res) => {\n    if (process.env.NODE_ENV === \"production\") {\n      return res.status(403).json({ message: \"Seed endpoint not available in production\" });\n    }\n    \n    try {\n      const result = await seedTestData();\n      if (result.success) {\n        res.json({ message: \"Test data seeded successfully\" });\n      } else {\n        res.status(500).json({ message: \"Failed to seed test data\", error: result.error });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to seed test data\" });\n    }\n  });\n\n  // Zepto PO Routes\n  app.get(\"/api/zepto-pos\", async (req, res) => {\n    try {\n      const pos = await storage.getAllZeptoPos();\n      res.json(pos);\n    } catch (error) {\n      console.error(\"Error fetching Zepto POs:\", error);\n      res.status(500).json({ error: \"Failed to fetch POs\" });\n    }\n  });\n\n  app.get(\"/api/zepto-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const po = await storage.getZeptoPOById(id);\n      \n      if (!po) {\n        return res.status(404).json({ error: \"PO not found\" });\n      }\n      \n      res.json(po);\n    } catch (error) {\n      console.error(\"Error fetching Zepto PO:\", error);\n      res.status(500).json({ error: \"Failed to fetch PO\" });\n    }\n  });\n\n  app.post(\"/api/parse-zepto-csv\", async (req, res) => {\n    try {\n      const { csvContent } = req.body;\n      \n      if (!csvContent) {\n        return res.status(400).json({ error: \"CSV content is required\" });\n      }\n      \n      const parsedData = parseZeptoPO(csvContent, \"system\");\n      res.json(parsedData);\n    } catch (error) {\n      console.error(\"Error parsing Zepto CSV:\", error);\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to parse CSV\" });\n    }\n  });\n\n  app.post(\"/api/zepto-pos\", async (req, res) => {\n    try {\n      const { header, lines } = req.body;\n      \n      if (!header || !lines) {\n        return res.status(400).json({ error: \"Header and lines are required\" });\n      }\n      \n      const createdPo = await storage.createZeptoPo(header, lines);\n      res.status(201).json(createdPo);\n    } catch (error) {\n      console.error(\"Error creating Zepto PO:\", error);\n      res.status(500).json({ error: \"Failed to create PO\" });\n    }\n  });\n\n  app.put(\"/api/zepto-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { header, lines } = req.body;\n      \n      const updatedPo = await storage.updateZeptoPo(id, header, lines);\n      res.json(updatedPo);\n    } catch (error) {\n      console.error(\"Error updating Zepto PO:\", error);\n      res.status(500).json({ error: \"Failed to update PO\" });\n    }\n  });\n\n  app.delete(\"/api/zepto-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteZeptoPo(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting Zepto PO:\", error);\n      res.status(500).json({ error: \"Failed to delete PO\" });\n    }\n  });\n\n  // City Mall CSV parsing endpoint\n  app.post(\"/api/parse-city-mall-csv\", upload.single(\"csvFile\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n      \n      const csvContent = req.file.buffer.toString(\"utf-8\");\n      const parsedData = parseCityMallPO(csvContent, \"system\");\n      res.json(parsedData);\n    } catch (error) {\n      console.error(\"Error parsing City Mall CSV:\", error);\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to parse CSV\" });\n    }\n  });\n\n  app.get(\"/api/city-mall-pos\", async (req, res) => {\n    try {\n      const cityMallPos = await storage.getAllCityMallPos();\n      res.json(cityMallPos);\n    } catch (error) {\n      console.error(\"Error fetching City Mall POs:\", error);\n      res.status(500).json({ error: \"Failed to fetch City Mall POs\" });\n    }\n  });\n\n  app.get(\"/api/city-mall-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: \"Invalid ID\" });\n      }\n      \n      const cityMallPo = await storage.getCityMallPoById(id);\n      if (!cityMallPo) {\n        return res.status(404).json({ error: \"City Mall PO not found\" });\n      }\n      \n      res.json(cityMallPo);\n    } catch (error) {\n      console.error(\"Error fetching City Mall PO:\", error);\n      res.status(500).json({ error: \"Failed to fetch City Mall PO\" });\n    }\n  });\n\n  app.post(\"/api/city-mall-pos\", async (req, res) => {\n    try {\n      const { header, lines } = req.body;\n      \n      if (!header || !lines) {\n        return res.status(400).json({ error: \"Header and lines are required\" });\n      }\n      \n      const createdPo = await storage.createCityMallPo(header, lines);\n      res.status(201).json(createdPo);\n    } catch (error) {\n      console.error(\"Error creating City Mall PO:\", error);\n      res.status(500).json({ error: \"Failed to create PO\" });\n    }\n  });\n\n  app.put(\"/api/city-mall-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { header, lines } = req.body;\n      \n      const updatedPo = await storage.updateCityMallPo(id, header, lines);\n      res.json(updatedPo);\n    } catch (error) {\n      console.error(\"Error updating City Mall PO:\", error);\n      res.status(500).json({ error: \"Failed to update PO\" });\n    }\n  });\n\n  app.delete(\"/api/city-mall-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteCityMallPo(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting City Mall PO:\", error);\n      res.status(500).json({ error: \"Failed to delete PO\" });\n    }\n  });\n\n  // Blinkit PO upload and management endpoints\n  app.post(\"/api/blinkit-po/upload\", upload.single(\"file\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const result = parseBlinkitPO(req.file.buffer, \"system\");\n      // Use the first PO from the list for single upload\n      const { header, lines } = result.poList[0];\n      const createdPo = await storage.createBlinkitPo(header, lines);\n      \n      res.status(201).json({\n        message: \"Blinkit PO uploaded successfully\",\n        po: createdPo,\n        totalItems: lines.length\n      });\n    } catch (error) {\n      console.error(\"Error uploading Blinkit PO:\", error);\n      res.status(500).json({ \n        error: \"Failed to process file\", \n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.get(\"/api/blinkit-pos\", async (_req, res) => {\n    try {\n      const pos = await storage.getAllBlinkitPos();\n      res.json(pos);\n    } catch (error) {\n      console.error(\"Error fetching Blinkit POs:\", error);\n      res.status(500).json({ error: \"Failed to fetch Blinkit POs\" });\n    }\n  });\n\n  app.get(\"/api/blinkit-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: \"Invalid ID\" });\n      }\n      \n      const blinkitPo = await storage.getBlinkitPoById(id);\n      if (!blinkitPo) {\n        return res.status(404).json({ error: \"Blinkit PO not found\" });\n      }\n      \n      res.json(blinkitPo);\n    } catch (error) {\n      console.error(\"Error fetching Blinkit PO:\", error);\n      res.status(500).json({ error: \"Failed to fetch Blinkit PO\" });\n    }\n  });\n\n  app.post(\"/api/blinkit-pos\", async (req, res) => {\n    try {\n      const { header, lines } = req.body;\n      \n      if (!header || !lines) {\n        return res.status(400).json({ error: \"Header and lines are required\" });\n      }\n      \n      const createdPo = await storage.createBlinkitPo(header, lines);\n      res.status(201).json(createdPo);\n    } catch (error) {\n      console.error(\"Error creating Blinkit PO:\", error);\n      res.status(500).json({ error: \"Failed to create PO\" });\n    }\n  });\n\n  app.put(\"/api/blinkit-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { header, lines } = req.body;\n      \n      const updatedPo = await storage.updateBlinkitPo(id, header, lines);\n      res.json(updatedPo);\n    } catch (error) {\n      console.error(\"Error updating Blinkit PO:\", error);\n      res.status(500).json({ error: \"Failed to update PO\" });\n    }\n  });\n\n  app.delete(\"/api/blinkit-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteBlinkitPo(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting Blinkit PO:\", error);\n      res.status(500).json({ error: \"Failed to delete PO\" });\n    }\n  });\n\n  // Swiggy PO routes\n  app.get(\"/api/swiggy-pos\", async (req, res) => {\n    try {\n      const pos = await storage.getAllSwiggyPos();\n      res.json(pos);\n    } catch (error) {\n      console.error(\"Error fetching Swiggy POs:\", error);\n      res.status(500).json({ error: \"Failed to fetch POs\" });\n    }\n  });\n\n  app.get(\"/api/swiggy-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const po = await storage.getSwiggyPoById(id);\n      if (!po) {\n        return res.status(404).json({ error: \"PO not found\" });\n      }\n      res.json(po);\n    } catch (error) {\n      console.error(\"Error fetching Swiggy PO:\", error);\n      res.status(500).json({ error: \"Failed to fetch PO\" });\n    }\n  });\n\n  app.post(\"/api/swiggy-pos/upload\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const uploadedBy = \"system\"; // In a real app, this would come from authentication\n      const { header, lines } = await parseSwiggyPO(req.file.buffer, uploadedBy);\n      \n      const createdPo = await storage.createSwiggyPo(header, lines);\n      res.status(201).json(createdPo);\n    } catch (error) {\n      console.error(\"Error uploading Swiggy PO:\", error);\n      res.status(500).json({ error: \"Failed to upload and process file\" });\n    }\n  });\n\n  app.post(\"/api/swiggy-pos\", async (req, res) => {\n    try {\n      const { header, lines } = req.body;\n      \n      if (!header || !lines) {\n        return res.status(400).json({ error: \"Header and lines are required\" });\n      }\n      \n      const createdPo = await storage.createSwiggyPo(header, lines);\n      res.status(201).json(createdPo);\n    } catch (error) {\n      console.error(\"Error creating Swiggy PO:\", error);\n      res.status(500).json({ error: \"Failed to create PO\" });\n    }\n  });\n\n  app.put(\"/api/swiggy-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { header, lines } = req.body;\n      \n      const updatedPo = await storage.updateSwiggyPo(id, header);\n      res.json(updatedPo);\n    } catch (error) {\n      console.error(\"Error updating Swiggy PO:\", error);\n      res.status(500).json({ error: \"Failed to update PO\" });\n    }\n  });\n\n  app.delete(\"/api/swiggy-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteSwiggyPo(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting Swiggy PO:\", error);\n      res.status(500).json({ error: \"Failed to delete PO\" });\n    }\n  });\n\n  // Zepto PO management endpoints\n  app.get(\"/api/zepto-pos\", async (_req, res) => {\n    try {\n      const pos = await storage.getAllZeptoPos();\n      res.json(pos);\n    } catch (error) {\n      console.error(\"Error fetching Zepto POs:\", error);\n      res.status(500).json({ error: \"Failed to fetch Zepto POs\" });\n    }\n  });\n\n  app.get(\"/api/zepto-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: \"Invalid ID\" });\n      }\n      \n      const zeptoPo = await storage.getZeptoPOById(id);\n      if (!zeptoPo) {\n        return res.status(404).json({ error: \"Zepto PO not found\" });\n      }\n      \n      res.json(zeptoPo);\n    } catch (error) {\n      console.error(\"Error fetching Zepto PO:\", error);\n      res.status(500).json({ error: \"Failed to fetch Zepto PO\" });\n    }\n  });\n\n  app.put(\"/api/zepto-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { header, lines } = req.body;\n      \n      const updatedPo = await storage.updateZeptoPo(id, header, lines);\n      res.json(updatedPo);\n    } catch (error) {\n      console.error(\"Error updating Zepto PO:\", error);\n      res.status(500).json({ error: \"Failed to update PO\" });\n    }\n  });\n\n  app.delete(\"/api/zepto-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteZeptoPo(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting Zepto PO:\", error);\n      res.status(500).json({ error: \"Failed to delete PO\" });\n    }\n  });\n\n  // Unified PO upload and preview routes\n  app.post(\"/api/po/preview\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const uploadedBy = \"system\";\n      let parsedData;\n      let detectedVendor = \"\";\n\n      // Check platform parameter first, then try to detect vendor from filename\n      const platformParam = req.body.platform || req.query.platform;\n      const filename = req.file.originalname.toLowerCase();\n      \n      try {\n        // Use platform parameter if provided\n        if (platformParam === \"blinkit\") {\n          detectedVendor = \"blinkit\";\n          console.log(\"Processing Blinkit file with multiple POs (platform param)...\");\n          const blinkitResult = parseBlinkitPO(req.file.buffer, uploadedBy);\n          console.log(\"Found\", blinkitResult.poList.length, \"POs in Blinkit file\");\n          // Return the multiple POs structure for Blinkit\n          return res.json({\n            poList: blinkitResult.poList.map(po => ({\n              header: po.header,\n              lines: po.lines,\n              totalItems: po.lines.length,\n              totalQuantity: po.header.total_quantity,\n              totalAmount: po.lines.reduce((sum, line) => sum + parseFloat(line.total_amount || '0'), 0).toFixed(2)\n            })),\n            detectedVendor: 'blinkit',\n            totalPOs: blinkitResult.poList.length\n          });\n        } else if (platformParam === \"flipkart\") {\n          detectedVendor = \"flipkart\";\n          parsedData = await parseFlipkartGroceryPO(req.file.buffer.toString('utf-8'), uploadedBy);\n        } else if (platformParam === \"zepto\") {\n          detectedVendor = \"zepto\";\n          parsedData = parseZeptoPO(req.file.buffer.toString('utf-8'), uploadedBy);\n        } else if (platformParam === \"citymall\") {\n          detectedVendor = \"citymall\";\n          parsedData = await parseCityMallPO(req.file.buffer.toString('utf-8'), uploadedBy, filename);\n        } else if (platformParam === \"swiggy\") {\n          detectedVendor = \"swiggy\";\n          parsedData = await parseSwiggyPO(req.file.buffer, uploadedBy);\n        } else if (platformParam === \"bigbasket\") {\n          detectedVendor = \"bigbasket\";\n          parsedData = await parseBigBasketPO(req.file.buffer, uploadedBy);\n        } else if (platformParam === \"zomato\") {\n          detectedVendor = \"zomato\";\n          parsedData = await parseZomatoPO(req.file.buffer, uploadedBy);\n        } else if (platformParam === \"dealshare\") {\n          detectedVendor = \"dealshare\";\n          parsedData = await parseDealsharePO(req.file.buffer, uploadedBy);\n        }\n        // Fallback to filename detection if platform param not provided or recognized\n        else if (filename.includes('flipkart') || filename.includes('grocery')) {\n          detectedVendor = \"flipkart\";\n          parsedData = await parseFlipkartGroceryPO(req.file.buffer.toString('utf-8'), uploadedBy);\n        } else if (filename.includes('zepto')) {\n          detectedVendor = \"zepto\";\n          parsedData = parseZeptoPO(req.file.buffer.toString('utf-8'), uploadedBy);\n        } else if (filename.includes('city') || filename.includes('mall')) {\n          detectedVendor = \"citymall\";\n          parsedData = await parseCityMallPO(req.file.buffer.toString('utf-8'), uploadedBy, filename);\n        } else if (filename.includes('blinkit')) {\n          detectedVendor = \"blinkit\";\n          console.log(\"Processing Blinkit file with multiple POs (filename detection)...\");\n          try {\n            const blinkitResult = parseBlinkitPO(req.file.buffer, uploadedBy);\n            console.log(\"Found\", blinkitResult.poList.length, \"POs in Blinkit file\");\n            // Return the multiple POs structure for Blinkit\n            return res.json({\n              poList: blinkitResult.poList.map(po => ({\n                header: po.header,\n                lines: po.lines,\n                totalItems: po.lines.length,\n                totalQuantity: po.header.total_quantity,\n                totalAmount: po.lines.reduce((sum, line) => sum + parseFloat(line.total_amount || '0'), 0).toFixed(2)\n              })),\n              detectedVendor: 'blinkit',\n              totalPOs: blinkitResult.poList.length\n            });\n          } catch (blinkitError) {\n            console.error(\"Blinkit parsing failed:\", blinkitError);\n            throw blinkitError; // Re-throw to fall through to fallback parsers\n          }\n        } else if (filename.includes('swiggy') || filename.includes('soty')) {\n          detectedVendor = \"swiggy\";\n          parsedData = await parseSwiggyPO(req.file.buffer, uploadedBy);\n        } else {\n          // Try different parsers until one works\n          const parsers = [\n            { name: \"flipkart\", parser: (buffer: Buffer, user: string) => parseFlipkartGroceryPO(buffer.toString('utf-8'), user) },\n            { name: \"zepto\", parser: (buffer: Buffer, user: string) => parseZeptoPO(buffer.toString('utf-8'), user) },\n            { name: \"citymall\", parser: (buffer: Buffer, user: string) => parseCityMallPO(buffer.toString('utf-8'), user, filename) },\n            { name: \"blinkit\", parser: (buffer: Buffer, user: string) => {\n              const result = parseBlinkitPO(buffer, user);\n              // Convert multiple PO structure to single PO for fallback detection\n              return result.poList.length > 0 ? result.poList[0] : { header: {}, lines: [] };\n            } },\n            { name: \"swiggy\", parser: (buffer: Buffer, user: string) => parseSwiggyPO(buffer, user) }\n          ];\n\n          for (const { name, parser } of parsers) {\n            try {\n              parsedData = await parser(req.file.buffer, uploadedBy);\n              detectedVendor = name;\n              break;\n            } catch (error) {\n              // Continue to next parser\n            }\n          }\n\n          if (!parsedData) {\n            throw new Error(\"Unable to parse file format\");\n          }\n        }\n\n        const totalQuantity = parsedData.lines.reduce((sum: number, line: any) => sum + (line.quantity || 0), 0);\n        const totalAmount = parsedData.lines.reduce((sum: number, line: any) => {\n          const amount = parseFloat(line.total_amount || line.line_total || line.total_value || '0');\n          return sum + amount;\n        }, 0);\n\n        // Clean header data for display\n        let displayHeader = { ...parsedData.header };\n        \n        // Fix vendor_name display for Swiggy - if it contains payment terms or dates, set to null\n        if (detectedVendor === \"swiggy\") {\n          // Force vendor_name to null for Swiggy since the data is corrupted\n          displayHeader = { ...displayHeader, vendor_name: null };\n        }\n\n        res.json({\n          header: displayHeader,\n          lines: parsedData.lines,\n          detectedVendor: detectedVendor,\n          totalItems: parsedData.lines.length,\n          totalQuantity: totalQuantity,\n          totalAmount: totalAmount.toFixed(2)\n        });\n\n      } catch (parseError) {\n        console.error(\"Error parsing file:\", parseError);\n        res.status(400).json({ error: \"Failed to parse file. Please check the format.\" });\n      }\n\n    } catch (error) {\n      console.error(\"Error previewing PO:\", error);\n      res.status(500).json({ error: \"Failed to preview file\" });\n    }\n  });\n\n  app.post(\"/api/po/import/:vendor\", async (req, res) => {\n    try {\n      const vendor = req.params.vendor;\n      const { header, lines, poList } = req.body;\n\n      // Helper function to safely convert dates\n      const safeConvertDate = (dateValue: any): Date | null => {\n        if (!dateValue) return null;\n        if (dateValue instanceof Date) return dateValue;\n        if (typeof dateValue === 'string') {\n          const parsed = Date.parse(dateValue);\n          return isNaN(parsed) ? null : new Date(parsed);\n        }\n        return null;\n      };\n\n      console.log(\"Import request data:\", { \n        vendor, \n        hasPoList: !!poList, \n        hasHeader: !!header, \n        hasLines: !!lines,\n        bodyKeys: Object.keys(req.body)\n      });\n      \n      // Handle Blinkit multi-PO structure\n      if (vendor === \"blinkit\" && poList && Array.isArray(poList)) {\n        const importResults = [];\n        \n        for (const po of poList) {\n          try {\n            // Check if PO number exists\n            if (!po.header?.po_number) {\n              importResults.push({ \n                po_number: \"Unknown\", \n                status: \"failed\", \n                error: \"PO number is not available\" \n              });\n              continue;\n            }\n\n            // Check for duplicate PO numbers\n            try {\n              const existingPo = await storage.getBlinkitPoByNumber(po.header.po_number);\n              if (existingPo) {\n                importResults.push({ \n                  po_number: po.header.po_number, \n                  status: \"failed\", \n                  error: \"PO already exists\" \n                });\n                continue;\n              }\n            } catch (error) {\n              // Continue if duplicate check method doesn't exist\n            }\n\n            // Clean and convert dates\n            const cleanHeader = { ...po.header };\n            const dateFields = ['order_date', 'po_expiry_date', 'po_date', 'po_release_date', 'expected_delivery_date'];\n            dateFields.forEach(field => {\n              if (cleanHeader[field]) {\n                cleanHeader[field] = safeConvertDate(cleanHeader[field]);\n              }\n            });\n\n            // Clean lines data\n            const cleanLines = po.lines.map((line: any) => {\n              const cleanLine = { ...line };\n              const lineDateFields = ['required_by_date', 'po_expiry_date', 'delivery_date'];\n              lineDateFields.forEach(field => {\n                if (cleanLine[field]) {\n                  cleanLine[field] = safeConvertDate(cleanLine[field]);\n                }\n              });\n              return cleanLine;\n            });\n\n            // Create the PO\n            const createdPo = await storage.createBlinkitPo(cleanHeader, cleanLines);\n            importResults.push({ \n              po_number: po.header.po_number, \n              status: \"success\", \n              id: createdPo.id \n            });\n\n          } catch (error) {\n            console.error(`Error importing PO ${po.header?.po_number}:`, error);\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            importResults.push({ \n              po_number: po.header?.po_number || \"Unknown\", \n              status: \"failed\", \n              error: errorMessage\n            });\n          }\n        }\n\n        return res.status(201).json({ \n          message: `Imported ${importResults.filter(r => r.status === 'success').length} of ${poList.length} POs`, \n          results: importResults \n        });\n      }\n\n      // Handle single PO structure (existing logic)\n      if (!header || !lines) {\n        return res.status(400).json({ error: \"Header and lines are required\" });\n      }\n\n      // Check if PO number exists\n      if (!header.po_number) {\n        return res.status(400).json({ error: \"PO number is not available. Please check your uploaded PO file.\" });\n      }\n\n      // Check for duplicate PO numbers\n      let existingPo;\n      try {\n        switch (vendor) {\n          case \"flipkart\":\n            existingPo = await storage.getFlipkartGroceryPoByNumber(header.po_number);\n            break;\n          case \"zepto\":\n            existingPo = await storage.getZeptoPoByNumber(header.po_number);\n            break;\n          case \"citymall\":\n            existingPo = await storage.getCityMallPoByNumber(header.po_number);\n            break;\n          case \"blinkit\":\n            existingPo = await storage.getBlinkitPoByNumber(header.po_number);\n            break;\n          case \"swiggy\":\n            existingPo = await storage.getSwiggyPoByNumber(header.po_number);\n            break;\n        }\n        \n        if (existingPo) {\n          return res.status(400).json({ error: \"PO already exists\" });\n        }\n      } catch (error) {\n        // If the method doesn't exist, continue - it means no duplicate check is implemented yet\n      }\n\n      // Clean and convert dates to proper Date objects\n      const cleanHeader = { ...header };\n      \n      // Convert all possible date fields\n      const dateFields = ['order_date', 'po_expiry_date', 'po_date', 'po_release_date', 'expected_delivery_date', 'appointment_date', 'expiry_date'];\n      dateFields.forEach(field => {\n        if (cleanHeader[field]) {\n          cleanHeader[field] = safeConvertDate(cleanHeader[field]);\n        }\n      });\n\n      // Clean lines data\n      const cleanLines = lines.map((line: any) => {\n        const cleanLine = { ...line };\n        const lineDateFields = ['required_by_date', 'po_expiry_date', 'delivery_date'];\n        lineDateFields.forEach(field => {\n          if (cleanLine[field]) {\n            cleanLine[field] = safeConvertDate(cleanLine[field]);\n          }\n        });\n        return cleanLine;\n      });\n\n      let createdPo;\n\n      switch (vendor) {\n        case \"flipkart\":\n          try {\n            createdPo = await storage.createFlipkartGroceryPo(cleanHeader, cleanLines);\n          } catch (error: any) {\n            if (error.code === '23505' && error.constraint?.includes('po_number_unique')) {\n              return res.status(409).json({ \n                error: `PO ${cleanHeader.po_number} already exists in Flipkart records`,\n                type: 'duplicate_po'\n              });\n            }\n            throw error;\n          }\n          break;\n        case \"zepto\":\n          try {\n            createdPo = await storage.createZeptoPo(cleanHeader, cleanLines);\n          } catch (error: any) {\n            if (error.code === '23505' && error.constraint?.includes('po_number_unique')) {\n              return res.status(409).json({ \n                error: `PO ${cleanHeader.po_number} already exists in Zepto records`,\n                type: 'duplicate_po'\n              });\n            }\n            throw error;\n          }\n          break;\n        case \"citymall\":\n          try {\n            createdPo = await storage.createCityMallPo(cleanHeader, cleanLines);\n          } catch (error: any) {\n            if (error.code === '23505' && error.constraint?.includes('po_number_unique')) {\n              return res.status(409).json({ \n                error: `PO ${cleanHeader.po_number} already exists in City Mall records`,\n                type: 'duplicate_po'\n              });\n            }\n            throw error;\n          }\n          break;\n        case \"blinkit\":\n          try {\n            createdPo = await storage.createBlinkitPo(cleanHeader, cleanLines);\n          } catch (error: any) {\n            if (error.code === '23505' && error.constraint?.includes('po_number_unique')) {\n              return res.status(409).json({ \n                error: `PO ${cleanHeader.po_number} already exists in Blinkit records`,\n                type: 'duplicate_po'\n              });\n            }\n            throw error;\n          }\n          break;\n        case \"swiggy\":\n          try {\n            createdPo = await storage.createSwiggyPo(cleanHeader, cleanLines);\n          } catch (error: any) {\n            if (error.code === '23505' && error.constraint?.includes('po_number_unique')) {\n              return res.status(409).json({ \n                error: `PO ${cleanHeader.po_number} already exists in Swiggy records`,\n                type: 'duplicate_po'\n              });\n            }\n            throw error;\n          }\n          break;\n        case \"bigbasket\":\n          try {\n            createdPo = await storage.createBigbasketPo(cleanHeader, cleanLines);\n          } catch (error: any) {\n            if (error.code === '23505' && error.constraint === 'bigbasket_po_header_po_number_unique') {\n              return res.status(409).json({ \n                error: `PO ${cleanHeader.po_number} already exists in BigBasket records`,\n                type: 'duplicate_po'\n              });\n            }\n            throw error;\n          }\n          break;\n        case \"zomato\":\n          try {\n            createdPo = await storage.createZomatoPo(cleanHeader, cleanLines);\n          } catch (error: any) {\n            if (error.code === '23505' && error.constraint?.includes('po_number_unique')) {\n              return res.status(409).json({ \n                error: `PO ${cleanHeader.po_number} already exists in Zomato records`,\n                type: 'duplicate_po'\n              });\n            }\n            throw error;\n          }\n          break;\n        case \"dealshare\":\n          try {\n            // Clean dates for Dealshare\n            const dealshareHeader = { ...cleanHeader };\n            const dateFields = ['po_created_date', 'po_delivery_date', 'po_expiry_date'];\n            dateFields.forEach(field => {\n              if (dealshareHeader[field]) {\n                dealshareHeader[field] = safeConvertDate(dealshareHeader[field]);\n              }\n            });\n            \n            createdPo = await storage.createDealsharePo(dealshareHeader, cleanLines);\n          } catch (error: any) {\n            console.error(\"Dealshare import error:\", error);\n            if (error.code === '23505' && error.constraint?.includes('po_number_unique')) {\n              return res.status(409).json({ \n                error: `PO ${cleanHeader.po_number} already exists in Dealshare records`,\n                type: 'duplicate_po'\n              });\n            }\n            throw error;\n          }\n          break;\n        default:\n          return res.status(400).json({ error: \"Unsupported vendor\" });\n      }\n\n      res.status(201).json(createdPo);\n    } catch (error) {\n      console.error(\"Error importing PO:\", error);\n      res.status(500).json({ error: \"Failed to import PO data\" });\n    }\n  });\n\n  // Distributor routes\n  app.get(\"/api/distributors\", async (_req, res) => {\n    try {\n      const distributors = await storage.getAllDistributors();\n      res.json(distributors);\n    } catch (error) {\n      console.error(\"Error fetching distributors:\", error);\n      res.status(500).json({ message: \"Failed to fetch distributors\" });\n    }\n  });\n\n  app.post(\"/api/distributors\", async (req, res) => {\n    try {\n      const validatedData = insertDistributorMstSchema.parse(req.body);\n      const distributor = await storage.createDistributor(validatedData);\n      res.status(201).json(distributor);\n    } catch (error) {\n      console.error(\"Error creating distributor:\", error);\n      res.status(500).json({ message: \"Failed to create distributor\" });\n    }\n  });\n\n  app.get(\"/api/distributors/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const distributor = await storage.getDistributorById(id);\n      if (!distributor) {\n        return res.status(404).json({ message: \"Distributor not found\" });\n      }\n      res.json(distributor);\n    } catch (error) {\n      console.error(\"Error fetching distributor:\", error);\n      res.status(500).json({ message: \"Failed to fetch distributor\" });\n    }\n  });\n\n  app.put(\"/api/distributors/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = insertDistributorMstSchema.partial().parse(req.body);\n      const distributor = await storage.updateDistributor(id, validatedData);\n      res.json(distributor);\n    } catch (error) {\n      console.error(\"Error updating distributor:\", error);\n      res.status(500).json({ message: \"Failed to update distributor\" });\n    }\n  });\n\n  app.delete(\"/api/distributors/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteDistributor(id);\n      res.status(204).end();\n    } catch (error) {\n      console.error(\"Error deleting distributor:\", error);\n      res.status(500).json({ message: \"Failed to delete distributor\" });\n    }\n  });\n\n  // Distributor PO routes\n  app.get(\"/api/distributor-pos\", async (_req, res) => {\n    try {\n      const pos = await storage.getAllDistributorPos();\n      res.json(pos);\n    } catch (error) {\n      console.error(\"Error fetching distributor POs:\", error);\n      res.status(500).json({ message: \"Failed to fetch distributor POs\" });\n    }\n  });\n\n  app.post(\"/api/distributor-pos\", async (req, res) => {\n    try {\n      const validatedData = createDistributorPoSchema.parse(req.body);\n      const po = await storage.createDistributorPo(validatedData.header, validatedData.items);\n      res.status(201).json(po);\n    } catch (error) {\n      console.error(\"Error creating distributor PO:\", error);\n      res.status(500).json({ message: \"Failed to create distributor PO\" });\n    }\n  });\n\n  app.get(\"/api/distributor-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const po = await storage.getDistributorPoById(id);\n      if (!po) {\n        return res.status(404).json({ message: \"Distributor PO not found\" });\n      }\n      res.json(po);\n    } catch (error) {\n      console.error(\"Error fetching distributor PO:\", error);\n      res.status(500).json({ message: \"Failed to fetch distributor PO\" });\n    }\n  });\n\n  app.put(\"/api/distributor-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = updateDistributorPoSchema.parse(req.body);\n      const po = await storage.updateDistributorPo(id, validatedData.header, validatedData.items);\n      res.json(po);\n    } catch (error) {\n      console.error(\"Error updating distributor PO:\", error);\n      res.status(500).json({ message: \"Failed to update distributor PO\" });\n    }\n  });\n\n  app.delete(\"/api/distributor-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteDistributorPo(id);\n      res.status(204).end();\n    } catch (error) {\n      console.error(\"Error deleting distributor PO:\", error);\n      res.status(500).json({ message: \"Failed to delete distributor PO\" });\n    }\n  });\n\n  // Distributor Order Items routes\n  app.get(\"/api/distributor-order-items\", async (_req, res) => {\n    try {\n      const items = await storage.getAllDistributorOrderItems();\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching distributor order items:\", error);\n      res.status(500).json({ message: \"Failed to fetch distributor order items\" });\n    }\n  });\n\n  // Zomato PO routes\n  app.get(\"/api/zomato-pos\", async (_req, res) => {\n    try {\n      const pos = await storage.getAllZomatoPos();\n      res.json(pos);\n    } catch (error) {\n      console.error(\"Error fetching Zomato POs:\", error);\n      res.status(500).json({ message: \"Failed to fetch Zomato POs\" });\n    }\n  });\n\n  app.get(\"/api/zomato-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const po = await storage.getZomatoPoById(id);\n      if (!po) {\n        return res.status(404).json({ message: \"Zomato PO not found\" });\n      }\n      res.json(po);\n    } catch (error) {\n      console.error(\"Error fetching Zomato PO:\", error);\n      res.status(500).json({ message: \"Failed to fetch Zomato PO\" });\n    }\n  });\n\n  // Dealshare PO routes\n  app.get(\"/api/dealshare-pos\", async (_req, res) => {\n    try {\n      const pos = await storage.getAllDealsharePos();\n      res.json(pos);\n    } catch (error) {\n      console.error(\"Error fetching Dealshare POs:\", error);\n      res.status(500).json({ message: \"Failed to fetch Dealshare POs\" });\n    }\n  });\n\n  app.get(\"/api/dealshare-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const po = await storage.getDealsharePoById(id);\n      if (!po) {\n        return res.status(404).json({ message: \"Dealshare PO not found\" });\n      }\n      res.json(po);\n    } catch (error) {\n      console.error(\"Error fetching Dealshare PO:\", error);\n      res.status(500).json({ message: \"Failed to fetch Dealshare PO\" });\n    }\n  });\n\n  app.post(\"/api/dealshare-pos\", async (req, res) => {\n    try {\n      const { header, items } = req.body;\n      \n      if (!header || !items) {\n        return res.status(400).json({ error: \"Header and items are required\" });\n      }\n      \n      const createdPo = await storage.createDealsharePo(header, items);\n      res.status(201).json(createdPo);\n    } catch (error) {\n      console.error(\"Error creating Dealshare PO:\", error);\n      res.status(500).json({ error: \"Failed to create PO\" });\n    }\n  });\n\n  app.put(\"/api/dealshare-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { header, items } = req.body;\n      \n      const updatedPo = await storage.updateDealsharePo(id, header, items);\n      res.json(updatedPo);\n    } catch (error) {\n      console.error(\"Error updating Dealshare PO:\", error);\n      res.status(500).json({ error: \"Failed to update PO\" });\n    }\n  });\n\n  app.delete(\"/api/dealshare-pos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteDealsharePo(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting Dealshare PO:\", error);\n      res.status(500).json({ error: \"Failed to delete PO\" });\n    }\n  });\n\n  // Secondary Sales Routes\n  app.get(\"/api/secondary-sales\", async (req, res) => {\n    try {\n      const { platform, businessUnit } = req.query;\n      const sales = await storage.getAllSecondarySales(\n        platform as string, \n        businessUnit as string\n      );\n      res.json(sales);\n    } catch (error) {\n      console.error(\"Error fetching secondary sales:\", error);\n      res.status(500).json({ error: \"Failed to fetch secondary sales\" });\n    }\n  });\n\n  app.get(\"/api/secondary-sales/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const sale = await storage.getSecondarySalesById(id);\n      \n      if (!sale) {\n        return res.status(404).json({ error: \"Secondary sales record not found\" });\n      }\n      \n      res.json(sale);\n    } catch (error) {\n      console.error(\"Error fetching secondary sales:\", error);\n      res.status(500).json({ error: \"Failed to fetch secondary sales\" });\n    }\n  });\n\n  // Secondary Sales Preview Route\n  app.post(\"/api/secondary-sales/preview\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const { platform, businessUnit, periodType, startDate, endDate } = req.body;\n      \n      if (!platform || !businessUnit || !periodType) {\n        return res.status(400).json({ error: \"Platform, business unit, and period type are required\" });\n      }\n\n      if (![\"amazon\", \"zepto\", \"blinkit\", \"swiggy\", \"jiomartsale\", \"jiomartcancel\", \"bigbasket\", \"flipkart-grocery\"].includes(platform)) {\n        return res.status(400).json({ error: \"Supported platforms: amazon, zepto, blinkit, swiggy, jiomartsale, jiomartcancel, bigbasket, flipkart-grocery\" });\n      }\n\n      // Update business unit validation for Flipkart\n      if (platform === \"flipkart-grocery\") {\n        if (![\"jivo-mart\", \"chirag\"].includes(businessUnit)) {\n          return res.status(400).json({ error: \"Business unit for Flipkart Grocery must be either jivo-mart or chirag\" });\n        }\n      } else if (![\"jivo-wellness\", \"jivo-mart\"].includes(businessUnit)) {\n        return res.status(400).json({ error: \"Business unit must be either jivo-wellness or jivo-mart\" });\n      }\n\n      // Update period type validation for Flipkart\n      if (platform === \"flipkart-grocery\") {\n        if (![\"2-month\"].includes(periodType)) {\n          return res.status(400).json({ error: \"Period type for Flipkart Grocery must be 2-month\" });\n        }\n      } else if (![\"daily\", \"date-range\"].includes(periodType)) {\n        return res.status(400).json({ error: \"Period type must be either daily or date-range\" });\n      }\n\n      let parsedData;\n\n      try {\n        if (platform === \"amazon\") {\n          parsedData = parseAmazonSecondarySales(\n            req.file.buffer, \n            platform, \n            businessUnit, \n            periodType,\n            startDate,\n            endDate\n          );\n        } else if (platform === \"zepto\") {\n          const reportDate = periodType === \"daily\" ? new Date(startDate) : new Date();\n          const periodStart = periodType === \"date-range\" ? new Date(startDate) : undefined;\n          const periodEnd = periodType === \"date-range\" ? new Date(endDate) : undefined;\n          \n          const parseResult = await parseZeptoSecondaryData(\n            req.file.buffer.toString('utf8'),\n            reportDate,\n            periodStart,\n            periodEnd\n          );\n          \n          if (!parseResult.success) {\n            return res.status(400).json({ error: parseResult.error });\n          }\n          \n          parsedData = {\n            platform,\n            businessUnit,\n            periodType,\n            reportDate,\n            periodStart,\n            periodEnd,\n            totalItems: parseResult.totalItems || 0,\n            items: parseResult.data || [],\n            summary: {\n              totalRecords: parseResult.totalItems || 0,\n              totalSalesValue: parseResult.data?.reduce((sum, item) => sum + (parseFloat(item.gmv || '0') || 0), 0) || 0,\n              uniqueProducts: new Set(parseResult.data?.map(item => item.sku_name).filter(Boolean)).size,\n              dateRange: periodType === \"date-range\" ? `${startDate} to ${endDate}` : startDate\n            }\n          };\n        } else if (platform === \"blinkit\") {\n          const reportDate = periodType === \"daily\" ? new Date(startDate) : new Date();\n          const periodStart = periodType === \"date-range\" ? new Date(startDate) : undefined;\n          const periodEnd = periodType === \"date-range\" ? new Date(endDate) : undefined;\n          \n          const parsedResult = parseBlinkitSecondarySalesFile(\n            req.file.buffer,\n            req.file.originalname || 'blinkit-sales.csv',\n            businessUnit,\n            periodType,\n            periodType === \"daily\" ? startDate : undefined,\n            periodType === \"date-range\" ? startDate : undefined,\n            periodType === \"date-range\" ? endDate : undefined\n          );\n          \n          parsedData = {\n            platform,\n            businessUnit,\n            periodType,\n            reportDate,\n            periodStart,\n            periodEnd,\n            totalItems: parsedResult.totalItems,\n            items: parsedResult.items,\n            summary: {\n              totalRecords: parsedResult.totalItems,\n              totalSalesValue: parsedResult.summary?.totalSalesValue || 0,\n              uniqueProducts: parsedResult.summary?.uniqueProducts || 0,\n              dateRange: periodType === \"date-range\" ? `${startDate} to ${endDate}` : startDate\n            }\n          };\n        } else if (platform === \"swiggy\") {\n          const reportDate = periodType === \"daily\" ? new Date(startDate) : new Date();\n          const periodStart = periodType === \"date-range\" ? new Date(startDate) : undefined;\n          const periodEnd = periodType === \"date-range\" ? new Date(endDate) : undefined;\n          \n          const parseResult = await parseSwiggySecondaryData(\n            req.file.buffer.toString('utf8'),\n            reportDate,\n            periodStart,\n            periodEnd\n          );\n          \n          if (!parseResult.success) {\n            return res.status(400).json({ error: parseResult.error });\n          }\n          \n          parsedData = {\n            platform,\n            businessUnit,\n            periodType,\n            reportDate,\n            periodStart,\n            periodEnd,\n            totalItems: parseResult.totalItems || 0,\n            items: parseResult.data || [],\n            summary: {\n              totalRecords: parseResult.totalItems || 0,\n              totalSalesValue: parseResult.data?.reduce((sum, item) => sum + (parseFloat(item.gmv || '0') || 0), 0) || 0,\n              uniqueProducts: new Set(parseResult.data?.map(item => item.product_name).filter(Boolean)).size,\n              dateRange: periodType === \"date-range\" ? `${startDate} to ${endDate}` : startDate\n            }\n          };\n        } else if (platform === \"jiomartsale\") {\n          const { parseJioMartSaleSecondarySales } = await import(\"./jiomartsale-secondary-sales-parser\");\n          \n          parsedData = parseJioMartSaleSecondarySales(\n            req.file.buffer,\n            platform,\n            businessUnit,\n            periodType,\n            startDate,\n            endDate\n          );\n        } else if (platform === \"jiomartcancel\") {\n          const { parseJioMartCancelSecondarySales } = await import(\"./jiomartcancel-secondary-sales-parser\");\n          \n          parsedData = parseJioMartCancelSecondarySales(\n            req.file.buffer,\n            platform,\n            businessUnit,\n            periodType,\n            startDate,\n            endDate\n          );\n        } else if (platform === \"bigbasket\") {\n          parsedData = parseBigBasketSecondarySales(\n            req.file.buffer,\n            platform,\n            businessUnit,\n            periodType,\n            startDate,\n            endDate\n          );\n        } else if (platform === \"flipkart-grocery\") {\n          parsedData = parseFlipkartSecondaryData(req.file.buffer, periodType, businessUnit, startDate, endDate);\n        }\n\n        if (!parsedData) {\n          return res.status(400).json({ error: \"Unsupported platform\" });\n        }\n\n        // Handle different data structures for different platforms\n        const dataItems = platform === \"flipkart-grocery\" ? parsedData.data : parsedData.items;\n        if (!dataItems || dataItems.length === 0) {\n          return res.status(400).json({ error: \"No valid sales data found in file\" });\n        }\n\n        res.json({\n          platform: parsedData.platform,\n          businessUnit: parsedData.businessUnit,\n          periodType: parsedData.periodType,\n          reportDate: parsedData.reportDate,\n          periodStart: parsedData.periodStart,\n          periodEnd: parsedData.periodEnd,\n          totalItems: parsedData.totalItems,\n          summary: parsedData.summary,\n          items: platform === \"flipkart-grocery\" ? parsedData.data : parsedData.items // Send all items for preview\n        });\n\n      } catch (parseError: any) {\n        console.error(\"Parse error:\", parseError);\n        return res.status(400).json({ \n          error: \"Failed to parse file\", \n          details: parseError.message \n        });\n      }\n\n    } catch (error) {\n      console.error(\"Error in secondary sales preview:\", error);\n      res.status(500).json({ error: \"Failed to preview secondary sales file\" });\n    }\n  });\n\n  // Helper function to generate file hash\n  function generateFileHash(buffer: Buffer, filename: string): string {\n    const hash = crypto.createHash('sha256');\n    hash.update(buffer);\n    hash.update(filename);\n    return hash.digest('hex');\n  }\n\n  // Helper function to track file upload\n  async function trackFileUpload(fileHash: string, filename: string, platform: string, businessUnit: string, periodType: string, uploadType: string, fileSize: number): Promise<void> {\n    try {\n      const { fileUploadTracking } = await import(\"@shared/schema\");\n      const { eq, and } = await import(\"drizzle-orm\");\n      \n      // Check if this exact combination already exists\n      const existing = await db.select().from(fileUploadTracking)\n        .where(and(\n          eq(fileUploadTracking.file_hash, fileHash),\n          eq(fileUploadTracking.platform, platform),\n          eq(fileUploadTracking.business_unit, businessUnit),\n          eq(fileUploadTracking.period_type, periodType),\n          eq(fileUploadTracking.upload_type, uploadType)\n        ))\n        .limit(1);\n      \n      // Only insert if this exact combination doesn't exist\n      if (existing.length === 0) {\n        await db.insert(fileUploadTracking).values({\n          file_hash: fileHash,\n          original_filename: filename,\n          platform: platform,\n          business_unit: businessUnit,\n          period_type: periodType,\n          upload_type: uploadType,\n          file_size: fileSize,\n          uploader_info: 'system'\n        });\n      }\n    } catch (error) {\n      console.error(\"Error tracking file upload:\", error);\n      // Don't throw - file tracking is not critical to upload success\n    }\n  }\n\n  // Helper function to check for duplicate inventory files\n  async function checkForDuplicateInventoryFile(fileHash: string, platform: string, businessUnit: string, periodType: string): Promise<boolean> {\n    try {\n      const { fileUploadTracking } = await import(\"@shared/schema\");\n      const { eq, and } = await import(\"drizzle-orm\");\n      \n      // Check for duplicates if it's the exact same import combination\n      const existingFile = await db.select().from(fileUploadTracking)\n        .where(and(\n          eq(fileUploadTracking.file_hash, fileHash),\n          eq(fileUploadTracking.platform, platform),\n          eq(fileUploadTracking.business_unit, businessUnit),\n          eq(fileUploadTracking.period_type, periodType),\n          eq(fileUploadTracking.upload_type, 'inventory')\n        ))\n        .limit(1);\n      \n      return existingFile.length > 0;\n    } catch (error) {\n      console.error(\"Error checking for duplicate inventory file:\", error);\n      return false; // If check fails, allow upload to proceed\n    }\n  }\n\n  // Helper function to check for duplicate files\n  async function checkForDuplicateFile(fileHash: string, platform: string, businessUnit: string, periodType: string): Promise<boolean> {\n    try {\n      let table;\n      const tableName = getTableName(platform, businessUnit, periodType);\n      \n      // Import the schema for the appropriate table\n      const { \n        scAmJwDaily, scAmJwRange, scAmJmDaily, scAmJmRange,\n        scZeptoJmDaily, scZeptoJmRange,\n        scBlinkitJmDaily, scBlinkitJmRange,\n        scSwiggyJmDaily, scSwiggyJmRange,\n        scJioMartSaleJmDaily, scJioMartSaleJmRange,\n        scJioMartCancelJmDaily, scJioMartCancelJmRange,\n        scBigBasketJmDaily, scBigBasketJmRange\n      } = await import(\"@shared/schema\");\n      \n      // Select the appropriate table based on platform and period type\n      switch (tableName) {\n        case \"SC_Amazon_JW_Daily\":\n          table = scAmJwDaily;\n          break;\n        case \"SC_Amazon_JW_Range\":\n          table = scAmJwRange;\n          break;\n        case \"SC_Amazon_JM_Daily\":\n          table = scAmJmDaily;\n          break;\n        case \"SC_Amazon_JM_Range\":\n          table = scAmJmRange;\n          break;\n        case \"SC_Zepto_JM_Daily\":\n          table = scZeptoJmDaily;\n          break;\n        case \"SC_Zepto_JM_Range\":\n          table = scZeptoJmRange;\n          break;\n        case \"SC_Blinkit_JM_Daily\":\n          table = scBlinkitJmDaily;\n          break;\n        case \"SC_Blinkit_JM_Range\":\n          table = scBlinkitJmRange;\n          break;\n        case \"SC_Swiggy_JM_Daily\":\n          table = scSwiggyJmDaily;\n          break;\n        case \"SC_Swiggy_JM_Range\":\n          table = scSwiggyJmRange;\n          break;\n        case \"SC_JioMartSale_JM_Daily\":\n          table = scJioMartSaleJmDaily;\n          break;\n        case \"SC_JioMartSale_JM_Range\":\n          table = scJioMartSaleJmRange;\n          break;\n        case \"SC_JioMartCancel_JM_Daily\":\n          table = scJioMartCancelJmDaily;\n          break;\n        case \"SC_JioMartCancel_JM_Range\":\n          table = scJioMartCancelJmRange;\n          break;\n        case \"SC_BigBasket_JM_Daily\":\n          table = scBigBasketJmDaily;\n          break;\n        case \"SC_BigBasket_JM_Range\":\n          table = scBigBasketJmRange;\n          break;\n        default:\n          return false;\n      }\n      \n      // Check if any record exists with the same file hash in attachment_path\n      const { like, isNotNull, and } = await import(\"drizzle-orm\");\n      const existingRecords = await db.select().from(table).where(\n        and(\n          isNotNull(table.attachment_path),\n          like(table.attachment_path, `%${fileHash}%`)\n        )\n      ).limit(1);\n      \n      return existingRecords.length > 0;\n    } catch (error) {\n      console.error(\"Error checking for duplicate file:\", error);\n      return false;\n    }\n  }\n\n  // Helper function to get table name\n  function getTableName(platform: string, businessUnit: string, periodType: string): string {\n    const platformMap: Record<string, string> = {\n      \"amazon\": \"Amazon\",\n      \"zepto\": \"Zepto\", \n      \"blinkit\": \"Blinkit\",\n      \"swiggy\": \"Swiggy\",\n      \"jiomartsale\": \"JioMartSale\",\n      \"jiomartcancel\": \"JioMartCancel\",\n      \"bigbasket\": \"BigBasket\"\n    };\n    \n    const businessUnitMap: Record<string, string> = {\n      \"jivo-wellness\": \"JW\",\n      \"jivo-mart\": \"JM\"\n    };\n    \n    const periodTypeMap: Record<string, string> = {\n      \"daily\": \"Daily\",\n      \"date-range\": \"Range\"\n    };\n    \n    return `SC_${platformMap[platform]}_${businessUnitMap[businessUnit]}_${periodTypeMap[periodType]}`;\n  }\n\n  // Secondary Sales Import Route\n  app.post(\"/api/secondary-sales/import/:platform\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const { platform } = req.params;\n      const { businessUnit, periodType, startDate, endDate } = req.body;\n      \n      if (!platform || !businessUnit || !periodType) {\n        return res.status(400).json({ error: \"Platform, business unit, and period type are required\" });\n      }\n\n      if (![\"amazon\", \"zepto\", \"blinkit\", \"swiggy\", \"jiomartsale\", \"jiomartcancel\", \"bigbasket\", \"flipkart-grocery\"].includes(platform)) {\n        return res.status(400).json({ error: \"Supported platforms: amazon, zepto, blinkit, swiggy, jiomartsale, jiomartcancel, bigbasket, flipkart-grocery\" });\n      }\n\n      // Update business unit validation for Flipkart\n      if (platform === \"flipkart-grocery\") {\n        if (![\"jivo-mart\", \"chirag\"].includes(businessUnit)) {\n          return res.status(400).json({ error: \"Business unit for Flipkart Grocery must be either jivo-mart or chirag\" });\n        }\n      } else if (![\"jivo-wellness\", \"jivo-mart\"].includes(businessUnit)) {\n        return res.status(400).json({ error: \"Business unit must be either jivo-wellness or jivo-mart\" });\n      }\n\n      // Update period type validation for Flipkart\n      if (platform === \"flipkart-grocery\") {\n        if (![\"2-month\"].includes(periodType)) {\n          return res.status(400).json({ error: \"Period type for Flipkart Grocery must be 2-month\" });\n        }\n      } else if (![\"daily\", \"date-range\"].includes(periodType)) {\n        return res.status(400).json({ error: \"Period type must be either daily or date-range\" });\n      }\n\n      if (periodType === \"date-range\" && (!startDate || !endDate) && platform !== \"flipkart-grocery\") {\n        return res.status(400).json({ error: \"Start date and end date are required for date-range period type\" });\n      }\n\n      // Generate file hash for duplicate detection\n      const fileHash = generateFileHash(req.file.buffer, req.file.originalname || 'unknown');\n      \n      // Note: We don't check for duplicates in preview - users should be able to preview any file\n\n      let parsedData;\n\n      // Upload file to object storage first\n      let attachmentPath = null;\n      try {\n        const { ObjectStorageService } = await import(\"./objectStorage\");\n        const objectStorageService = new ObjectStorageService();\n        const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n        \n        // Upload the file\n        const uploadResponse = await fetch(uploadURL, {\n          method: 'PUT',\n          body: req.file.buffer,\n          headers: {\n            'Content-Type': req.file.mimetype\n          }\n        });\n        \n        if (uploadResponse.ok) {\n          attachmentPath = objectStorageService.normalizeObjectEntityPath(uploadURL) + `?hash=${fileHash}`;\n        }\n      } catch (uploadError) {\n        console.error(\"Error uploading file to object storage:\", uploadError);\n        // Continue without attachment if upload fails\n      }\n\n      try {\n        if (platform === \"amazon\") {\n          parsedData = parseAmazonSecondarySales(\n            req.file.buffer, \n            platform, \n            businessUnit, \n            periodType,\n            startDate,\n            endDate,\n            attachmentPath || undefined\n          );\n        } else if (platform === \"zepto\") {\n          const reportDate = periodType === \"daily\" ? new Date(startDate) : new Date();\n          const periodStart = periodType === \"date-range\" ? new Date(startDate) : undefined;\n          const periodEnd = periodType === \"date-range\" ? new Date(endDate) : undefined;\n          \n          const parseResult = await parseZeptoSecondaryData(\n            req.file.buffer.toString('utf8'),\n            reportDate,\n            periodStart,\n            periodEnd\n          );\n          \n          if (!parseResult.success) {\n            return res.status(400).json({ error: parseResult.error });\n          }\n          \n          // Add attachment path to all items\n          const itemsWithAttachment = parseResult.data?.map(item => ({\n            ...item,\n            attachment_path: attachmentPath\n          })) || [];\n          \n          parsedData = {\n            platform,\n            businessUnit,\n            periodType,\n            reportDate,\n            periodStart,\n            periodEnd,\n            totalItems: parseResult.totalItems || 0,\n            items: itemsWithAttachment,\n            summary: {\n              totalRecords: parseResult.totalItems || 0,\n              totalSalesValue: parseResult.data?.reduce((sum: number, item: any) => sum + (parseFloat(item.gmv || '0') || 0), 0) || 0,\n              uniqueProducts: new Set(parseResult.data?.map((item: any) => item.sku_name).filter(Boolean)).size,\n              dateRange: periodType === \"date-range\" ? `${startDate} to ${endDate}` : startDate\n            }\n          };\n        } else if (platform === \"blinkit\") {\n          const reportDate = periodType === \"daily\" ? new Date(startDate) : new Date();\n          const periodStart = periodType === \"date-range\" ? new Date(startDate) : undefined;\n          const periodEnd = periodType === \"date-range\" ? new Date(endDate) : undefined;\n          \n          const parsedResult = parseBlinkitSecondarySalesFile(\n            req.file.buffer,\n            req.file.originalname || 'blinkit-sales.csv',\n            businessUnit,\n            periodType,\n            periodType === \"daily\" ? startDate : undefined,\n            periodType === \"date-range\" ? startDate : undefined,\n            periodType === \"date-range\" ? endDate : undefined\n          );\n          \n          // Add attachment path to all items\n          const itemsWithAttachment = parsedResult.items.map(item => ({\n            ...item,\n            attachment_path: attachmentPath\n          }));\n          \n          parsedData = {\n            platform,\n            businessUnit,\n            periodType,\n            reportDate,\n            periodStart,\n            periodEnd,\n            totalItems: parsedResult.totalItems,\n            items: itemsWithAttachment,\n            summary: {\n              totalRecords: parsedResult.totalItems,\n              totalSalesValue: parsedResult.summary?.totalSalesValue || 0,\n              uniqueProducts: parsedResult.summary?.uniqueProducts || 0,\n              dateRange: periodType === \"date-range\" ? `${startDate} to ${endDate}` : startDate\n            }\n          };\n        } else if (platform === \"swiggy\") {\n          const reportDate = periodType === \"daily\" ? new Date(startDate) : new Date();\n          const periodStart = periodType === \"date-range\" ? new Date(startDate) : undefined;\n          const periodEnd = periodType === \"date-range\" ? new Date(endDate) : undefined;\n          \n          const parseResult = await parseSwiggySecondaryData(\n            req.file.buffer.toString('utf8'),\n            reportDate,\n            periodStart,\n            periodEnd\n          );\n          \n          if (!parseResult.success) {\n            return res.status(400).json({ error: parseResult.error });\n          }\n          \n          // Add attachment path to all items\n          const itemsWithAttachment = parseResult.data?.map(item => ({\n            ...item,\n            attachment_path: attachmentPath\n          })) || [];\n          \n          parsedData = {\n            platform,\n            businessUnit,\n            periodType,\n            reportDate,\n            periodStart,\n            periodEnd,\n            totalItems: parseResult.totalItems || 0,\n            items: itemsWithAttachment,\n            summary: {\n              totalRecords: parseResult.totalItems || 0,\n              totalSalesValue: parseResult.data?.reduce((sum: number, item: any) => sum + (parseFloat(item.gmv || '0') || 0), 0) || 0,\n              uniqueProducts: new Set(parseResult.data?.map((item: any) => item.product_name).filter(Boolean)).size,\n              dateRange: periodType === \"date-range\" ? `${startDate} to ${endDate}` : startDate\n            }\n          };\n        } else if (platform === \"jiomartsale\") {\n          const { parseJioMartSaleSecondarySales } = await import(\"./jiomartsale-secondary-sales-parser\");\n          \n          const parsedResult = parseJioMartSaleSecondarySales(\n            req.file.buffer,\n            platform,\n            businessUnit,\n            periodType,\n            startDate,\n            endDate\n          );\n          \n          // Add attachment path to all items\n          const itemsWithAttachment = parsedResult.items.map(item => ({\n            ...item,\n            attachment_path: attachmentPath\n          }));\n          \n          parsedData = {\n            ...parsedResult,\n            items: itemsWithAttachment\n          };\n        } else if (platform === \"jiomartcancel\") {\n          const { parseJioMartCancelSecondarySales } = await import(\"./jiomartcancel-secondary-sales-parser\");\n          \n          const parsedResult = parseJioMartCancelSecondarySales(\n            req.file.buffer,\n            platform,\n            businessUnit,\n            periodType,\n            startDate,\n            endDate\n          );\n          \n          // Add attachment path to all items\n          const itemsWithAttachment = parsedResult.items.map(item => ({\n            ...item,\n            attachment_path: attachmentPath\n          }));\n          \n          parsedData = {\n            ...parsedResult,\n            items: itemsWithAttachment\n          };\n        } else if (platform === \"bigbasket\") {\n          const parsedResult = parseBigBasketSecondarySales(\n            req.file.buffer,\n            platform,\n            businessUnit,\n            periodType,\n            startDate,\n            endDate\n          );\n          \n          // Add attachment path to all items\n          const itemsWithAttachment = parsedResult.items.map(item => ({\n            ...item,\n            attachment_path: attachmentPath\n          }));\n          \n          parsedData = {\n            ...parsedResult,\n            items: itemsWithAttachment\n          };\n        } else if (platform === \"flipkart-grocery\") {\n          parsedData = parseFlipkartSecondaryData(req.file.buffer, periodType, businessUnit, startDate, endDate);\n          \n          // Add attachment path to all items\n          const itemsWithAttachment = parsedData.data.map(item => ({\n            ...item,\n            attachment_path: attachmentPath\n          }));\n          \n          parsedData = {\n            ...parsedData,\n            data: itemsWithAttachment\n          };\n        }\n\n        if (!parsedData) {\n          return res.status(400).json({ error: \"Unsupported platform\" });\n        }\n\n        // Handle different data structures for different platforms\n        const dataItems = platform === \"flipkart-grocery\" ? parsedData.data : parsedData.items;\n        if (!dataItems || dataItems.length === 0) {\n          return res.status(400).json({ error: \"No valid sales data found in file\" });\n        }\n\n        let insertedItems;\n        let tableName;\n        \n        // Route to specific table based on platform, business unit and period type\n        if (platform === \"amazon\") {\n          if (businessUnit === \"jivo-wellness\" && periodType === \"daily\") {\n            insertedItems = await storage.createScAmJwDaily(parsedData.items as any);\n            tableName = \"SC_AM_JW_Daily\";\n          } else if (businessUnit === \"jivo-wellness\" && periodType === \"date-range\") {\n            insertedItems = await storage.createScAmJwRange(parsedData.items as any);\n            tableName = \"SC_AM_JW_Range\";\n          } else if (businessUnit === \"jivo-mart\" && periodType === \"daily\") {\n            insertedItems = await storage.createScAmJmDaily(parsedData.items as any);\n            tableName = \"SC_AM_JM_Daily\";\n          } else if (businessUnit === \"jivo-mart\" && periodType === \"date-range\") {\n            insertedItems = await storage.createScAmJmRange(parsedData.items as any);\n            tableName = \"SC_AM_JM_Range\";\n          }\n        } else if (platform === \"zepto\") {\n          // Ensure all date fields are properly formatted for Zepto\n          const zeptoItemsWithDates = parsedData.items.map((item: any) => {\n            // Parse dates safely with multiple fallbacks\n            let itemDate = new Date();\n            if (item.date) {\n              let parsedDate = new Date(item.date);\n              if (isNaN(parsedDate.getTime())) {\n                parsedDate = new Date(item.date + 'T00:00:00.000Z');\n              }\n              if (isNaN(parsedDate.getTime()) && typeof item.date === 'string' && item.date.includes('-')) {\n                const [day, month, year] = item.date.split('-');\n                if (day && month && year) {\n                  parsedDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n                }\n              }\n              if (!isNaN(parsedDate.getTime())) {\n                itemDate = parsedDate;\n              }\n            }\n            \n            // Parse report date safely\n            let reportDate = new Date();\n            if ((parsedData as any).reportDate) {\n              const parsedReportDate = new Date((parsedData as any).reportDate);\n              if (!isNaN(parsedReportDate.getTime())) {\n                reportDate = parsedReportDate;\n              }\n            }\n            \n            return {\n              ...item,\n              date: itemDate,\n              report_date: reportDate\n            };\n          });\n\n          if (businessUnit === \"jivo-mart\" && periodType === \"daily\") {\n            insertedItems = await storage.createScZeptoJmDaily(zeptoItemsWithDates as any);\n            tableName = \"SC_Zepto_JM_Daily\";\n          } else if (businessUnit === \"jivo-mart\" && periodType === \"date-range\") {\n            // For date-range, also add period fields\n            const zeptoItemsWithPeriod = zeptoItemsWithDates.map(item => {\n              let periodStart = new Date();\n              let periodEnd = new Date();\n              \n              if ((parsedData as any).periodStart) {\n                const parsedPeriodStart = new Date((parsedData as any).periodStart);\n                if (!isNaN(parsedPeriodStart.getTime())) {\n                  periodStart = parsedPeriodStart;\n                }\n              }\n              \n              if ((parsedData as any).periodEnd) {\n                const parsedPeriodEnd = new Date((parsedData as any).periodEnd);\n                if (!isNaN(parsedPeriodEnd.getTime())) {\n                  periodEnd = parsedPeriodEnd;\n                }\n              }\n              \n              return {\n                ...item,\n                period_start: periodStart,\n                period_end: periodEnd\n              };\n            });\n            insertedItems = await storage.createScZeptoJmRange(zeptoItemsWithPeriod as any);\n            tableName = \"SC_Zepto_JM_Range\";\n          }\n        } else if (platform === \"blinkit\") {\n          // Convert date strings to Date objects for database insertion and add report_date\n          const blinkitItemsWithDates = parsedData.items.map((item: any) => {\n            // Parse the date more safely with multiple fallbacks\n            let itemDate = new Date();\n            if (item.date) {\n              // Try multiple date parsing approaches\n              let parsedDate = new Date(item.date);\n              if (isNaN(parsedDate.getTime())) {\n                // Try ISO format\n                parsedDate = new Date(item.date + 'T00:00:00.000Z');\n              }\n              if (isNaN(parsedDate.getTime())) {\n                // Try replacing dashes with slashes\n                parsedDate = new Date(item.date.replace(/-/g, '/'));\n              }\n              if (!isNaN(parsedDate.getTime())) {\n                itemDate = parsedDate;\n              }\n            }\n            \n            // Parse report date safely\n            let reportDate = new Date();\n            if ((parsedData as any).reportDate) {\n              const parsedReportDate = new Date((parsedData as any).reportDate);\n              if (!isNaN(parsedReportDate.getTime())) {\n                reportDate = parsedReportDate;\n              }\n            }\n            \n            console.log('Processing item:', {\n              originalDate: item.date,\n              parsedDate: itemDate,\n              reportDate: reportDate,\n              itemId: item.item_id\n            });\n            \n            return {\n              item_id: item.item_id || null,\n              item_name: item.item_name || null,\n              manufacturer_id: item.manufacturer_id || null,\n              manufacturer_name: item.manufacturer_name || null,\n              city_id: item.city_id || null,\n              city_name: item.city_name || null,\n              category: item.category || null,\n              date: itemDate,\n              qty_sold: item.qty_sold ? parseFloat(item.qty_sold).toString() : null,\n              mrp: item.mrp ? parseFloat(item.mrp).toString() : null,\n              report_date: reportDate,\n              attachment_path: null\n            };\n          });\n          \n          if (businessUnit === \"jivo-mart\" && periodType === \"daily\") {\n            insertedItems = await storage.createScBlinkitJmDaily(blinkitItemsWithDates as any);\n            tableName = \"SC_Blinkit_JM_Daily\";\n          } else if (businessUnit === \"jivo-mart\" && periodType === \"date-range\") {\n            // For date-range, also add period_start and period_end\n            const blinkitItemsWithPeriod = blinkitItemsWithDates.map(item => {\n              // Parse period dates safely\n              let periodStart = new Date();\n              let periodEnd = new Date();\n              \n              if ((parsedData as any).periodStart) {\n                const parsedPeriodStart = new Date((parsedData as any).periodStart);\n                if (!isNaN(parsedPeriodStart.getTime())) {\n                  periodStart = parsedPeriodStart;\n                }\n              }\n              \n              if ((parsedData as any).periodEnd) {\n                const parsedPeriodEnd = new Date((parsedData as any).periodEnd);\n                if (!isNaN(parsedPeriodEnd.getTime())) {\n                  periodEnd = parsedPeriodEnd;\n                }\n              }\n              \n              return {\n                ...item,\n                period_start: periodStart,\n                period_end: periodEnd\n              };\n            });\n            insertedItems = await storage.createScBlinkitJmRange(blinkitItemsWithPeriod as any);\n            tableName = \"SC_Blinkit_JM_Range\";\n          }\n        } else if (platform === \"swiggy\") {\n          if (businessUnit === \"jivo-mart\" && periodType === \"daily\") {\n            insertedItems = await storage.createScSwiggyJmDaily(parsedData.items as any);\n            tableName = \"SC_Swiggy_JM_Daily\";\n          } else if (businessUnit === \"jivo-mart\" && periodType === \"date-range\") {\n            insertedItems = await storage.createScSwiggyJmRange(parsedData.items as any);\n            tableName = \"SC_Swiggy_JM_Range\";\n          }\n        } else if (platform === \"jiomartsale\") {\n          // Process JioMartSale data with proper date handling\n          const jioMartSaleItemsWithDates = (parsedData as any).items.map((item: any) => {\n            // Parse report date safely\n            let reportDate = new Date();\n            if ((parsedData as any).reportDate) {\n              const parsedReportDate = new Date((parsedData as any).reportDate);\n              if (!isNaN(parsedReportDate.getTime())) {\n                reportDate = parsedReportDate;\n              }\n            }\n\n            // Parse date fields safely\n            const parseJioMartDate = (dateStr: string): Date | null => {\n              if (!dateStr || dateStr.trim() === '') return null;\n              try {\n                const cleanStr = dateStr.replace(/\\s*\\+\\d{4}$/, ''); // Remove timezone\n                const date = new Date(cleanStr);\n                return isNaN(date.getTime()) ? null : date;\n              } catch {\n                return null;\n              }\n            };\n\n            return {\n              ...item,\n              report_date: reportDate,\n              shipment_created_at: parseJioMartDate(item.shipment_created_at),\n              accepted_at: parseJioMartDate(item.accepted_at),\n              acceptance_tat_date_time: parseJioMartDate(item.acceptance_tat_date_time)\n            };\n          });\n\n          if (businessUnit === \"jivo-mart\" && periodType === \"daily\") {\n            insertedItems = await storage.createScJioMartSaleJmDaily(jioMartSaleItemsWithDates as any);\n            tableName = \"SC_JioMartSale_JM_Daily\";\n          } else if (businessUnit === \"jivo-mart\" && periodType === \"date-range\") {\n            // For date-range, also add period fields\n            const jioMartSaleItemsWithPeriod = jioMartSaleItemsWithDates.map(item => {\n              let periodStart = new Date();\n              let periodEnd = new Date();\n              \n              if ((parsedData as any).periodStart) {\n                const parsedPeriodStart = new Date((parsedData as any).periodStart);\n                if (!isNaN(parsedPeriodStart.getTime())) {\n                  periodStart = parsedPeriodStart;\n                }\n              }\n              \n              if ((parsedData as any).periodEnd) {\n                const parsedPeriodEnd = new Date((parsedData as any).periodEnd);\n                if (!isNaN(parsedPeriodEnd.getTime())) {\n                  periodEnd = parsedPeriodEnd;\n                }\n              }\n              \n              return {\n                ...item,\n                period_start: periodStart,\n                period_end: periodEnd\n              };\n            });\n            insertedItems = await storage.createScJioMartSaleJmRange(jioMartSaleItemsWithPeriod as any);\n            tableName = \"SC_JioMartSale_JM_Range\";\n          }\n        } else if (platform === \"jiomartcancel\") {\n          // Process JioMartCancel data with proper date handling\n          const jioMartCancelItemsWithDates = (parsedData as any).items.map((item: any) => {\n            // Parse report date safely\n            let reportDate = new Date();\n            if ((parsedData as any).reportDate) {\n              const parsedReportDate = new Date((parsedData as any).reportDate);\n              if (!isNaN(parsedReportDate.getTime())) {\n                reportDate = parsedReportDate;\n              }\n            }\n\n            return {\n              ...item,\n              report_date: reportDate\n            };\n          });\n\n          if (businessUnit === \"jivo-mart\" && periodType === \"daily\") {\n            insertedItems = await storage.createScJioMartCancelJmDaily(jioMartCancelItemsWithDates as any);\n            tableName = \"SC_JioMartCancel_JM_Daily\";\n          } else if (businessUnit === \"jivo-mart\" && periodType === \"date-range\") {\n            // For date-range, also add period fields\n            const jioMartCancelItemsWithPeriod = jioMartCancelItemsWithDates.map(item => {\n              let periodStart = new Date();\n              let periodEnd = new Date();\n              \n              if ((parsedData as any).periodStart) {\n                const parsedPeriodStart = new Date((parsedData as any).periodStart);\n                if (!isNaN(parsedPeriodStart.getTime())) {\n                  periodStart = parsedPeriodStart;\n                }\n              }\n              \n              if ((parsedData as any).periodEnd) {\n                const parsedPeriodEnd = new Date((parsedData as any).periodEnd);\n                if (!isNaN(parsedPeriodEnd.getTime())) {\n                  periodEnd = parsedPeriodEnd;\n                }\n              }\n              \n              return {\n                ...item,\n                period_start: periodStart,\n                period_end: periodEnd\n              };\n            });\n            insertedItems = await storage.createScJioMartCancelJmRange(jioMartCancelItemsWithPeriod as any);\n            tableName = \"SC_JioMartCancel_JM_Range\";\n          }\n        } else if (platform === \"bigbasket\") {\n          if (businessUnit === \"jivo-mart\" && periodType === \"daily\") {\n            // Add report_date to each BigBasket item\n            const bigBasketItemsWithDates = parsedData.items.map((item: any) => ({\n              ...item,\n              report_date: parsedData.reportDate || new Date()\n            }));\n            insertedItems = await storage.createScBigBasketJmDaily(bigBasketItemsWithDates as any);\n            tableName = \"SC_BigBasket_JM_Daily\";\n          } else if (businessUnit === \"jivo-mart\" && periodType === \"date-range\") {\n            // Add report_date and period fields for date-range\n            const bigBasketItemsWithDates = parsedData.items.map((item: any) => {\n              let periodStart = new Date();\n              let periodEnd = new Date();\n              \n              if ((parsedData as any).periodStart) {\n                const parsedPeriodStart = new Date((parsedData as any).periodStart);\n                if (!isNaN(parsedPeriodStart.getTime())) {\n                  periodStart = parsedPeriodStart;\n                }\n              }\n              \n              if ((parsedData as any).periodEnd) {\n                const parsedPeriodEnd = new Date((parsedData as any).periodEnd);\n                if (!isNaN(parsedPeriodEnd.getTime())) {\n                  periodEnd = parsedPeriodEnd;\n                }\n              }\n              \n              return {\n                ...item,\n                report_date: parsedData.reportDate || new Date(),\n                period_start: periodStart,\n                period_end: periodEnd\n              };\n            });\n            insertedItems = await storage.createScBigBasketJmRange(bigBasketItemsWithDates as any);\n            tableName = \"SC_BigBasket_JM_Range\";\n          }\n        } else if (platform === \"flipkart-grocery\") {\n          // Ensure all data fields are properly formatted for Flipkart\n          const flipkartItemsWithDates = parsedData.data.map((item: any) => {\n            return {\n              tenant_id: item.tenantId,\n              retailer_name: item.retailerName,\n              retailer_code: item.retailerCode,\n              fsn: item.fsn,\n              product_name: item.productName,\n              category: item.category,\n              sub_category: item.subCategory,\n              brand: item.brand,\n              mrp: item.mrp ? parseFloat(item.mrp) : null,\n              selling_price: item.sellingPrice ? parseFloat(item.sellingPrice) : null,\n              total_sales_qty: item.totalSalesQty ? parseInt(item.totalSalesQty) : null,\n              total_sales_value: item.totalSalesValue ? parseFloat(item.totalSalesValue) : null,\n              sales_data: JSON.stringify(item.salesData || {}),\n              period_start: parsedData.periodStart ? new Date(parsedData.periodStart) : null,\n              period_end: parsedData.periodEnd ? new Date(parsedData.periodEnd) : null,\n              report_date: parsedData.reportDate ? new Date(parsedData.reportDate) : new Date(),\n              period_type: periodType,\n              business_unit: businessUnit,\n              file_hash: fileHash,\n              uploaded_at: new Date(),\n              attachment_path: attachmentPath\n            };\n          });\n          \n          // Insert data into Flipkart tables based on business unit\n          if (flipkartItemsWithDates && flipkartItemsWithDates.length > 0) {\n            const { scFlipkartJm2Month, scFlipkartChirag2Month } = await import(\"@shared/schema\");\n            const flipkartTable = businessUnit === \"chirag\" ? scFlipkartChirag2Month : scFlipkartJm2Month;\n            insertedItems = await db.insert(flipkartTable).values(flipkartItemsWithDates).returning();\n            tableName = businessUnit === \"chirag\" ? \"SC_FlipKart_CHIRAG_2Month\" : \"SC_FlipKart_JM_2Month\";\n          }\n        }\n\n        if (!insertedItems) {\n          return res.status(400).json({ error: \"Invalid platform, business unit and period type combination\" });\n        }\n\n        res.status(201).json({\n          success: true,\n          platform: parsedData.platform,\n          businessUnit: parsedData.businessUnit,\n          periodType: parsedData.periodType,\n          tableName,\n          totalItems: insertedItems.length,\n          summary: parsedData.summary,\n          reportDate: parsedData.reportDate,\n          periodStart: parsedData.periodStart,\n          periodEnd: parsedData.periodEnd\n        });\n\n      } catch (parseError: any) {\n        console.error(\"Parse error:\", parseError);\n        return res.status(400).json({ \n          error: \"Failed to parse file\", \n          details: parseError.message \n        });\n      }\n\n    } catch (error: any) {\n      console.error(\"Error importing secondary sales:\", error);\n      if (error.message && error.message.includes(\"unique\")) {\n        res.status(409).json({ error: \"Secondary sales data already exists\" });\n      } else {\n        res.status(500).json({ error: \"Failed to import secondary sales data\" });\n      }\n    }\n  });\n\n  app.put(\"/api/secondary-sales/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { header, items } = req.body;\n      \n      const updatedSale = await storage.updateSecondarySales(id, header, items);\n      res.json(updatedSale);\n    } catch (error) {\n      console.error(\"Error updating secondary sales:\", error);\n      res.status(500).json({ error: \"Failed to update secondary sales\" });\n    }\n  });\n\n  app.delete(\"/api/secondary-sales/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteSecondarySales(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting secondary sales:\", error);\n      res.status(500).json({ error: \"Failed to delete secondary sales\" });\n    }\n  });\n\n  // Inventory Management Routes\n  app.get(\"/api/inventory\", async (req, res) => {\n    try {\n      const { platform, businessUnit } = req.query;\n      const inventory = await storage.getAllInventory(\n        platform as string, \n        businessUnit as string\n      );\n      res.json(inventory);\n    } catch (error) {\n      console.error(\"Error fetching inventory:\", error);\n      res.status(500).json({ error: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.get(\"/api/inventory/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const inventoryItem = await storage.getInventoryById(id);\n      \n      if (!inventoryItem) {\n        return res.status(404).json({ error: \"Inventory record not found\" });\n      }\n      \n      res.json(inventoryItem);\n    } catch (error) {\n      console.error(\"Error fetching inventory:\", error);\n      res.status(500).json({ error: \"Failed to fetch inventory\" });\n    }\n  });\n\n  // Inventory Preview Route\n  app.post(\"/api/inventory/preview\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const { platform, businessUnit, periodType, reportDate, periodStart, periodEnd, fileHash } = req.body;\n      \n      console.log(\"DEBUG: Inventory preview request for platform:\", platform);\n      console.log(\"DEBUG: Full request body:\", req.body);\n      \n      if (!platform || !businessUnit || !periodType) {\n        return res.status(400).json({ error: \"Platform, business unit, and period type are required\" });\n      }\n\n      if (![\"jiomart\", \"blinkit\", \"amazon\", \"swiggy\", \"flipkart\", \"zepto\", \"bigbasket\"].includes(platform)) {\n        console.log(\"DEBUG: Platform not supported:\", platform, \"- supported platforms:\", [\"jiomart\", \"blinkit\", \"amazon\", \"swiggy\", \"flipkart\", \"zepto\", \"bigbasket\"]);\n        return res.status(400).json({ error: \"Currently only Jio Mart, Blinkit, Amazon, Swiggy, FlipKart, Zepto, and BigBasket inventory are supported\" });\n      }\n\n      if (platform === \"amazon\") {\n        if (![\"jm\", \"jw\"].includes(businessUnit)) {\n          return res.status(400).json({ error: \"Business unit must be jm (Jivo Mart) or jw (Jivo Wellness) for Amazon\" });\n        }\n      } else {\n        if (businessUnit !== \"jm\") {\n          return res.status(400).json({ error: \"Business unit must be jm (Jivo Mart)\" });\n        }\n      }\n\n      if (![\"daily\", \"range\"].includes(periodType)) {\n        return res.status(400).json({ error: \"Period type must be either daily or range\" });\n      }\n\n      // Preview should always be allowed - no duplicate checking for preview\n\n      // Store the file for attachment\n      const attachmentPath = `uploads/${Date.now()}_${req.file.originalname}`;\n\n      let parsedData;\n\n      try {\n        if (platform === \"jiomart\") {\n          parsedData = await parseJioMartInventoryCsv(\n            req.file.buffer.toString('utf8'),\n            businessUnit,\n            periodType,\n            reportDate,\n            periodStart,\n            periodEnd\n          );\n          \n          // Add attachment path to all items\n          const itemsWithAttachment = parsedData.items.map(item => ({\n            ...item,\n            attachment_path: attachmentPath\n          }));\n          \n          parsedData = {\n            ...parsedData,\n            items: itemsWithAttachment\n          };\n        } else if (platform === \"blinkit\") {\n          parsedData = await parseBlinkitInventoryCsv(\n            req.file.buffer.toString('utf8'),\n            businessUnit,\n            periodType,\n            reportDate ? new Date(reportDate) : new Date(),\n            periodStart ? new Date(periodStart + 'T00:00:00.000Z') : null,\n            periodEnd ? new Date(periodEnd + 'T23:59:59.999Z') : null\n          );\n          \n          // Add attachment path to all items\n          const itemsWithAttachment = parsedData.items.map(item => ({\n            ...item,\n            attachment_path: attachmentPath\n          }));\n          \n          parsedData = {\n            ...parsedData,\n            items: itemsWithAttachment\n          };\n        } else if (platform === \"amazon\") {\n          parsedData = await parseAmazonInventoryFile(\n            req.file.buffer,\n            req.file.originalname,\n            businessUnit,\n            periodType,\n            reportDate ? new Date(reportDate) : new Date(),\n            periodStart ? new Date(periodStart + 'T00:00:00.000Z') : null,\n            periodEnd ? new Date(periodEnd + 'T23:59:59.999Z') : null\n          );\n          \n          // Add attachment path to all items\n          const itemsWithAttachment = parsedData.items.map(item => ({\n            ...item,\n            attachment_path: attachmentPath\n          }));\n          \n          parsedData = {\n            ...parsedData,\n            items: itemsWithAttachment\n          };\n        } else if (platform === \"swiggy\") {\n          console.log(\"Processing Swiggy inventory preview...\");\n          const { parseSwiggyInventoryCsv } = await import(\"./swiggy-inventory-parser\");\n          parsedData = parseSwiggyInventoryCsv(\n            req.file.buffer.toString('utf8'),\n            businessUnit,\n            periodType,\n            reportDate ? new Date(reportDate) : undefined,\n            periodStart ? new Date(periodStart + 'T00:00:00.000Z') : undefined,\n            periodEnd ? new Date(periodEnd + 'T23:59:59.999Z') : undefined\n          );\n          \n          // Add attachment path to all items\n          const itemsWithAttachment = parsedData.items.map(item => ({\n            ...item,\n            attachment_path: attachmentPath\n          }));\n          \n          parsedData = {\n            ...parsedData,\n            items: itemsWithAttachment\n          };\n        } else if (platform === \"flipkart\") {\n          console.log(\"Processing FlipKart inventory preview...\");\n          const flipkartItems = parseFlipkartInventoryCSV(\n            req.file.buffer.toString('utf8'),\n            attachmentPath,\n            reportDate ? new Date(reportDate) : new Date()\n          );\n\n          parsedData = {\n            platform: \"FlipKart\",\n            businessUnit: businessUnit.toUpperCase(),\n            periodType: periodType,\n            reportDate: reportDate ? new Date(reportDate) : new Date(),\n            totalItems: flipkartItems.length,\n            items: flipkartItems,\n            summary: {\n              totalWarehouses: [...new Set(flipkartItems.map(item => item.warehouseId).filter(Boolean))].length,\n              totalBrands: [...new Set(flipkartItems.map(item => item.brand).filter(Boolean))].length,\n              totalLiveProducts: flipkartItems.filter(item => item.liveOnWebsite && item.liveOnWebsite > 0).length,\n              totalSalesValue: flipkartItems.reduce((sum, item) => sum + (parseFloat(item.flipkartSellingPrice?.toString() || '0') * (item.sales30D || 0)), 0)\n            }\n          };\n          \n          console.log(`Successfully parsed ${flipkartItems.length} FlipKart inventory records`);\n        } else if (platform === \"zepto\") {\n          console.log(\"Processing Zepto inventory preview...\");\n          const zeptoResult = parseZeptoInventory(\n            req.file.buffer.toString('utf8'),\n            reportDate ? new Date(reportDate) : new Date(),\n            periodStart,\n            periodEnd\n          );\n\n          parsedData = {\n            platform: \"Zepto\",\n            businessUnit: businessUnit.toUpperCase(),\n            periodType: periodType,\n            reportDate: reportDate ? new Date(reportDate) : new Date(),\n            totalItems: zeptoResult.summary.totalRecords,\n            items: periodType === \"daily\" ? zeptoResult.dailyData : zeptoResult.rangeData,\n            summary: {\n              totalRecords: zeptoResult.summary.totalRecords,\n              totalUnits: zeptoResult.summary.totalUnits,\n              uniqueCities: zeptoResult.summary.uniqueCities,\n              uniqueSKUs: zeptoResult.summary.uniqueSKUs\n            }\n          };\n          \n          console.log(`Successfully parsed ${zeptoResult.summary.totalRecords} Zepto inventory records`);\n        } else if (platform === \"bigbasket\") {\n          console.log(\"Processing BigBasket inventory preview...\");\n          const { parseBigBasketInventoryCsv } = await import('./bigbasket-inventory-parser');\n          const bigbasketItems = parseBigBasketInventoryCsv(req.file.buffer.toString('utf8'));\n\n          const summary = {\n            totalProducts: bigbasketItems.length,\n            totalSOH: bigbasketItems.reduce((sum, item) => sum + item.soh, 0),\n            totalSOHValue: bigbasketItems.reduce((sum, item) => sum + item.soh_value, 0),\n            uniqueCities: new Set(bigbasketItems.map(item => item.city)).size,\n            uniqueBrands: new Set(bigbasketItems.map(item => item.brand_name)).size\n          };\n\n          parsedData = {\n            platform: \"BigBasket\",\n            businessUnit: businessUnit.toUpperCase(),\n            periodType: periodType,\n            reportDate: reportDate ? new Date(reportDate) : new Date(),\n            totalItems: bigbasketItems.length,\n            items: bigbasketItems.map(item => ({ ...item, attachment_path: attachmentPath })),\n            summary\n          };\n\n          console.log(`Successfully parsed ${bigbasketItems.length} BigBasket inventory records`);\n        }\n\n        if (!parsedData) {\n          return res.status(400).json({ error: \"Unsupported platform\" });\n        }\n\n        if (!parsedData.items || parsedData.items.length === 0) {\n          return res.status(400).json({ error: \"No valid inventory data found in file\" });\n        }\n\n        res.json(parsedData);\n\n      } catch (parseError: any) {\n        console.error(\"Parse error:\", parseError);\n        return res.status(400).json({ \n          error: \"Failed to parse inventory file\", \n          details: parseError.message \n        });\n      }\n\n    } catch (error: any) {\n      console.error(\"Error previewing inventory:\", error);\n      res.status(500).json({ error: \"Failed to preview inventory data\" });\n    }\n  });\n\n  // Inventory File Import Route\n  app.post(\"/api/inventory/import\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const { platform, businessUnit, periodType, startDate, endDate, fileHash } = req.body;\n\n      if (!platform || !businessUnit || !periodType) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      if (![\"daily\", \"range\"].includes(periodType)) {\n        return res.status(400).json({ error: \"Period type must be either daily or range\" });\n      }\n\n      // Check for duplicate file if hash is provided\n      if (fileHash) {\n        const isDuplicate = await checkForDuplicateInventoryFile(fileHash, platform, businessUnit, periodType);\n        if (isDuplicate) {\n          return res.status(409).json({ \n            error: \"Duplicate Import Detected\", \n            message: `This exact file has already been imported for ${platform.charAt(0).toUpperCase() + platform.slice(1)} ${businessUnit.toUpperCase()} ${periodType} inventory. The data is already in your database. You can preview the file or upload a different file.`,\n            details: {\n              platform: platform.charAt(0).toUpperCase() + platform.slice(1),\n              businessUnit: businessUnit.toUpperCase(),\n              periodType: periodType.charAt(0).toUpperCase() + periodType.slice(1),\n              fileHash: fileHash.substring(0, 8) + \"...\",\n              uploadType: \"Inventory Import\",\n              suggestion: \"Try uploading a different file or switch to a different period type\"\n            }\n          });\n        }\n      }\n\n      // Store the file for attachment\n      const attachmentPath = `uploads/${Date.now()}_${req.file.originalname}`;\n\n      let parsedData;\n      const reportDate = new Date();\n      // Fix timezone issue: Create dates without timezone conversion\n      const periodStart = startDate ? createDateFromYMDString(startDate) : null;\n      const periodEnd = endDate ? createEndDateFromYMDString(endDate) : null;\n\n      try {\n        if (platform === \"jiomart\") {\n          parsedData = await parseJioMartInventoryCsv(\n            req.file.buffer.toString('utf8'),\n            businessUnit,\n            periodType,\n            reportDate,\n            periodStart,\n            periodEnd\n          );\n        } else if (platform === \"blinkit\") {\n          parsedData = await parseBlinkitInventoryCsv(\n            req.file.buffer.toString('utf8'),\n            businessUnit,\n            periodType,\n            reportDate,\n            periodStart,\n            periodEnd\n          );\n        } else if (platform === \"amazon\") {\n          parsedData = await parseAmazonInventoryFile(\n            req.file.buffer,\n            req.file.originalname,\n            businessUnit,\n            periodType,\n            reportDate,\n            periodStart,\n            periodEnd\n          );\n        } else if (platform === \"swiggy\") {\n          console.log(\"Processing Swiggy inventory file...\");\n          const { parseSwiggyInventoryCsv } = await import(\"./swiggy-inventory-parser\");\n          parsedData = parseSwiggyInventoryCsv(\n            req.file.buffer.toString('utf8'),\n            businessUnit,\n            periodType,\n            reportDate,\n            periodStart,\n            periodEnd\n          );\n          console.log(\"Swiggy parsing completed, data:\", parsedData ? 'Success' : 'Failed');\n        } else if (platform === \"flipkart\") {\n          console.log(\"Processing FlipKart inventory file...\");\n          const flipkartItems = parseFlipkartInventoryCSV(\n            req.file.buffer.toString('utf8'),\n            attachmentPath,\n            reportDate\n          );\n\n          parsedData = {\n            platform: \"FlipKart\",\n            businessUnit: businessUnit.toUpperCase(),\n            periodType: periodType,\n            reportDate: reportDate,\n            totalItems: flipkartItems.length,\n            items: flipkartItems\n          };\n          console.log(\"FlipKart parsing completed, data:\", parsedData ? 'Success' : 'Failed');\n        } else if (platform === \"zepto\") {\n          console.log(\"Processing Zepto inventory file...\");\n          const zeptoResult = parseZeptoInventory(\n            req.file.buffer.toString('utf8'),\n            reportDate,\n            periodStart || undefined,\n            periodEnd || undefined\n          );\n\n          parsedData = {\n            platform: \"Zepto\", \n            businessUnit: businessUnit.toUpperCase(),\n            periodType: periodType,\n            reportDate: reportDate,\n            totalItems: zeptoResult.summary.totalRecords,\n            items: periodType === \"daily\" ? zeptoResult.dailyData : zeptoResult.rangeData\n          };\n          console.log(\"Zepto parsing completed, data:\", parsedData ? 'Success' : 'Failed');\n        } else if (platform === \"bigbasket\") {\n          console.log(\"Processing BigBasket inventory file...\");\n          const { parseBigBasketInventoryCsv } = await import('./bigbasket-inventory-parser');\n          const bigbasketItems = parseBigBasketInventoryCsv(req.file.buffer.toString('utf8'));\n\n          const summary = {\n            totalProducts: bigbasketItems.length,\n            totalSOH: bigbasketItems.reduce((sum, item) => sum + item.soh, 0),\n            totalSOHValue: bigbasketItems.reduce((sum, item) => sum + item.soh_value, 0),\n            uniqueCities: new Set(bigbasketItems.map(item => item.city)).size,\n            uniqueBrands: new Set(bigbasketItems.map(item => item.brand_name)).size\n          };\n\n          parsedData = {\n            platform: \"BigBasket\", \n            businessUnit: businessUnit.toUpperCase(),\n            periodType: periodType,\n            reportDate: reportDate,\n            totalItems: bigbasketItems.length,\n            items: bigbasketItems,\n            summary\n          };\n          console.log(\"BigBasket parsing completed, data:\", parsedData ? 'Success' : 'Failed');\n        }\n\n        if (!parsedData) {\n          return res.status(400).json({ error: \"Unsupported platform\" });\n        }\n\n        if (!parsedData.items || parsedData.items.length === 0) {\n          return res.status(400).json({ error: \"No valid inventory data found in file\" });\n        }\n\n        let insertedItems;\n        let tableName;\n\n        // Process inventory data with proper date handling\n        const inventoryItemsWithDates = parsedData.items.map((item: any) => {\n          // Parse last_updated_at date safely\n          let lastUpdatedAt = null;\n          if (item.last_updated_at) {\n            const parsedDate = new Date(item.last_updated_at);\n            if (!isNaN(parsedDate.getTime())) {\n              lastUpdatedAt = parsedDate;\n            }\n          }\n\n          return {\n            ...item,\n            last_updated_at: lastUpdatedAt,\n            report_date: periodType === \"daily\" ? reportDate : undefined,\n            period_start: periodStart,\n            period_end: periodEnd,\n            attachment_path: attachmentPath\n          };\n        });\n\n        if (platform === \"jiomart\" && businessUnit === \"jm\" && periodType === \"daily\") {\n          insertedItems = await storage.createInventoryJioMartJmDaily(inventoryItemsWithDates as any);\n          tableName = \"INV_JioMart_JM_Daily\";\n        } else if (platform === \"jiomart\" && businessUnit === \"jm\" && periodType === \"range\") {\n          insertedItems = await storage.createInventoryJioMartJmRange(inventoryItemsWithDates as any);\n          tableName = \"INV_JioMart_JM_Range\";\n        } else if (platform === \"blinkit\" && businessUnit === \"jm\" && periodType === \"daily\") {\n          insertedItems = await storage.createInventoryBlinkitJmDaily(inventoryItemsWithDates as any);\n          tableName = \"INV_Blinkit_JM_Daily\";\n        } else if (platform === \"blinkit\" && businessUnit === \"jm\" && periodType === \"range\") {\n          insertedItems = await storage.createInventoryBlinkitJmRange(inventoryItemsWithDates as any);\n          tableName = \"INV_Blinkit_JM_Range\";\n        } else if (platform === \"amazon\" && businessUnit === \"jm\" && periodType === \"daily\") {\n          insertedItems = await storage.createInventoryAmazonJmDaily(inventoryItemsWithDates as any);\n          tableName = \"INV_Amazon_JM_Daily\";\n        } else if (platform === \"amazon\" && businessUnit === \"jm\" && periodType === \"range\") {\n          insertedItems = await storage.createInventoryAmazonJmRange(inventoryItemsWithDates as any);\n          tableName = \"INV_Amazon_JM_Range\";\n        } else if (platform === \"amazon\" && businessUnit === \"jw\" && periodType === \"daily\") {\n          insertedItems = await storage.createInventoryAmazonJwDaily(inventoryItemsWithDates as any);\n          tableName = \"INV_Amazon_JW_Daily\";\n        } else if (platform === \"amazon\" && businessUnit === \"jw\" && periodType === \"range\") {\n          insertedItems = await storage.createInventoryAmazonJwRange(inventoryItemsWithDates as any);\n          tableName = \"INV_Amazon_JW_Range\";\n        } else if (platform === \"swiggy\" && businessUnit === \"jm\" && periodType === \"daily\") {\n          insertedItems = await storage.createInventorySwiggyJmDaily(inventoryItemsWithDates as any);\n          tableName = \"INV_Swiggy_JM_Daily\";\n        } else if (platform === \"swiggy\" && businessUnit === \"jm\" && periodType === \"range\") {\n          insertedItems = await storage.createInventorySwiggyJmRange(inventoryItemsWithDates as any);\n          tableName = \"INV_Swiggy_JM_Range\";\n        } else if (platform === \"flipkart\" && businessUnit === \"jm\" && periodType === \"daily\") {\n          insertedItems = await storage.createInventoryFlipkartJmDaily(inventoryItemsWithDates as any);\n          tableName = \"INV_FlipKart_JM_Daily\";\n        } else if (platform === \"flipkart\" && businessUnit === \"jm\" && periodType === \"range\") {\n          insertedItems = await storage.createInventoryFlipkartJmRange(inventoryItemsWithDates as any);\n          tableName = \"INV_FlipKart_JM_Range\";\n        } else if (platform === \"zepto\" && businessUnit === \"jm\" && periodType === \"daily\") {\n          insertedItems = await storage.createInventoryZeptoJmDaily(inventoryItemsWithDates as any);\n          tableName = \"INV_Zepto_JM_Daily\";\n        } else if (platform === \"zepto\" && businessUnit === \"jm\" && periodType === \"range\") {\n          insertedItems = await storage.createInventoryZeptoJmRange(inventoryItemsWithDates as any);\n          tableName = \"INV_Zepto_JM_Range\";\n        } else if (platform === \"bigbasket\" && businessUnit === \"jm\" && periodType === \"daily\") {\n          insertedItems = await storage.createInventoryBigBasketJmDaily(inventoryItemsWithDates as any);\n          tableName = \"INV_BigBasket_JM_Daily\";\n        } else if (platform === \"bigbasket\" && businessUnit === \"jm\" && periodType === \"range\") {\n          insertedItems = await storage.createInventoryBigBasketJmRange(inventoryItemsWithDates as any);\n          tableName = \"INV_BigBasket_JM_Range\";\n        }\n\n        if (!insertedItems) {\n          return res.status(400).json({ error: \"Invalid business unit and period type combination\" });\n        }\n\n        // Track successful file upload if hash is provided\n        if (fileHash) {\n          await trackFileUpload(\n            fileHash, \n            req.file.originalname, \n            platform, \n            businessUnit, \n            periodType, \n            'inventory', \n            req.file.size\n          );\n        }\n\n        res.status(201).json({\n          success: true,\n          platform,\n          businessUnit,\n          periodType,\n          targetTable: tableName,\n          importedCount: insertedItems.length,\n          summary: parsedData.summary,\n          reportDate: reportDate.toISOString(),\n          periodStart: periodStart?.toISOString(),\n          periodEnd: periodEnd?.toISOString()\n        });\n\n      } catch (parseError: any) {\n        console.error(\"Parse error:\", parseError);\n        return res.status(400).json({ \n          error: \"Failed to process inventory data\", \n          details: parseError.message \n        });\n      }\n\n    } catch (error: any) {\n      console.error(\"Error importing inventory:\", error);\n      if (error.message && error.message.includes(\"unique\")) {\n        res.status(409).json({ error: \"Duplicate inventory data detected\" });\n      } else {\n        res.status(500).json({ error: \"Failed to import inventory data\" });\n      }\n    }\n  });\n\n  // Legacy Inventory Import Route (for data object)\n  app.post(\"/api/inventory/import/:platform\", async (req, res) => {\n    try {\n      const { platform } = req.params;\n      const { data, attachment_path } = req.body;\n\n      if (!data || !data.items || data.items.length === 0) {\n        return res.status(400).json({ error: \"No data to import\" });\n      }\n\n      if (platform !== \"jiomart\") {\n        return res.status(400).json({ error: \"Currently only Jio Mart inventory is supported\" });\n      }\n\n      let insertedItems;\n      let tableName;\n\n      try {\n        // Process inventory data with proper date handling\n        const inventoryItemsWithDates = data.items.map((item: any) => {\n          // Parse last_updated_at date safely\n          let lastUpdatedAt = null;\n          if (item.last_updated_at) {\n            const parsedDate = new Date(item.last_updated_at);\n            if (!isNaN(parsedDate.getTime())) {\n              lastUpdatedAt = parsedDate;\n            }\n          }\n\n          // Parse report date for daily, period dates for range\n          let reportDate = new Date();\n          let periodStart = null;\n          let periodEnd = null;\n\n          if (data.periodType === \"daily\" && data.reportDate) {\n            const parsedReportDate = new Date(data.reportDate);\n            if (!isNaN(parsedReportDate.getTime())) {\n              reportDate = parsedReportDate;\n            }\n          } else if (data.periodType === \"range\") {\n            if (data.periodStart) {\n              const parsedPeriodStart = new Date(data.periodStart);\n              if (!isNaN(parsedPeriodStart.getTime())) {\n                periodStart = parsedPeriodStart;\n              }\n            }\n            if (data.periodEnd) {\n              const parsedPeriodEnd = new Date(data.periodEnd);\n              if (!isNaN(parsedPeriodEnd.getTime())) {\n                periodEnd = parsedPeriodEnd;\n              }\n            }\n          }\n\n          return {\n            ...item,\n            last_updated_at: lastUpdatedAt,\n            report_date: data.periodType === \"daily\" ? reportDate : undefined,\n            period_start: periodStart,\n            period_end: periodEnd,\n            attachment_path: attachment_path || item.attachment_path\n          };\n        });\n\n        if (data.businessUnit === \"jm\" && data.periodType === \"daily\") {\n          insertedItems = await storage.createInventoryJioMartJmDaily(inventoryItemsWithDates as any);\n          tableName = \"INV_JioMart_JM_Daily\";\n        } else if (data.businessUnit === \"jm\" && data.periodType === \"range\") {\n          insertedItems = await storage.createInventoryJioMartJmRange(inventoryItemsWithDates as any);\n          tableName = \"INV_JioMart_JM_Range\";\n        }\n\n        if (!insertedItems) {\n          return res.status(400).json({ error: \"Invalid business unit and period type combination\" });\n        }\n\n        res.status(201).json({\n          success: true,\n          platform: data.platform,\n          businessUnit: data.businessUnit,\n          periodType: data.periodType,\n          tableName,\n          totalItems: insertedItems.length,\n          summary: data.summary,\n          reportDate: data.reportDate,\n          periodStart: data.periodStart,\n          periodEnd: data.periodEnd\n        });\n\n      } catch (parseError: any) {\n        console.error(\"Parse error:\", parseError);\n        return res.status(400).json({ \n          error: \"Failed to process inventory data\", \n          details: parseError.message \n        });\n      }\n\n    } catch (error: any) {\n      console.error(\"Error importing inventory:\", error);\n      if (error.message && error.message.includes(\"unique\")) {\n        res.status(409).json({ error: \"Duplicate inventory data detected\" });\n      } else {\n        res.status(500).json({ error: \"Failed to import inventory data\" });\n      }\n    }\n  });\n\n  app.put(\"/api/inventory/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { header, items } = req.body;\n      \n      const updatedInventory = await storage.updateInventory(id, header, items);\n      res.json(updatedInventory);\n    } catch (error) {\n      console.error(\"Error updating inventory:\", error);\n      res.status(500).json({ error: \"Failed to update inventory\" });\n    }\n  });\n\n  app.delete(\"/api/inventory/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteInventory(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting inventory:\", error);\n      res.status(500).json({ error: \"Failed to delete inventory\" });\n    }\n  });\n\n  // Object Storage routes\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const { ObjectStorageService } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const { ObjectStorageService, ObjectNotFoundError } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof (await import(\"./objectStorage\")).ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // SQL Query endpoints\n  app.get('/api/sql-query/tables', async (req, res) => {\n    try {\n      const result = await db.execute(sql`\n        SELECT table_name \n        FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_type = 'BASE TABLE'\n        ORDER BY table_name;\n      `);\n      \n      const tables = result.rows.map((row: any) => row.table_name);\n      res.json(tables);\n    } catch (error) {\n      console.error('Error fetching tables:', error);\n      res.status(500).json({ error: 'Failed to fetch database tables' });\n    }\n  });\n\n  app.post('/api/sql-query/execute', async (req, res) => {\n    try {\n      const { query } = req.body;\n\n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ error: 'Query is required and must be a string' });\n      }\n\n      // Security: Only allow SELECT statements\n      const trimmedQuery = query.trim().toLowerCase();\n      if (!trimmedQuery.startsWith('select')) {\n        return res.status(400).json({ \n          error: 'Only SELECT statements are allowed for security reasons' \n        });\n      }\n\n      // Prevent dangerous keywords\n      const dangerousKeywords = ['drop', 'delete', 'update', 'insert', 'alter', 'create', 'truncate'];\n      for (const keyword of dangerousKeywords) {\n        if (trimmedQuery.includes(keyword)) {\n          return res.status(400).json({ \n            error: `Query contains forbidden keyword: ${keyword.toUpperCase()}` \n          });\n        }\n      }\n\n      const startTime = performance.now();\n      const result = await db.execute(sql.raw(query));\n      const executionTime = Math.round(performance.now() - startTime);\n\n      // Format results for frontend consumption\n      const columns = result.fields ? result.fields.map(field => field.name) : [];\n      const rows = result.rows.map(row => \n        columns.map(col => row[col] ?? null)\n      );\n\n      res.json({\n        columns,\n        rows,\n        rowCount: result.rows.length,\n        executionTime\n      });\n\n    } catch (error: any) {\n      console.error('SQL Query execution error:', error);\n      res.status(400).json({ \n        error: error.message || 'Query execution failed' \n      });\n    }\n  });\n\n  // Claude Code API endpoints\n  app.post('/api/claude-code/query', async (req, res) => {\n    try {\n      const { claudeCodeWrapper } = await import('./claude-code-wrapper');\n      const { prompt, workingDirectory, timeout, allowedTools, model } = req.body;\n\n      if (!prompt || typeof prompt !== 'string') {\n        return res.status(400).json({ error: 'Prompt is required and must be a string' });\n      }\n\n      const result = await claudeCodeWrapper.executeQuery(prompt, {\n        workingDirectory,\n        timeout: timeout || 30000,\n        allowedTools,\n        model\n      });\n\n      res.json(result);\n    } catch (error: any) {\n      console.error('Claude Code query error:', error);\n      res.status(500).json({ \n        error: 'Failed to execute Claude Code query',\n        details: error.message \n      });\n    }\n  });\n\n  app.get('/api/claude-code/status', async (req, res) => {\n    try {\n      const { claudeCodeWrapper } = await import('./claude-code-wrapper');\n      const status = await claudeCodeWrapper.getAuthStatus();\n      res.json({ status });\n    } catch (error: any) {\n      console.error('Claude Code status error:', error);\n      res.status(500).json({ \n        error: 'Failed to check Claude Code status',\n        details: error.message \n      });\n    }\n  });\n\n  app.get('/api/claude-code/setup', async (req, res) => {\n    try {\n      const { claudeCodeWrapper } = await import('./claude-code-wrapper');\n      const instructions = claudeCodeWrapper.getSetupInstructions();\n      res.json({ instructions });\n    } catch (error: any) {\n      console.error('Claude Code setup error:', error);\n      res.status(500).json({ \n        error: 'Failed to get setup instructions',\n        details: error.message \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  \n\n  \n  return httpServer;\n}\n","size_bytes":132965},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type UpdateUser,\n  type PfMst,\n  type InsertPfMst,\n  type SapItemMst,\n  type InsertSapItemMst,\n  type SapItemMstApi,\n  type InsertSapItemMstApi,\n  type PfItemMst,\n  type InsertPfItemMst,\n  type PfPo,\n  type InsertPfPo,\n  type PfOrderItems,\n  type InsertPfOrderItems,\n  type FlipkartGroceryPoHeader,\n  type InsertFlipkartGroceryPoHeader,\n  type FlipkartGroceryPoLines,\n  type InsertFlipkartGroceryPoLines,\n  type ZeptoPoHeader,\n  type InsertZeptoPoHeader,\n  type ZeptoPoLines,\n  type InsertZeptoPoLines,\n  type CityMallPoHeader,\n  type InsertCityMallPoHeader,\n  type CityMallPoLines,\n  type InsertCityMallPoLines,\n  type BlinkitPoHeader,\n  type InsertBlinkitPoHeader,\n  type BlinkitPoLines,\n  type InsertBlinkitPoLines,\n  type SwiggyPo,\n  type SwiggyPoLine,\n  type InsertSwiggyPo,\n  type InsertSwiggyPoLine,\n  type BigbasketPoHeader,\n  type BigbasketPoLines,\n  type InsertBigbasketPoHeader,\n  type InsertBigbasketPoLines,\n  type ZomatoPoHeader,\n  type ZomatoPoItems,\n  type InsertZomatoPoHeader,\n  type InsertZomatoPoItems,\n  type DealsharePoHeader,\n  type DealsharePoItems,\n  type InsertDealsharePoHeader,\n  type InsertDealsharePoItems,\n  type SecondarySalesHeader,\n  type SecondarySalesItems,\n  type InsertSecondarySalesHeader,\n  type InsertSecondarySalesItems,\n  type ScAmJwDaily,\n  type InsertScAmJwDaily,\n  type ScAmJwRange,\n  type InsertScAmJwRange,\n  type ScAmJmDaily,\n  type InsertScAmJmDaily,\n  type ScAmJmRange,\n  type InsertScAmJmRange,\n  type ZeptoSecondarySalesItem,\n  type InsertZeptoSecondarySalesItem,\n  type BlinkitSecondarySalesItem,\n  type InsertBlinkitSecondarySalesItem,\n  type SwiggySecondarySalesItem,\n  type InsertSwiggySecondarySalesItem,\n  type JioMartSaleSecondarySalesItem,\n  type InsertJioMartSaleSecondarySalesItem,\n  type JioMartCancelSecondarySalesItem,\n  type InsertJioMartCancelSecondarySalesItem,\n  type BigBasketSecondarySalesItem,\n  type InsertBigBasketSecondarySalesItem,\n\n  type JioMartInventoryItem,\n  type InsertJioMartInventoryItem,\n  type JioMartInventoryRangeItem,\n  type InsertJioMartInventoryRangeItem,\n  type BlinkitInventoryItem,\n  type InsertBlinkitInventoryItem,\n  type SwiggyInventoryItem,\n  type InsertSwiggyInventoryItem,\n  type FlipkartInventoryDaily,\n  type InsertFlipkartInventoryDaily,\n  type FlipkartInventoryRange,\n  type InsertFlipkartInventoryRange,\n  type ZeptoInventoryDaily,\n  type InsertZeptoInventoryDaily,\n  type ZeptoInventoryRange,\n  type InsertZeptoInventoryRange,\n  type BigBasketInventoryDaily,\n  type InsertBigBasketInventoryDaily,\n  type BigBasketInventoryRange,\n  type InsertBigBasketInventoryRange,\n\n  type DistributorMst,\n  type InsertDistributorMst,\n  type DistributorPo,\n  type InsertDistributorPo,\n  type DistributorOrderItems,\n  type InsertDistributorOrderItems,\n  users,\n  pfMst,\n  sapItemMst,\n  sapItemMstApi,\n  pfItemMst,\n  pfPo,\n  pfOrderItems,\n  flipkartGroceryPoHeader,\n  flipkartGroceryPoLines,\n  zeptoPoHeader,\n  zeptoPoLines,\n  cityMallPoHeader,\n  cityMallPoLines,\n  blinkitPoHeader,\n  blinkitPoLines,\n  swiggyPos,\n  swiggyPoLines,\n  bigbasketPoHeader,\n  bigbasketPoLines,\n  zomatoPoHeader,\n  zomatoPoItems,\n  dealsharePoHeader,\n  dealsharePoItems,\n  secondarySalesHeader,\n  secondarySalesItems,\n  scAmJwDaily,\n  scAmJwRange,\n  scAmJmDaily,\n  scAmJmRange,\n  scZeptoJmDaily,\n  scZeptoJmRange,\n  scBlinkitJmDaily,\n  scBlinkitJmRange,\n  scSwiggyJmDaily,\n  scSwiggyJmRange,\n  scJioMartSaleJmDaily,\n  scJioMartSaleJmRange,\n  scJioMartCancelJmDaily,\n  scJioMartCancelJmRange,\n  scBigBasketJmDaily,\n  scBigBasketJmRange,\n\n  invJioMartJmDaily,\n  invJioMartJmRange,\n  invBlinkitJmDaily,\n  invBlinkitJmRange,\n  invAmazonJmDaily,\n  invAmazonJmRange,\n  invAmazonJwDaily,\n  invAmazonJwRange,\n  invSwiggyJmDaily,\n  invSwiggyJmRange,\n  invFlipkartJmDaily,\n  invFlipkartJmRange,\n  invZeptoJmDaily,\n  invZeptoJmRange,\n  invBigBasketJmDaily,\n  invBigBasketJmRange,\n\n  distributorMst,\n  distributorPo,\n  distributorOrderItems\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, ilike, gte, lte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Enhanced user methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, user: UpdateUser): Promise<User>;\n  updateLastLogin(id: number): Promise<void>;\n  changePassword(id: number, hashedPassword: string): Promise<void>;\n  \n  // Platform methods\n  getAllPlatforms(): Promise<PfMst[]>;\n  createPlatform(platform: InsertPfMst): Promise<PfMst>;\n  \n  // SAP Item methods\n  getAllSapItems(): Promise<SapItemMst[]>;\n  createSapItem(item: InsertSapItemMst): Promise<SapItemMst>;\n  \n  // SAP Item API methods\n  getAllSapItemsApi(): Promise<SapItemMstApi[]>;\n  createSapItemApi(item: InsertSapItemMstApi): Promise<SapItemMstApi>;\n  syncSapItemsFromApi(items: InsertSapItemMstApi[]): Promise<number>;\n  \n  // Platform Item methods\n  getPlatformItems(platformId?: number, search?: string): Promise<(PfItemMst & { sapItem: SapItemMst; platform: PfMst })[]>;\n  createPlatformItem(item: InsertPfItemMst): Promise<PfItemMst>;\n  \n  // PO methods\n  getAllPos(): Promise<(Omit<PfPo, 'platform'> & { platform: PfMst; orderItems: PfOrderItems[] })[]>;\n  getPoById(id: number): Promise<(Omit<PfPo, 'platform'> & { platform: PfMst; orderItems: PfOrderItems[] }) | undefined>;\n  createPo(po: InsertPfPo, items: InsertPfOrderItems[]): Promise<PfPo>;\n  updatePo(id: number, po: Partial<InsertPfPo>, items?: InsertPfOrderItems[]): Promise<PfPo>;\n  deletePo(id: number): Promise<void>;\n  \n  // Order Items methods\n  getAllOrderItems(): Promise<(PfOrderItems & { po_number: string; platform_name: string; order_date: Date; expiry_date: Date | null; platform: PfMst })[]>;\n  updateOrderItemStatus(id: number, status: string): Promise<PfOrderItems>;\n\n  // Flipkart Grocery PO methods\n  getAllFlipkartGroceryPos(): Promise<(FlipkartGroceryPoHeader & { poLines: FlipkartGroceryPoLines[] })[]>;\n  getFlipkartGroceryPoById(id: number): Promise<(FlipkartGroceryPoHeader & { poLines: FlipkartGroceryPoLines[] }) | undefined>;\n  getFlipkartGroceryPoByNumber(poNumber: string): Promise<FlipkartGroceryPoHeader | undefined>;\n  createFlipkartGroceryPo(header: InsertFlipkartGroceryPoHeader, lines: InsertFlipkartGroceryPoLines[]): Promise<FlipkartGroceryPoHeader>;\n  updateFlipkartGroceryPo(id: number, header: Partial<InsertFlipkartGroceryPoHeader>, lines?: InsertFlipkartGroceryPoLines[]): Promise<FlipkartGroceryPoHeader>;\n  deleteFlipkartGroceryPo(id: number): Promise<void>;\n\n  // Zepto PO methods\n  getAllZeptoPos(): Promise<(ZeptoPoHeader & { poLines: ZeptoPoLines[] })[]>;\n  getZeptoPOById(id: number): Promise<(ZeptoPoHeader & { poLines: ZeptoPoLines[] }) | undefined>;\n  getZeptoPoByNumber(poNumber: string): Promise<ZeptoPoHeader | undefined>;\n  createZeptoPo(header: InsertZeptoPoHeader, lines: InsertZeptoPoLines[]): Promise<ZeptoPoHeader>;\n  updateZeptoPo(id: number, header: Partial<InsertZeptoPoHeader>, lines?: InsertZeptoPoLines[]): Promise<ZeptoPoHeader>;\n  deleteZeptoPo(id: number): Promise<void>;\n\n  // City Mall PO methods\n  getAllCityMallPos(): Promise<(CityMallPoHeader & { poLines: CityMallPoLines[] })[]>;\n  getCityMallPoById(id: number): Promise<(CityMallPoHeader & { poLines: CityMallPoLines[] }) | undefined>;\n  getCityMallPoByNumber(poNumber: string): Promise<CityMallPoHeader | undefined>;\n  createCityMallPo(header: InsertCityMallPoHeader, lines: InsertCityMallPoLines[]): Promise<CityMallPoHeader>;\n  updateCityMallPo(id: number, header: Partial<InsertCityMallPoHeader>, lines?: InsertCityMallPoLines[]): Promise<CityMallPoHeader>;\n  deleteCityMallPo(id: number): Promise<void>;\n\n  // Blinkit PO methods\n  getAllBlinkitPos(): Promise<(BlinkitPoHeader & { poLines: BlinkitPoLines[] })[]>;\n  getBlinkitPoById(id: number): Promise<(BlinkitPoHeader & { poLines: BlinkitPoLines[] }) | undefined>;\n  getBlinkitPoByNumber(poNumber: string): Promise<BlinkitPoHeader | undefined>;\n  createBlinkitPo(header: InsertBlinkitPoHeader, lines: InsertBlinkitPoLines[]): Promise<BlinkitPoHeader>;\n  updateBlinkitPo(id: number, header: Partial<InsertBlinkitPoHeader>, lines?: InsertBlinkitPoLines[]): Promise<BlinkitPoHeader>;\n  deleteBlinkitPo(id: number): Promise<void>;\n\n  // Swiggy PO methods\n  getAllSwiggyPos(): Promise<(SwiggyPo & { poLines: SwiggyPoLine[] })[]>;\n  getSwiggyPoById(id: number): Promise<(SwiggyPo & { poLines: SwiggyPoLine[] }) | undefined>;\n  getSwiggyPoByNumber(poNumber: string): Promise<SwiggyPo | undefined>;\n  createSwiggyPo(po: InsertSwiggyPo, lines: InsertSwiggyPoLine[]): Promise<SwiggyPo>;\n  updateSwiggyPo(id: number, po: Partial<InsertSwiggyPo>): Promise<SwiggyPo | undefined>;\n  deleteSwiggyPo(id: number): Promise<void>;\n\n  // Distributor methods\n  getAllDistributors(): Promise<DistributorMst[]>;\n  getDistributorById(id: number): Promise<DistributorMst | undefined>;\n  createDistributor(distributor: InsertDistributorMst): Promise<DistributorMst>;\n  updateDistributor(id: number, distributor: Partial<InsertDistributorMst>): Promise<DistributorMst>;\n  deleteDistributor(id: number): Promise<void>;\n\n  // Distributor PO methods\n  getAllDistributorPos(): Promise<(Omit<DistributorPo, 'distributor_id'> & { distributor: DistributorMst; orderItems: DistributorOrderItems[] })[]>;\n  getDistributorPoById(id: number): Promise<(Omit<DistributorPo, 'distributor_id'> & { distributor: DistributorMst; orderItems: DistributorOrderItems[] }) | undefined>;\n  createDistributorPo(po: InsertDistributorPo, items: InsertDistributorOrderItems[]): Promise<DistributorPo>;\n  updateDistributorPo(id: number, po: Partial<InsertDistributorPo>, items?: InsertDistributorOrderItems[]): Promise<DistributorPo>;\n  deleteDistributorPo(id: number): Promise<void>;\n\n  // Distributor Order Items methods\n  getAllDistributorOrderItems(): Promise<(DistributorOrderItems & { po_number: string; distributor_name: string; order_date: Date; expiry_date: Date | null; distributor: DistributorMst })[]>;\n\n  // BigBasket PO methods\n  getAllBigbasketPos(): Promise<(BigbasketPoHeader & { poLines: BigbasketPoLines[] })[]>;\n  getBigbasketPoById(id: number): Promise<(BigbasketPoHeader & { poLines: BigbasketPoLines[] }) | undefined>;\n  getBigbasketPoByNumber(poNumber: string): Promise<BigbasketPoHeader | undefined>;\n  createBigbasketPo(header: InsertBigbasketPoHeader, lines: InsertBigbasketPoLines[]): Promise<BigbasketPoHeader>;\n  updateBigbasketPo(id: number, header: Partial<InsertBigbasketPoHeader>, lines?: InsertBigbasketPoLines[]): Promise<BigbasketPoHeader>;\n  deleteBigbasketPo(id: number): Promise<void>;\n\n  // Zomato PO methods\n  getAllZomatoPos(): Promise<(ZomatoPoHeader & { poItems: ZomatoPoItems[] })[]>;\n  getZomatoPoById(id: number): Promise<(ZomatoPoHeader & { poItems: ZomatoPoItems[] }) | undefined>;\n  getZomatoPoByNumber(poNumber: string): Promise<ZomatoPoHeader | undefined>;\n  createZomatoPo(header: InsertZomatoPoHeader, items: InsertZomatoPoItems[]): Promise<ZomatoPoHeader>;\n  updateZomatoPo(id: number, header: Partial<InsertZomatoPoHeader>, items?: InsertZomatoPoItems[]): Promise<ZomatoPoHeader>;\n  deleteZomatoPo(id: number): Promise<void>;\n\n  // Secondary Sales methods\n  getAllSecondarySales(platform?: string, businessUnit?: string): Promise<(SecondarySalesHeader & { salesItems: SecondarySalesItems[] })[]>;\n  getSecondarySalesById(id: number): Promise<(SecondarySalesHeader & { salesItems: SecondarySalesItems[] }) | undefined>;\n  createSecondarySales(header: InsertSecondarySalesHeader, items: InsertSecondarySalesItems[]): Promise<SecondarySalesHeader>;\n  updateSecondarySales(id: number, header: Partial<InsertSecondarySalesHeader>, items?: InsertSecondarySalesItems[]): Promise<SecondarySalesHeader>;\n  deleteSecondarySales(id: number): Promise<void>;\n\n  // Specific Secondary Sales table methods\n  createScAmJwDaily(items: InsertScAmJwDaily[]): Promise<ScAmJwDaily[]>;\n  createScAmJwRange(items: InsertScAmJwRange[]): Promise<ScAmJwRange[]>;\n  createScAmJmDaily(items: InsertScAmJmDaily[]): Promise<ScAmJmDaily[]>;\n  createScAmJmRange(items: InsertScAmJmRange[]): Promise<ScAmJmRange[]>;\n  \n  // New secondary sales platforms\n  createScZeptoJmDaily(items: InsertZeptoSecondarySalesItem[]): Promise<ZeptoSecondarySalesItem[]>;\n  createScZeptoJmRange(items: InsertZeptoSecondarySalesItem[]): Promise<ZeptoSecondarySalesItem[]>;\n  createScBlinkitJmDaily(items: InsertBlinkitSecondarySalesItem[]): Promise<BlinkitSecondarySalesItem[]>;\n  createScBlinkitJmRange(items: InsertBlinkitSecondarySalesItem[]): Promise<BlinkitSecondarySalesItem[]>;\n  createScSwiggyJmDaily(items: InsertSwiggySecondarySalesItem[]): Promise<SwiggySecondarySalesItem[]>;\n  createScSwiggyJmRange(items: InsertSwiggySecondarySalesItem[]): Promise<SwiggySecondarySalesItem[]>;\n  createScJioMartSaleJmDaily(items: InsertJioMartSaleSecondarySalesItem[]): Promise<JioMartSaleSecondarySalesItem[]>;\n  createScJioMartSaleJmRange(items: InsertJioMartSaleSecondarySalesItem[]): Promise<JioMartSaleSecondarySalesItem[]>;\n  createScJioMartCancelJmDaily(items: InsertJioMartCancelSecondarySalesItem[]): Promise<JioMartCancelSecondarySalesItem[]>;\n  createScJioMartCancelJmRange(items: InsertJioMartCancelSecondarySalesItem[]): Promise<JioMartCancelSecondarySalesItem[]>;\n  createScBigBasketJmDaily(items: InsertBigBasketSecondarySalesItem[]): Promise<BigBasketSecondarySalesItem[]>;\n  createScBigBasketJmRange(items: InsertBigBasketSecondarySalesItem[]): Promise<BigBasketSecondarySalesItem[]>;\n  getScAmJwDaily(dateStart?: string, dateEnd?: string): Promise<ScAmJwDaily[]>;\n  getScAmJwRange(dateStart?: string, dateEnd?: string): Promise<ScAmJwRange[]>;\n  getScAmJmDaily(dateStart?: string, dateEnd?: string): Promise<ScAmJmDaily[]>;\n  getScAmJmRange(dateStart?: string, dateEnd?: string): Promise<ScAmJmRange[]>;\n\n  // Inventory Management methods\n  getAllInventory(platform?: string, businessUnit?: string): Promise<any[]>;\n  getInventoryById(id: number): Promise<any>;\n  createInventoryJioMartJmDaily(items: InsertInvJioMartJmDaily[]): Promise<InvJioMartJmDaily[]>;\n  createInventoryJioMartJmRange(items: InsertInvJioMartJmRange[]): Promise<InvJioMartJmRange[]>;\n  updateInventory(id: number, header: any, items: any): Promise<any>;\n  deleteInventory(id: number): Promise<void>;\n\n  \n  sessionStore: session.SessionStore;\n}\n\nimport connectPgSimple from \"connect-pg-simple\";\nimport session from \"express-session\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPgSimple(session);\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.SessionStore;\n  \n  constructor() {\n    this.sessionStore = new PostgresSessionStore({\n      pool: pool as any,\n      createTableIfMissing: true,\n    });\n  }\n  // Enhanced user methods with session store\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: number, updateUser: UpdateUser): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updateUser, updated_at: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateLastLogin(id: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ last_login: new Date() })\n      .where(eq(users.id, id));\n  }\n\n  async changePassword(id: number, hashedPassword: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        password: hashedPassword, \n        password_changed_at: new Date(),\n        updated_at: new Date()\n      })\n      .where(eq(users.id, id));\n  }\n\n  // Platform methods\n  async getAllPlatforms(): Promise<PfMst[]> {\n    return await db.select().from(pfMst);\n  }\n\n  async createPlatform(platform: InsertPfMst): Promise<PfMst> {\n    const [result] = await db.insert(pfMst).values(platform).returning();\n    return result;\n  }\n\n  // SAP Item methods\n  async getAllSapItems(): Promise<SapItemMst[]> {\n    return await db.select().from(sapItemMst);\n  }\n\n  async createSapItem(item: InsertSapItemMst): Promise<SapItemMst> {\n    const [result] = await db.insert(sapItemMst).values(item).returning();\n    return result;\n  }\n\n  // SAP Item API methods\n  async getAllSapItemsApi(): Promise<SapItemMstApi[]> {\n    return await db.select().from(sapItemMstApi);\n  }\n\n  async createSapItemApi(item: InsertSapItemMstApi): Promise<SapItemMstApi> {\n    const [result] = await db.insert(sapItemMstApi).values(item).returning();\n    return result;\n  }\n\n  async syncSapItemsFromApi(items: InsertSapItemMstApi[]): Promise<number> {\n    if (items.length === 0) return 0;\n    \n    // Clear existing data and insert new data\n    await db.delete(sapItemMstApi);\n    await db.insert(sapItemMstApi).values(items);\n    \n    return items.length;\n  }\n\n  // Platform Item methods\n  async getPlatformItems(platformId?: number, search?: string): Promise<(PfItemMst & { sapItem: SapItemMst; platform: PfMst })[]> {\n    let query = db\n      .select({\n        id: pfItemMst.id,\n        pf_itemcode: pfItemMst.pf_itemcode,\n        pf_itemname: pfItemMst.pf_itemname,\n        pf_id: pfItemMst.pf_id,\n        sap_id: pfItemMst.sap_id,\n        sapItem: sapItemMst,\n        platform: pfMst\n      })\n      .from(pfItemMst)\n      .leftJoin(sapItemMst, eq(pfItemMst.sap_id, sapItemMst.id))\n      .leftJoin(pfMst, eq(pfItemMst.pf_id, pfMst.id));\n\n    const conditions = [];\n    \n    if (platformId) {\n      conditions.push(eq(pfItemMst.pf_id, platformId));\n    }\n    \n    if (search) {\n      conditions.push(ilike(pfItemMst.pf_itemname, `%${search}%`));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as typeof query;\n    }\n\n    const results = await query;\n    return results.map(row => ({\n      id: row.id,\n      pf_itemcode: row.pf_itemcode,\n      pf_itemname: row.pf_itemname,\n      pf_id: row.pf_id,\n      sap_id: row.sap_id,\n      sapItem: row.sapItem!,\n      platform: row.platform!\n    }));\n  }\n\n  async createPlatformItem(item: InsertPfItemMst): Promise<PfItemMst> {\n    const [result] = await db.insert(pfItemMst).values(item).returning();\n    return result;\n  }\n\n  // PO methods\n  async getAllPos(): Promise<(Omit<PfPo, 'platform'> & { platform: PfMst; orderItems: PfOrderItems[] })[]> {\n    // Get regular POs from pf_po table\n    const regularPos = await db\n      .select({\n        po: pfPo,\n        platform: pfMst\n      })\n      .from(pfPo)\n      .leftJoin(pfMst, eq(pfPo.platform, pfMst.id))\n      .orderBy(desc(pfPo.created_at));\n\n    const result = [];\n    \n    // Process regular POs\n    for (const { po, platform } of regularPos) {\n      const orderItems = await db\n        .select()\n        .from(pfOrderItems)\n        .where(eq(pfOrderItems.po_id, po.id));\n      \n      const { platform: platformId, ...poWithoutPlatform } = po;\n      result.push({\n        ...poWithoutPlatform,\n        platform: platform!,\n        orderItems\n      });\n    }\n\n    // Sort results by created_at descending  \n    result.sort((a, b) => new Date(b.created_at || 0).getTime() - new Date(a.created_at || 0).getTime());\n\n    return result;\n  }\n\n  async getPoById(id: number): Promise<(Omit<PfPo, 'platform'> & { platform: PfMst; orderItems: PfOrderItems[] }) | undefined> {\n    const [result] = await db\n      .select({\n        po: pfPo,\n        platform: pfMst\n      })\n      .from(pfPo)\n      .leftJoin(pfMst, eq(pfPo.platform, pfMst.id))\n      .where(eq(pfPo.id, id));\n\n    if (!result) return undefined;\n\n    const orderItems = await db\n      .select()\n      .from(pfOrderItems)\n      .where(eq(pfOrderItems.po_id, id));\n\n    const { platform: platformId, ...poWithoutPlatform } = result.po;\n    return {\n      ...poWithoutPlatform,\n      platform: result.platform!,\n      orderItems\n    };\n  }\n\n  async createPo(po: InsertPfPo, items: InsertPfOrderItems[]): Promise<PfPo> {\n    return await db.transaction(async (tx) => {\n      const [createdPo] = await tx.insert(pfPo).values(po).returning();\n      \n      if (items.length > 0) {\n        const itemsWithPoId = items.map(item => ({\n          ...item,\n          po_id: createdPo.id\n        }));\n        await tx.insert(pfOrderItems).values(itemsWithPoId);\n      }\n      \n      return createdPo;\n    });\n  }\n\n  async updatePo(id: number, po: Partial<InsertPfPo>, items?: InsertPfOrderItems[]): Promise<PfPo> {\n    return await db.transaction(async (tx) => {\n      const [updatedPo] = await tx\n        .update(pfPo)\n        .set({ ...po, updated_at: new Date() })\n        .where(eq(pfPo.id, id))\n        .returning();\n\n      if (items) {\n        // Delete existing items\n        await tx.delete(pfOrderItems).where(eq(pfOrderItems.po_id, id));\n        \n        // Insert new items\n        if (items.length > 0) {\n          const itemsWithPoId = items.map(item => ({\n            ...item,\n            po_id: id\n          }));\n          await tx.insert(pfOrderItems).values(itemsWithPoId);\n        }\n      }\n\n      return updatedPo;\n    });\n  }\n\n  async deletePo(id: number): Promise<void> {\n    await db.delete(pfPo).where(eq(pfPo.id, id));\n  }\n\n  async getAllOrderItems(): Promise<(PfOrderItems & { po_number: string; platform_name: string; order_date: Date; expiry_date: Date | null; platform: PfMst })[]> {\n    const results = await db\n      .select({\n        // Order item fields\n        id: pfOrderItems.id,\n        po_id: pfOrderItems.po_id,\n        item_name: pfOrderItems.item_name,\n        quantity: pfOrderItems.quantity,\n        basic_rate: pfOrderItems.basic_rate,\n        gst_rate: pfOrderItems.gst_rate,\n        landing_rate: pfOrderItems.landing_rate,\n        status: pfOrderItems.status,\n        sap_code: pfOrderItems.sap_code,\n        category: pfOrderItems.category,\n        subcategory: pfOrderItems.subcategory,\n        total_litres: pfOrderItems.total_litres,\n        hsn_code: pfOrderItems.hsn_code,\n        // PO fields\n        po_number: pfPo.po_number,\n        order_date: pfPo.order_date,\n        expiry_date: pfPo.expiry_date,\n        // Platform fields  \n        platform_name: pfMst.pf_name,\n        platform: pfMst\n      })\n      .from(pfOrderItems)\n      .innerJoin(pfPo, eq(pfOrderItems.po_id, pfPo.id))\n      .innerJoin(pfMst, eq(pfPo.platform, pfMst.id))\n      .orderBy(desc(pfPo.created_at));\n\n    return results.map(result => ({\n      id: result.id,\n      po_id: result.po_id,\n      item_name: result.item_name,\n      quantity: result.quantity,\n      basic_rate: result.basic_rate,\n      gst_rate: result.gst_rate,\n      landing_rate: result.landing_rate,\n      status: result.status,\n      sap_code: result.sap_code,\n      category: result.category,\n      subcategory: result.subcategory,\n      total_litres: result.total_litres,\n      hsn_code: result.hsn_code,\n      po_number: result.po_number,\n      platform_name: result.platform_name,\n      order_date: result.order_date,\n      expiry_date: result.expiry_date,\n      platform: result.platform\n    }));\n  }\n\n  async updateOrderItemStatus(id: number, status: string): Promise<PfOrderItems> {\n    const [updatedItem] = await db\n      .update(pfOrderItems)\n      .set({ status })\n      .where(eq(pfOrderItems.id, id))\n      .returning();\n    \n    if (!updatedItem) {\n      throw new Error('Order item not found');\n    }\n    \n    return updatedItem;\n  }\n\n  // Flipkart Grocery PO methods\n  async getAllFlipkartGroceryPos(): Promise<(FlipkartGroceryPoHeader & { poLines: FlipkartGroceryPoLines[] })[]> {\n    const headers = await db.select().from(flipkartGroceryPoHeader).orderBy(desc(flipkartGroceryPoHeader.created_at));\n    \n    const result = [];\n    for (const header of headers) {\n      const lines = await db.select().from(flipkartGroceryPoLines)\n        .where(eq(flipkartGroceryPoLines.header_id, header.id))\n        .orderBy(flipkartGroceryPoLines.line_number);\n      \n      result.push({\n        ...header,\n        poLines: lines\n      });\n    }\n    \n    return result;\n  }\n\n  async getFlipkartGroceryPoById(id: number): Promise<(FlipkartGroceryPoHeader & { poLines: FlipkartGroceryPoLines[] }) | undefined> {\n    const [header] = await db.select().from(flipkartGroceryPoHeader).where(eq(flipkartGroceryPoHeader.id, id));\n    \n    if (!header) {\n      return undefined;\n    }\n    \n    const lines = await db.select().from(flipkartGroceryPoLines)\n      .where(eq(flipkartGroceryPoLines.header_id, id))\n      .orderBy(flipkartGroceryPoLines.line_number);\n    \n    return {\n      ...header,\n      poLines: lines\n    };\n  }\n\n  async getFlipkartGroceryPoByNumber(poNumber: string): Promise<FlipkartGroceryPoHeader | undefined> {\n    const [header] = await db.select().from(flipkartGroceryPoHeader).where(eq(flipkartGroceryPoHeader.po_number, poNumber));\n    return header || undefined;\n  }\n\n  async createFlipkartGroceryPo(header: InsertFlipkartGroceryPoHeader, lines: InsertFlipkartGroceryPoLines[]): Promise<FlipkartGroceryPoHeader> {\n    return await db.transaction(async (tx) => {\n      const [createdHeader] = await tx.insert(flipkartGroceryPoHeader).values(header).returning();\n      \n      if (lines.length > 0) {\n        const linesWithHeaderId = lines.map(line => ({\n          ...line,\n          header_id: createdHeader.id\n        }));\n        await tx.insert(flipkartGroceryPoLines).values(linesWithHeaderId);\n      }\n      \n      return createdHeader;\n    });\n  }\n\n  async updateFlipkartGroceryPo(id: number, header: Partial<InsertFlipkartGroceryPoHeader>, lines?: InsertFlipkartGroceryPoLines[]): Promise<FlipkartGroceryPoHeader> {\n    return await db.transaction(async (tx) => {\n      const [updatedHeader] = await tx.update(flipkartGroceryPoHeader)\n        .set({ ...header, updated_at: new Date() })\n        .where(eq(flipkartGroceryPoHeader.id, id))\n        .returning();\n\n      if (lines) {\n        // Delete existing lines\n        await tx.delete(flipkartGroceryPoLines).where(eq(flipkartGroceryPoLines.header_id, id));\n        \n        // Insert new lines\n        if (lines.length > 0) {\n          const linesWithHeaderId = lines.map(line => ({\n            ...line,\n            header_id: id\n          }));\n          await tx.insert(flipkartGroceryPoLines).values(linesWithHeaderId);\n        }\n      }\n\n      return updatedHeader;\n    });\n  }\n\n  async deleteFlipkartGroceryPo(id: number): Promise<void> {\n    await db.delete(flipkartGroceryPoHeader).where(eq(flipkartGroceryPoHeader.id, id));\n  }\n\n  async getFlipkartGroceryPoLines(poHeaderId: number): Promise<FlipkartGroceryPoLines[]> {\n    return await db.select().from(flipkartGroceryPoLines).where(eq(flipkartGroceryPoLines.header_id, poHeaderId));\n  }\n\n  // Zepto PO methods\n  async getAllZeptoPos(): Promise<(ZeptoPoHeader & { poLines: ZeptoPoLines[] })[]> {\n    const headers = await db.select().from(zeptoPoHeader).orderBy(desc(zeptoPoHeader.created_at));\n    \n    const result = [];\n    for (const header of headers) {\n      const lines = await db.select().from(zeptoPoLines)\n        .where(eq(zeptoPoLines.po_header_id, header.id))\n        .orderBy(zeptoPoLines.line_number);\n      \n      result.push({\n        ...header,\n        poLines: lines\n      });\n    }\n    \n    return result;\n  }\n\n  async getZeptoPOById(id: number): Promise<(ZeptoPoHeader & { poLines: ZeptoPoLines[] }) | undefined> {\n    const [header] = await db.select().from(zeptoPoHeader).where(eq(zeptoPoHeader.id, id));\n    if (!header) return undefined;\n\n    const lines = await db.select().from(zeptoPoLines)\n      .where(eq(zeptoPoLines.po_header_id, header.id))\n      .orderBy(zeptoPoLines.line_number);\n\n    return {\n      ...header,\n      poLines: lines\n    };\n  }\n\n  async getZeptoPoByNumber(poNumber: string): Promise<ZeptoPoHeader | undefined> {\n    const [header] = await db.select().from(zeptoPoHeader).where(eq(zeptoPoHeader.po_number, poNumber));\n    return header || undefined;\n  }\n\n  async createZeptoPo(header: InsertZeptoPoHeader, lines: InsertZeptoPoLines[]): Promise<ZeptoPoHeader> {\n    return await db.transaction(async (tx) => {\n      // Insert header\n      const [createdHeader] = await tx.insert(zeptoPoHeader).values(header).returning();\n      \n      // Insert lines with header reference\n      if (lines.length > 0) {\n        const linesWithHeaderId = lines.map(line => ({\n          ...line,\n          po_header_id: createdHeader.id\n        }));\n        \n        await tx.insert(zeptoPoLines).values(linesWithHeaderId);\n      }\n      \n      return createdHeader;\n    });\n  }\n\n  async updateZeptoPo(id: number, header: Partial<InsertZeptoPoHeader>, lines?: InsertZeptoPoLines[]): Promise<ZeptoPoHeader> {\n    return await db.transaction(async (tx) => {\n      // Update header\n      const [updatedHeader] = await tx\n        .update(zeptoPoHeader)\n        .set({ ...header, updated_at: new Date() })\n        .where(eq(zeptoPoHeader.id, id))\n        .returning();\n\n      // Update lines if provided\n      if (lines) {\n        // Delete existing lines\n        await tx.delete(zeptoPoLines).where(eq(zeptoPoLines.po_header_id, id));\n        \n        // Insert new lines\n        if (lines.length > 0) {\n          const linesWithHeaderId = lines.map(line => ({\n            ...line,\n            po_header_id: id\n          }));\n          \n          await tx.insert(zeptoPoLines).values(linesWithHeaderId);\n        }\n      }\n\n      return updatedHeader;\n    });\n  }\n\n  async deleteZeptoPo(id: number): Promise<void> {\n    await db.delete(zeptoPoHeader).where(eq(zeptoPoHeader.id, id));\n  }\n\n  // City Mall PO methods\n  async getAllCityMallPos(): Promise<(CityMallPoHeader & { poLines: CityMallPoLines[] })[]> {\n    const pos = await db.select().from(cityMallPoHeader).orderBy(desc(cityMallPoHeader.created_at));\n    \n    const posWithLines = await Promise.all(\n      pos.map(async (po) => {\n        const lines = await db.select().from(cityMallPoLines).where(eq(cityMallPoLines.po_header_id, po.id));\n        return { ...po, poLines: lines };\n      })\n    );\n    \n    return posWithLines;\n  }\n\n  async getCityMallPoById(id: number): Promise<(CityMallPoHeader & { poLines: CityMallPoLines[] }) | undefined> {\n    const [po] = await db.select().from(cityMallPoHeader).where(eq(cityMallPoHeader.id, id));\n    if (!po) return undefined;\n    \n    const lines = await db.select().from(cityMallPoLines).where(eq(cityMallPoLines.po_header_id, id));\n    return { ...po, poLines: lines };\n  }\n\n  async createCityMallPo(header: InsertCityMallPoHeader, lines: InsertCityMallPoLines[]): Promise<CityMallPoHeader> {\n    return await db.transaction(async (tx) => {\n      const [createdHeader] = await tx.insert(cityMallPoHeader).values(header).returning();\n      \n      if (lines.length > 0) {\n        const linesWithHeaderId = lines.map(line => ({\n          ...line,\n          po_header_id: createdHeader.id\n        }));\n        await tx.insert(cityMallPoLines).values(linesWithHeaderId);\n      }\n      \n      return createdHeader;\n    });\n  }\n\n  async updateCityMallPo(id: number, header: Partial<InsertCityMallPoHeader>, lines?: InsertCityMallPoLines[]): Promise<CityMallPoHeader> {\n    return await db.transaction(async (tx) => {\n      const [updatedHeader] = await tx\n        .update(cityMallPoHeader)\n        .set({ ...header, updated_at: new Date() })\n        .where(eq(cityMallPoHeader.id, id))\n        .returning();\n      \n      if (lines) {\n        await tx.delete(cityMallPoLines).where(eq(cityMallPoLines.po_header_id, id));\n        if (lines.length > 0) {\n          const linesWithHeaderId = lines.map(line => ({\n            ...line,\n            po_header_id: id\n          }));\n          await tx.insert(cityMallPoLines).values(linesWithHeaderId);\n        }\n      }\n      \n      return updatedHeader;\n    });\n  }\n\n  async deleteCityMallPo(id: number): Promise<void> {\n    await db.delete(cityMallPoHeader).where(eq(cityMallPoHeader.id, id));\n  }\n\n  async getCityMallPoByNumber(poNumber: string): Promise<CityMallPoHeader | undefined> {\n    const [header] = await db.select().from(cityMallPoHeader).where(eq(cityMallPoHeader.po_number, poNumber));\n    return header || undefined;\n  }\n\n  // Blinkit PO methods\n  async getAllBlinkitPos(): Promise<(BlinkitPoHeader & { poLines: BlinkitPoLines[] })[]> {\n    const pos = await db.select().from(blinkitPoHeader).orderBy(desc(blinkitPoHeader.created_at));\n    \n    const posWithLines = await Promise.all(\n      pos.map(async (po) => {\n        const lines = await db.select().from(blinkitPoLines).where(eq(blinkitPoLines.po_header_id, po.id));\n        return { ...po, poLines: lines };\n      })\n    );\n    \n    return posWithLines;\n  }\n\n  async getBlinkitPoById(id: number): Promise<(BlinkitPoHeader & { poLines: BlinkitPoLines[] }) | undefined> {\n    const [po] = await db.select().from(blinkitPoHeader).where(eq(blinkitPoHeader.id, id));\n    if (!po) return undefined;\n    \n    const lines = await db.select().from(blinkitPoLines).where(eq(blinkitPoLines.po_header_id, id));\n    return { ...po, poLines: lines };\n  }\n\n  async createBlinkitPo(header: InsertBlinkitPoHeader, lines: InsertBlinkitPoLines[]): Promise<BlinkitPoHeader> {\n    return await db.transaction(async (tx) => {\n      const [createdHeader] = await tx.insert(blinkitPoHeader).values(header).returning();\n      \n      if (lines.length > 0) {\n        const linesWithHeaderId = lines.map(line => ({\n          ...line,\n          po_header_id: createdHeader.id\n        }));\n        await tx.insert(blinkitPoLines).values(linesWithHeaderId);\n      }\n      \n      return createdHeader;\n    });\n  }\n\n  async updateBlinkitPo(id: number, header: Partial<InsertBlinkitPoHeader>, lines?: InsertBlinkitPoLines[]): Promise<BlinkitPoHeader> {\n    return await db.transaction(async (tx) => {\n      const [updatedHeader] = await tx\n        .update(blinkitPoHeader)\n        .set({ ...header, updated_at: new Date() })\n        .where(eq(blinkitPoHeader.id, id))\n        .returning();\n      \n      if (lines) {\n        await tx.delete(blinkitPoLines).where(eq(blinkitPoLines.po_header_id, id));\n        if (lines.length > 0) {\n          const linesWithHeaderId = lines.map(line => ({\n            ...line,\n            po_header_id: id\n          }));\n          await tx.insert(blinkitPoLines).values(linesWithHeaderId);\n        }\n      }\n      \n      return updatedHeader;\n    });\n  }\n\n  async deleteBlinkitPo(id: number): Promise<void> {\n    await db.delete(blinkitPoHeader).where(eq(blinkitPoHeader.id, id));\n  }\n\n  async getBlinkitPoByNumber(poNumber: string): Promise<BlinkitPoHeader | undefined> {\n    const [header] = await db.select().from(blinkitPoHeader).where(eq(blinkitPoHeader.po_number, poNumber));\n    return header || undefined;\n  }\n\n  // Swiggy PO methods\n  async getAllSwiggyPos(): Promise<(SwiggyPo & { poLines: SwiggyPoLine[] })[]> {\n    const pos = await db\n      .select()\n      .from(swiggyPos)\n      .orderBy(desc(swiggyPos.created_at));\n\n    return await Promise.all(\n      pos.map(async (po) => {\n        const lines = await db\n          .select()\n          .from(swiggyPoLines)\n          .where(eq(swiggyPoLines.po_id, po.id))\n          .orderBy(swiggyPoLines.line_number);\n        return { ...po, poLines: lines };\n      })\n    );\n  }\n\n  async getSwiggyPoById(id: number): Promise<(SwiggyPo & { poLines: SwiggyPoLine[] }) | undefined> {\n    const [po] = await db\n      .select()\n      .from(swiggyPos)\n      .where(eq(swiggyPos.id, id));\n\n    if (!po) return undefined;\n\n    const lines = await db\n      .select()\n      .from(swiggyPoLines)\n      .where(eq(swiggyPoLines.po_id, po.id))\n      .orderBy(swiggyPoLines.line_number);\n\n    return { ...po, poLines: lines };\n  }\n\n  async getSwiggyPoByNumber(poNumber: string): Promise<SwiggyPo | undefined> {\n    const [po] = await db\n      .select()\n      .from(swiggyPos)\n      .where(eq(swiggyPos.po_number, poNumber));\n\n    return po || undefined;\n  }\n\n  async createSwiggyPo(po: InsertSwiggyPo, lines: InsertSwiggyPoLine[]): Promise<SwiggyPo> {\n    return await db.transaction(async (tx) => {\n      const [createdPo] = await tx.insert(swiggyPos).values(po).returning();\n      \n      if (lines.length > 0) {\n        const linesWithPoId = lines.map(line => ({ ...line, po_id: createdPo.id }));\n        await tx.insert(swiggyPoLines).values(linesWithPoId);\n      }\n      \n      return createdPo;\n    });\n  }\n\n  async updateSwiggyPo(id: number, po: Partial<InsertSwiggyPo>): Promise<SwiggyPo | undefined> {\n    const [updated] = await db\n      .update(swiggyPos)\n      .set({ ...po, updated_at: new Date() })\n      .where(eq(swiggyPos.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteSwiggyPo(id: number): Promise<void> {\n    await db.delete(swiggyPos).where(eq(swiggyPos.id, id));\n  }\n\n  // Distributor methods\n  async getAllDistributors(): Promise<DistributorMst[]> {\n    return await db.select().from(distributorMst).where(eq(distributorMst.status, 'Active')).orderBy(distributorMst.distributor_name);\n  }\n\n  async getDistributorById(id: number): Promise<DistributorMst | undefined> {\n    const [distributor] = await db.select().from(distributorMst).where(eq(distributorMst.id, id));\n    return distributor || undefined;\n  }\n\n  async createDistributor(distributor: InsertDistributorMst): Promise<DistributorMst> {\n    const [result] = await db.insert(distributorMst).values(distributor).returning();\n    return result;\n  }\n\n  async updateDistributor(id: number, distributor: Partial<InsertDistributorMst>): Promise<DistributorMst> {\n    const [result] = await db\n      .update(distributorMst)\n      .set({ ...distributor, updated_at: new Date() })\n      .where(eq(distributorMst.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteDistributor(id: number): Promise<void> {\n    await db.delete(distributorMst).where(eq(distributorMst.id, id));\n  }\n\n  // Distributor PO methods\n  async getAllDistributorPos(): Promise<(Omit<DistributorPo, 'distributor_id'> & { distributor: DistributorMst; orderItems: DistributorOrderItems[] })[]> {\n    const pos = await db.select().from(distributorPo).orderBy(desc(distributorPo.created_at));\n    \n    const result = [];\n    for (const po of pos) {\n      // Get distributor details\n      const [distributor] = await db.select().from(distributorMst).where(eq(distributorMst.id, po.distributor_id));\n      \n      // Get order items\n      const orderItems = await db.select().from(distributorOrderItems).where(eq(distributorOrderItems.po_id, po.id));\n      \n      result.push({\n        ...po,\n        distributor: distributor!,\n        orderItems\n      });\n    }\n    \n    return result;\n  }\n\n  async getDistributorPoById(id: number): Promise<(Omit<DistributorPo, 'distributor_id'> & { distributor: DistributorMst; orderItems: DistributorOrderItems[] }) | undefined> {\n    const [po] = await db.select().from(distributorPo).where(eq(distributorPo.id, id));\n    \n    if (!po) {\n      return undefined;\n    }\n\n    // Get distributor details\n    const [distributor] = await db.select().from(distributorMst).where(eq(distributorMst.id, po.distributor_id));\n    \n    // Get order items\n    const orderItems = await db.select().from(distributorOrderItems).where(eq(distributorOrderItems.po_id, po.id));\n    \n    return {\n      ...po,\n      distributor: distributor!,\n      orderItems\n    };\n  }\n\n  async createDistributorPo(po: InsertDistributorPo, items: InsertDistributorOrderItems[]): Promise<DistributorPo> {\n    return await db.transaction(async (tx) => {\n      // Create PO header\n      const [createdPo] = await tx.insert(distributorPo).values(po).returning();\n      \n      // Create PO items\n      if (items.length > 0) {\n        const itemsWithPoId = items.map(item => ({\n          ...item,\n          po_id: createdPo.id\n        }));\n        await tx.insert(distributorOrderItems).values(itemsWithPoId);\n      }\n      \n      return createdPo;\n    });\n  }\n\n  async updateDistributorPo(id: number, po: Partial<InsertDistributorPo>, items?: InsertDistributorOrderItems[]): Promise<DistributorPo> {\n    return await db.transaction(async (tx) => {\n      // Update PO header\n      const [updatedPo] = await tx\n        .update(distributorPo)\n        .set({ ...po, updated_at: new Date() })\n        .where(eq(distributorPo.id, id))\n        .returning();\n\n      // If items are provided, update them\n      if (items && items.length > 0) {\n        // Delete existing items\n        await tx.delete(distributorOrderItems).where(eq(distributorOrderItems.po_id, id));\n        \n        // Insert new items\n        const itemsWithPoId = items.map(item => ({\n          ...item,\n          po_id: id\n        }));\n        await tx.insert(distributorOrderItems).values(itemsWithPoId);\n      }\n\n      return updatedPo;\n    });\n  }\n\n  async deleteDistributorPo(id: number): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Delete order items first\n      await tx.delete(distributorOrderItems).where(eq(distributorOrderItems.po_id, id));\n      // Delete PO header\n      await tx.delete(distributorPo).where(eq(distributorPo.id, id));\n    });\n  }\n\n  // Distributor Order Items methods\n  async getAllDistributorOrderItems(): Promise<(DistributorOrderItems & { po_number: string; distributor_name: string; order_date: Date; expiry_date: Date | null; distributor: DistributorMst })[]> {\n    const items = await db.select({\n      id: distributorOrderItems.id,\n      po_id: distributorOrderItems.po_id,\n      item_name: distributorOrderItems.item_name,\n      quantity: distributorOrderItems.quantity,\n      sap_code: distributorOrderItems.sap_code,\n      category: distributorOrderItems.category,\n      subcategory: distributorOrderItems.subcategory,\n      basic_rate: distributorOrderItems.basic_rate,\n      gst_rate: distributorOrderItems.gst_rate,\n      landing_rate: distributorOrderItems.landing_rate,\n      total_litres: distributorOrderItems.total_litres,\n      status: distributorOrderItems.status,\n      hsn_code: distributorOrderItems.hsn_code,\n      po_number: distributorPo.po_number,\n      distributor_name: distributorMst.distributor_name,\n      order_date: distributorPo.order_date,\n      expiry_date: distributorPo.expiry_date,\n      distributor: distributorMst\n    })\n    .from(distributorOrderItems)\n    .leftJoin(distributorPo, eq(distributorOrderItems.po_id, distributorPo.id))\n    .leftJoin(distributorMst, eq(distributorPo.distributor_id, distributorMst.id))\n    .orderBy(desc(distributorPo.created_at));\n    \n    // Type assertion to fix the return type mismatch\n    return items as (DistributorOrderItems & { po_number: string; distributor_name: string; order_date: Date; expiry_date: Date | null; distributor: DistributorMst })[];\n  }\n\n  // BigBasket PO methods\n  async getAllBigbasketPos(): Promise<BigbasketPoHeader[]> {\n    return await db.select().from(bigbasketPoHeader).orderBy(desc(bigbasketPoHeader.created_at));\n  }\n\n  async getBigbasketPoById(id: number): Promise<BigbasketPoHeader | undefined> {\n    const [po] = await db.select().from(bigbasketPoHeader).where(eq(bigbasketPoHeader.id, id));\n    return po || undefined;\n  }\n\n  async createBigbasketPo(po: InsertBigbasketPoHeader, lines: InsertBigbasketPoLines[]): Promise<BigbasketPoHeader> {\n    return await db.transaction(async (tx) => {\n      const [createdPo] = await tx.insert(bigbasketPoHeader).values(po).returning();\n      \n      if (lines.length > 0) {\n        const linesWithPoId = lines.map(line => ({ ...line, po_id: createdPo.id }));\n        await tx.insert(bigbasketPoLines).values(linesWithPoId);\n      }\n      \n      return createdPo;\n    });\n  }\n\n  async updateBigbasketPo(id: number, po: Partial<InsertBigbasketPoHeader>): Promise<BigbasketPoHeader | undefined> {\n    const [updated] = await db\n      .update(bigbasketPoHeader)\n      .set({ ...po, updated_at: new Date() })\n      .where(eq(bigbasketPoHeader.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteBigbasketPo(id: number): Promise<void> {\n    await db.delete(bigbasketPoHeader).where(eq(bigbasketPoHeader.id, id));\n  }\n\n  // Zomato PO methods\n  async getAllZomatoPos(): Promise<(ZomatoPoHeader & { poItems: ZomatoPoItems[] })[]> {\n    const pos = await db.select().from(zomatoPoHeader).orderBy(desc(zomatoPoHeader.created_at));\n    \n    const result = [];\n    for (const po of pos) {\n      const poItems = await db.select().from(zomatoPoItems).where(eq(zomatoPoItems.po_header_id, po.id));\n      result.push({\n        ...po,\n        poItems\n      });\n    }\n    \n    return result;\n  }\n\n  async getZomatoPoById(id: number): Promise<(ZomatoPoHeader & { poItems: ZomatoPoItems[] }) | undefined> {\n    const [po] = await db.select().from(zomatoPoHeader).where(eq(zomatoPoHeader.id, id));\n    \n    if (!po) {\n      return undefined;\n    }\n\n    const poItems = await db.select().from(zomatoPoItems).where(eq(zomatoPoItems.po_header_id, po.id));\n    \n    return {\n      ...po,\n      poItems\n    };\n  }\n\n  async getZomatoPoByNumber(poNumber: string): Promise<ZomatoPoHeader | undefined> {\n    const [po] = await db.select().from(zomatoPoHeader).where(eq(zomatoPoHeader.po_number, poNumber));\n    return po || undefined;\n  }\n\n  async createZomatoPo(header: InsertZomatoPoHeader, items: InsertZomatoPoItems[]): Promise<ZomatoPoHeader> {\n    return await db.transaction(async (tx) => {\n      const [createdPo] = await tx.insert(zomatoPoHeader).values(header).returning();\n      \n      if (items.length > 0) {\n        const itemsWithPoId = items.map(item => ({\n          ...item,\n          po_header_id: createdPo.id\n        }));\n        await tx.insert(zomatoPoItems).values(itemsWithPoId);\n      }\n      \n      return createdPo;\n    });\n  }\n\n  async updateZomatoPo(id: number, header: Partial<InsertZomatoPoHeader>, items?: InsertZomatoPoItems[]): Promise<ZomatoPoHeader> {\n    return await db.transaction(async (tx) => {\n      const [updatedPo] = await tx\n        .update(zomatoPoHeader)\n        .set({ ...header, updated_at: new Date() })\n        .where(eq(zomatoPoHeader.id, id))\n        .returning();\n\n      if (items && items.length > 0) {\n        await tx.delete(zomatoPoItems).where(eq(zomatoPoItems.po_header_id, id));\n        \n        const itemsWithPoId = items.map(item => ({\n          ...item,\n          po_header_id: id\n        }));\n        await tx.insert(zomatoPoItems).values(itemsWithPoId);\n      }\n\n      return updatedPo;\n    });\n  }\n\n  async deleteZomatoPo(id: number): Promise<void> {\n    await db.transaction(async (tx) => {\n      await tx.delete(zomatoPoItems).where(eq(zomatoPoItems.po_header_id, id));\n      await tx.delete(zomatoPoHeader).where(eq(zomatoPoHeader.id, id));\n    });\n  }\n\n  // Dealshare PO methods\n  async getAllDealsharePos(): Promise<(DealsharePoHeader & { poItems: DealsharePoItems[] })[]> {\n    const pos = await db.select().from(dealsharePoHeader).orderBy(desc(dealsharePoHeader.created_at));\n    \n    const result = [];\n    for (const po of pos) {\n      const poItems = await db.select().from(dealsharePoItems).where(eq(dealsharePoItems.po_header_id, po.id));\n      result.push({\n        ...po,\n        poItems\n      });\n    }\n    \n    return result;\n  }\n\n  async getDealsharePoById(id: number): Promise<(DealsharePoHeader & { poItems: DealsharePoItems[] }) | undefined> {\n    const [po] = await db.select().from(dealsharePoHeader).where(eq(dealsharePoHeader.id, id));\n    \n    if (!po) {\n      return undefined;\n    }\n\n    const poItems = await db.select().from(dealsharePoItems).where(eq(dealsharePoItems.po_header_id, po.id));\n    \n    return {\n      ...po,\n      poItems\n    };\n  }\n\n  async getDealsharePoByNumber(poNumber: string): Promise<DealsharePoHeader | undefined> {\n    const [po] = await db.select().from(dealsharePoHeader).where(eq(dealsharePoHeader.po_number, poNumber));\n    return po || undefined;\n  }\n\n  async createDealsharePo(header: InsertDealsharePoHeader, items: InsertDealsharePoItems[]): Promise<DealsharePoHeader> {\n    return await db.transaction(async (tx) => {\n      const [createdPo] = await tx.insert(dealsharePoHeader).values(header).returning();\n      \n      if (items.length > 0) {\n        const itemsWithPoId = items.map(item => ({\n          ...item,\n          po_header_id: createdPo.id\n        }));\n        await tx.insert(dealsharePoItems).values(itemsWithPoId);\n      }\n      \n      return createdPo;\n    });\n  }\n\n  async updateDealsharePo(id: number, header: Partial<InsertDealsharePoHeader>, items?: InsertDealsharePoItems[]): Promise<DealsharePoHeader> {\n    return await db.transaction(async (tx) => {\n      const [updatedPo] = await tx\n        .update(dealsharePoHeader)\n        .set({ ...header, updated_at: new Date() })\n        .where(eq(dealsharePoHeader.id, id))\n        .returning();\n\n      if (items && items.length > 0) {\n        await tx.delete(dealsharePoItems).where(eq(dealsharePoItems.po_header_id, id));\n        \n        const itemsWithPoId = items.map(item => ({\n          ...item,\n          po_header_id: id\n        }));\n        await tx.insert(dealsharePoItems).values(itemsWithPoId);\n      }\n\n      return updatedPo;\n    });\n  }\n\n  async deleteDealsharePo(id: number): Promise<void> {\n    await db.transaction(async (tx) => {\n      await tx.delete(dealsharePoItems).where(eq(dealsharePoItems.po_header_id, id));\n      await tx.delete(dealsharePoHeader).where(eq(dealsharePoHeader.id, id));\n    });\n  }\n\n  // Secondary Sales methods\n  async getAllSecondarySales(platform?: string, businessUnit?: string): Promise<(SecondarySalesHeader & { salesItems: SecondarySalesItems[] })[]> {\n    let query = db.select().from(secondarySalesHeader);\n    \n    if (platform || businessUnit) {\n      const conditions = [];\n      if (platform) conditions.push(eq(secondarySalesHeader.platform, platform));\n      if (businessUnit) conditions.push(eq(secondarySalesHeader.business_unit, businessUnit));\n      query = query.where(and(...conditions));\n    }\n    \n    const sales = await query.orderBy(desc(secondarySalesHeader.created_at));\n    \n    const result = [];\n    for (const sale of sales) {\n      const salesItems = await db.select().from(secondarySalesItems).where(eq(secondarySalesItems.header_id, sale.id));\n      result.push({\n        ...sale,\n        salesItems\n      });\n    }\n    \n    return result;\n  }\n\n  async getSecondarySalesById(id: number): Promise<(SecondarySalesHeader & { salesItems: SecondarySalesItems[] }) | undefined> {\n    const [sale] = await db.select().from(secondarySalesHeader).where(eq(secondarySalesHeader.id, id));\n    \n    if (!sale) {\n      return undefined;\n    }\n\n    const salesItems = await db.select().from(secondarySalesItems).where(eq(secondarySalesItems.header_id, sale.id));\n    \n    return {\n      ...sale,\n      salesItems\n    };\n  }\n\n  async createSecondarySales(header: InsertSecondarySalesHeader, items: InsertSecondarySalesItems[]): Promise<SecondarySalesHeader> {\n    return await db.transaction(async (tx) => {\n      const [createdSale] = await tx.insert(secondarySalesHeader).values(header).returning();\n      \n      if (items.length > 0) {\n        const itemsWithHeaderId = items.map(item => ({\n          ...item,\n          header_id: createdSale.id\n        }));\n        await tx.insert(secondarySalesItems).values(itemsWithHeaderId);\n      }\n      \n      return createdSale;\n    });\n  }\n\n  async updateSecondarySales(id: number, header: Partial<InsertSecondarySalesHeader>, items?: InsertSecondarySalesItems[]): Promise<SecondarySalesHeader> {\n    return await db.transaction(async (tx) => {\n      const [updatedSale] = await tx\n        .update(secondarySalesHeader)\n        .set({ ...header, updated_at: new Date() })\n        .where(eq(secondarySalesHeader.id, id))\n        .returning();\n\n      if (items && items.length > 0) {\n        await tx.delete(secondarySalesItems).where(eq(secondarySalesItems.header_id, id));\n        \n        const itemsWithHeaderId = items.map(item => ({\n          ...item,\n          header_id: id\n        }));\n        await tx.insert(secondarySalesItems).values(itemsWithHeaderId);\n      }\n\n      return updatedSale;\n    });\n  }\n\n  async deleteSecondarySales(id: number): Promise<void> {\n    await db.transaction(async (tx) => {\n      await tx.delete(secondarySalesItems).where(eq(secondarySalesItems.header_id, id));\n      await tx.delete(secondarySalesHeader).where(eq(secondarySalesHeader.id, id));\n    });\n  }\n\n  // Specific Secondary Sales table methods\n  async createScAmJwDaily(items: InsertScAmJwDaily[]): Promise<ScAmJwDaily[]> {\n    return await db.insert(scAmJwDaily).values(items).returning();\n  }\n\n  async createScAmJwRange(items: InsertScAmJwRange[]): Promise<ScAmJwRange[]> {\n    return await db.insert(scAmJwRange).values(items).returning();\n  }\n\n  async createScAmJmDaily(items: InsertScAmJmDaily[]): Promise<ScAmJmDaily[]> {\n    return await db.insert(scAmJmDaily).values(items).returning();\n  }\n\n  async createScAmJmRange(items: InsertScAmJmRange[]): Promise<ScAmJmRange[]> {\n    return await db.insert(scAmJmRange).values(items).returning();\n  }\n\n  async getScAmJwDaily(dateStart?: string, dateEnd?: string): Promise<ScAmJwDaily[]> {\n    if (dateStart && dateEnd) {\n      return await db.select().from(scAmJwDaily)\n        .where(\n          and(\n            gte(scAmJwDaily.report_date, new Date(dateStart)),\n            lte(scAmJwDaily.report_date, new Date(dateEnd))\n          )\n        )\n        .orderBy(desc(scAmJwDaily.report_date));\n    } else if (dateStart) {\n      return await db.select().from(scAmJwDaily)\n        .where(eq(scAmJwDaily.report_date, new Date(dateStart)))\n        .orderBy(desc(scAmJwDaily.report_date));\n    }\n    \n    return await db.select().from(scAmJwDaily).orderBy(desc(scAmJwDaily.report_date));\n  }\n\n  async getScAmJwRange(dateStart?: string, dateEnd?: string): Promise<ScAmJwRange[]> {\n    if (dateStart && dateEnd) {\n      return await db.select().from(scAmJwRange)\n        .where(\n          and(\n            gte(scAmJwRange.period_start, new Date(dateStart)),\n            lte(scAmJwRange.period_end, new Date(dateEnd))\n          )\n        )\n        .orderBy(desc(scAmJwRange.period_start));\n    }\n    \n    return await db.select().from(scAmJwRange).orderBy(desc(scAmJwRange.period_start));\n  }\n\n  async getScAmJmDaily(dateStart?: string, dateEnd?: string): Promise<ScAmJmDaily[]> {\n    if (dateStart && dateEnd) {\n      return await db.select().from(scAmJmDaily)\n        .where(\n          and(\n            gte(scAmJmDaily.report_date, new Date(dateStart)),\n            lte(scAmJmDaily.report_date, new Date(dateEnd))\n          )\n        )\n        .orderBy(desc(scAmJmDaily.report_date));\n    } else if (dateStart) {\n      return await db.select().from(scAmJmDaily)\n        .where(eq(scAmJmDaily.report_date, new Date(dateStart)))\n        .orderBy(desc(scAmJmDaily.report_date));\n    }\n    \n    return await db.select().from(scAmJmDaily).orderBy(desc(scAmJmDaily.report_date));\n  }\n\n  async getScAmJmRange(dateStart?: string, dateEnd?: string): Promise<ScAmJmRange[]> {\n    if (dateStart && dateEnd) {\n      return await db.select().from(scAmJmRange)\n        .where(\n          and(\n            gte(scAmJmRange.period_start, new Date(dateStart)),\n            lte(scAmJmRange.period_end, new Date(dateEnd))\n          )\n        )\n        .orderBy(desc(scAmJmRange.period_start));\n    }\n    \n    return await db.select().from(scAmJmRange).orderBy(desc(scAmJmRange.period_start));\n  }\n\n  // New secondary sales platform methods\n  async createScZeptoJmDaily(items: InsertZeptoSecondarySalesItem[]): Promise<ZeptoSecondarySalesItem[]> {\n    return await db.insert(scZeptoJmDaily).values(items).returning();\n  }\n\n  async createScZeptoJmRange(items: InsertZeptoSecondarySalesItem[]): Promise<ZeptoSecondarySalesItem[]> {\n    return await db.insert(scZeptoJmRange).values(items).returning();\n  }\n\n  async createScBlinkitJmDaily(items: InsertBlinkitSecondarySalesItem[]): Promise<BlinkitSecondarySalesItem[]> {\n    return await db.insert(scBlinkitJmDaily).values(items).returning();\n  }\n\n  async createScBlinkitJmRange(items: InsertBlinkitSecondarySalesItem[]): Promise<BlinkitSecondarySalesItem[]> {\n    return await db.insert(scBlinkitJmRange).values(items).returning();\n  }\n\n  async createScSwiggyJmDaily(items: InsertSwiggySecondarySalesItem[]): Promise<SwiggySecondarySalesItem[]> {\n    return await db.insert(scSwiggyJmDaily).values(items).returning();\n  }\n\n  async createScSwiggyJmRange(items: InsertSwiggySecondarySalesItem[]): Promise<SwiggySecondarySalesItem[]> {\n    return await db.insert(scSwiggyJmRange).values(items).returning();\n  }\n\n  async createScJioMartSaleJmDaily(items: InsertJioMartSaleSecondarySalesItem[]): Promise<JioMartSaleSecondarySalesItem[]> {\n    return await db.insert(scJioMartSaleJmDaily).values(items).returning();\n  }\n\n  async createScJioMartSaleJmRange(items: InsertJioMartSaleSecondarySalesItem[]): Promise<JioMartSaleSecondarySalesItem[]> {\n    return await db.insert(scJioMartSaleJmRange).values(items).returning();\n  }\n\n  async createScJioMartCancelJmDaily(items: InsertJioMartCancelSecondarySalesItem[]): Promise<JioMartCancelSecondarySalesItem[]> {\n    return await db.insert(scJioMartCancelJmDaily).values(items).returning();\n  }\n\n  async createScJioMartCancelJmRange(items: InsertJioMartCancelSecondarySalesItem[]): Promise<JioMartCancelSecondarySalesItem[]> {\n    return await db.insert(scJioMartCancelJmRange).values(items).returning();\n  }\n\n  async createScBigBasketJmDaily(items: InsertBigBasketSecondarySalesItem[]): Promise<BigBasketSecondarySalesItem[]> {\n    return await db.insert(scBigBasketJmDaily).values(items).returning();\n  }\n\n  async createScBigBasketJmRange(items: InsertBigBasketSecondarySalesItem[]): Promise<BigBasketSecondarySalesItem[]> {\n    return await db.insert(scBigBasketJmRange).values(items).returning();\n  }\n\n  // Inventory Management methods\n  async getAllInventory(platform?: string, businessUnit?: string): Promise<any[]> {\n    // For now, return an empty array since we only support Jio Mart\n    // This can be expanded when more platforms are added\n    return [];\n  }\n\n  async getInventoryById(id: number): Promise<any> {\n    // Check both daily and range tables for Jio Mart inventory\n    const dailyResult = await db.select().from(invJioMartJmDaily).where(eq(invJioMartJmDaily.id, id));\n    if (dailyResult.length > 0) {\n      return { ...dailyResult[0], type: 'daily' };\n    }\n\n    const rangeResult = await db.select().from(invJioMartJmRange).where(eq(invJioMartJmRange.id, id));\n    if (rangeResult.length > 0) {\n      return { ...rangeResult[0], type: 'range' };\n    }\n\n    return undefined;\n  }\n\n  async createInventoryJioMartJmDaily(items: InsertInvJioMartJmDaily[]): Promise<InvJioMartJmDaily[]> {\n    return await db.insert(invJioMartJmDaily).values(items).returning();\n  }\n\n  async createInventoryJioMartJmRange(items: InsertInvJioMartJmRange[]): Promise<InvJioMartJmRange[]> {\n    return await db.insert(invJioMartJmRange).values(items).returning();\n  }\n\n  async createInventoryBlinkitJmDaily(items: InsertBlinkitInventoryItem[]): Promise<BlinkitInventoryItem[]> {\n    return await db.insert(invBlinkitJmDaily).values(items).returning();\n  }\n\n  async createInventoryBlinkitJmRange(items: InsertBlinkitInventoryItem[]): Promise<BlinkitInventoryItem[]> {\n    return await db.insert(invBlinkitJmRange).values(items).returning();\n  }\n\n  // Amazon Inventory methods\n  async createInventoryAmazonJmDaily(items: any[]): Promise<any[]> {\n    return await db.insert(invAmazonJmDaily).values(items).returning();\n  }\n\n  async createInventoryAmazonJmRange(items: any[]): Promise<any[]> {\n    return await db.insert(invAmazonJmRange).values(items).returning();\n  }\n\n  async createInventoryAmazonJwDaily(items: any[]): Promise<any[]> {\n    return await db.insert(invAmazonJwDaily).values(items).returning();\n  }\n\n  async createInventoryAmazonJwRange(items: any[]): Promise<any[]> {\n    return await db.insert(invAmazonJwRange).values(items).returning();\n  }\n\n  // Swiggy Inventory JM Daily\n  async createInventorySwiggyJmDaily(items: any[]): Promise<SwiggyInventoryItem[]> {\n    return await db.insert(invSwiggyJmDaily).values(items).returning();\n  }\n\n  // Swiggy Inventory JM Range\n  async createInventorySwiggyJmRange(items: any[]): Promise<SwiggyInventoryItem[]> {\n    return await db.insert(invSwiggyJmRange).values(items).returning();\n  }\n\n  // FlipKart Inventory JM Daily\n  async createInventoryFlipkartJmDaily(items: InsertFlipkartInventoryDaily[]): Promise<FlipkartInventoryDaily[]> {\n    return await db.insert(invFlipkartJmDaily).values(items).returning();\n  }\n\n  // FlipKart Inventory JM Range  \n  async createInventoryFlipkartJmRange(items: InsertFlipkartInventoryRange[]): Promise<FlipkartInventoryRange[]> {\n    return await db.insert(invFlipkartJmRange).values(items).returning();\n  }\n\n  // Zepto Inventory JM Daily\n  async createInventoryZeptoJmDaily(items: InsertZeptoInventoryDaily[]): Promise<ZeptoInventoryDaily[]> {\n    return await db.insert(invZeptoJmDaily).values(items).returning();\n  }\n\n  // Zepto Inventory JM Range  \n  async createInventoryZeptoJmRange(items: InsertZeptoInventoryRange[]): Promise<ZeptoInventoryRange[]> {\n    return await db.insert(invZeptoJmRange).values(items).returning();\n  }\n\n  // BigBasket Inventory JM Daily\n  async createInventoryBigBasketJmDaily(items: InsertBigBasketInventoryDaily[]): Promise<BigBasketInventoryDaily[]> {\n    return await db.insert(invBigBasketJmDaily).values(items).returning();\n  }\n\n  // BigBasket Inventory JM Range  \n  async createInventoryBigBasketJmRange(items: InsertBigBasketInventoryRange[]): Promise<BigBasketInventoryRange[]> {\n    return await db.insert(invBigBasketJmRange).values(items).returning();\n  }\n\n  async updateInventory(id: number, header: any, items: any): Promise<any> {\n    // This would need to be implemented based on specific requirements\n    // For now, return a placeholder\n    throw new Error(\"Inventory update not yet implemented\");\n  }\n\n  async deleteInventory(id: number): Promise<void> {\n    // Try to delete from both tables\n    await db.delete(invJioMartJmDaily).where(eq(invJioMartJmDaily.id, id));\n    await db.delete(invJioMartJmRange).where(eq(invJioMartJmRange.id, id));\n  }\n\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":62702},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, serial } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// File Upload Tracking Table for Duplicate Prevention\nexport const fileUploadTracking = pgTable(\"file_upload_tracking\", {\n  id: serial(\"id\").primaryKey(),\n  file_hash: varchar(\"file_hash\", { length: 64 }).notNull(),\n  original_filename: text(\"original_filename\").notNull(),\n  platform: varchar(\"platform\", { length: 50 }).notNull(),\n  business_unit: varchar(\"business_unit\", { length: 50 }).notNull(),\n  period_type: varchar(\"period_type\", { length: 20 }).notNull(),\n  upload_type: varchar(\"upload_type\", { length: 50 }).notNull(), // 'inventory', 'secondary-sales', 'po'\n  uploaded_at: timestamp(\"uploaded_at\").defaultNow(),\n  file_size: integer(\"file_size\"),\n  uploader_info: text(\"uploader_info\")\n});\n\n// SAP Item Master Table\nexport const sapItemMst = pgTable(\"sap_item_mst\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  itemcode: varchar(\"itemcode\", { length: 50 }).notNull().unique(),\n  itemname: text(\"itemname\").notNull(),\n  type: varchar(\"type\", { length: 50 }),\n  itemgroup: varchar(\"itemgroup\", { length: 100 }),\n  variety: varchar(\"variety\", { length: 100 }),\n  subgroup: varchar(\"subgroup\", { length: 100 }),\n  brand: varchar(\"brand\", { length: 100 }),\n  uom: varchar(\"uom\", { length: 20 }),\n  taxrate: decimal(\"taxrate\", { precision: 5, scale: 2 }),\n  unitsize: varchar(\"unitsize\", { length: 50 }),\n  is_litre: boolean(\"is_litre\").default(false),\n  case_pack: integer(\"case_pack\")\n});\n\n// SAP Item Master API Table (synchronized from SQL Server)\nexport const sapItemMstApi = pgTable(\"sap_item_mst_api\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  itemcode: varchar(\"itemcode\", { length: 50 }).notNull().unique(),\n  itemname: text(\"itemname\").notNull(),\n  type: varchar(\"type\", { length: 50 }),\n  itemgroup: varchar(\"itemgroup\", { length: 100 }),\n  variety: varchar(\"variety\", { length: 100 }),\n  subgroup: varchar(\"subgroup\", { length: 100 }),\n  brand: varchar(\"brand\", { length: 100 }),\n  uom: varchar(\"uom\", { length: 20 }),\n  taxrate: decimal(\"taxrate\", { precision: 5, scale: 2 }),\n  unitsize: varchar(\"unitsize\", { length: 50 }),\n  is_litre: boolean(\"is_litre\").default(false),\n  case_pack: integer(\"case_pack\"),\n  last_synced: timestamp(\"last_synced\").defaultNow(),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Platform Master Table\nexport const pfMst = pgTable(\"pf_mst\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  pf_name: varchar(\"pf_name\", { length: 100 }).notNull().unique()\n});\n\n// Platform Item Master Table\nexport const pfItemMst = pgTable(\"pf_item_mst\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  pf_itemcode: varchar(\"pf_itemcode\", { length: 100 }).notNull(),\n  pf_itemname: text(\"pf_itemname\").notNull(),\n  pf_id: integer(\"pf_id\").notNull().references(() => pfMst.id),\n  sap_id: integer(\"sap_id\").notNull().references(() => sapItemMst.id)\n});\n\n// Platform PO Table\nexport const pfPo = pgTable(\"pf_po\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_number: varchar(\"po_number\", { length: 100 }).notNull().unique(),\n  platform: integer(\"platform\").notNull().references(() => pfMst.id),\n  serving_distributor: varchar(\"serving_distributor\", { length: 200 }),\n  order_date: timestamp(\"order_date\").notNull(),\n  expiry_date: timestamp(\"expiry_date\"),\n  appointment_date: timestamp(\"appointment_date\"),\n  region: varchar(\"region\", { length: 50 }),\n  state: varchar(\"state\", { length: 50 }),\n  city: varchar(\"city\", { length: 100 }),\n  area: varchar(\"area\", { length: 100 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default('Open'),\n  attachment: text(\"attachment\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Platform Order Items Table\nexport const pfOrderItems = pgTable(\"pf_order_items\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_id: integer(\"po_id\").notNull().references(() => pfPo.id, { onDelete: \"cascade\" }),\n  item_name: text(\"item_name\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  sap_code: varchar(\"sap_code\", { length: 50 }),\n  category: varchar(\"category\", { length: 100 }),\n  subcategory: varchar(\"subcategory\", { length: 100 }),\n  basic_rate: decimal(\"basic_rate\", { precision: 10, scale: 2 }).notNull(),\n  gst_rate: decimal(\"gst_rate\", { precision: 5, scale: 2 }).notNull(),\n  landing_rate: decimal(\"landing_rate\", { precision: 10, scale: 2 }).notNull(),\n  total_litres: decimal(\"total_litres\", { precision: 10, scale: 3 }),\n  status: varchar(\"status\", { length: 50 }).default('Pending'),\n  hsn_code: varchar(\"hsn_code\", { length: 20 })\n});\n\n// Distributor Master Table (for managing distributor information)\nexport const distributorMst = pgTable(\"distributor_mst\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  distributor_name: varchar(\"distributor_name\", { length: 200 }).notNull().unique(),\n  distributor_code: varchar(\"distributor_code\", { length: 50 }).unique(),\n  contact_person: varchar(\"contact_person\", { length: 100 }),\n  phone: varchar(\"phone\", { length: 20 }),\n  email: varchar(\"email\", { length: 100 }),\n  address: text(\"address\"),\n  city: varchar(\"city\", { length: 100 }),\n  state: varchar(\"state\", { length: 50 }),\n  region: varchar(\"region\", { length: 50 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default('Active'),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Distributor PO Table\nexport const distributorPo = pgTable(\"distributor_po\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_number: varchar(\"po_number\", { length: 100 }).notNull().unique(),\n  distributor_id: integer(\"distributor_id\").notNull().references(() => distributorMst.id),\n  order_date: timestamp(\"order_date\").notNull(),\n  expiry_date: timestamp(\"expiry_date\"),\n  appointment_date: timestamp(\"appointment_date\"),\n  region: varchar(\"region\", { length: 50 }),\n  state: varchar(\"state\", { length: 50 }),\n  city: varchar(\"city\", { length: 100 }),\n  area: varchar(\"area\", { length: 100 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default('Open'),\n  attachment: text(\"attachment\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Distributor Order Items Table\nexport const distributorOrderItems = pgTable(\"distributor_order_items\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_id: integer(\"po_id\").notNull().references(() => distributorPo.id, { onDelete: \"cascade\" }),\n  item_name: text(\"item_name\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  sap_code: varchar(\"sap_code\", { length: 50 }),\n  category: varchar(\"category\", { length: 100 }),\n  subcategory: varchar(\"subcategory\", { length: 100 }),\n  basic_rate: decimal(\"basic_rate\", { precision: 10, scale: 2 }).notNull(),\n  gst_rate: decimal(\"gst_rate\", { precision: 5, scale: 2 }).notNull(),\n  landing_rate: decimal(\"landing_rate\", { precision: 10, scale: 2 }).notNull(),\n  total_litres: decimal(\"total_litres\", { precision: 10, scale: 3 }),\n  status: varchar(\"status\", { length: 50 }).default('Pending'),\n  hsn_code: varchar(\"hsn_code\", { length: 20 })\n});\n\n// Insert and Select schemas for new table\nexport const insertSapItemMstApiSchema = createInsertSchema(sapItemMstApi).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n  last_synced: true,\n});\nexport type InsertSapItemMstApi = z.infer<typeof insertSapItemMstApiSchema>;\nexport type SapItemMstApi = typeof sapItemMstApi.$inferSelect;\n\n// Relations\nexport const sapItemMstRelations = relations(sapItemMst, ({ many }) => ({\n  pfItems: many(pfItemMst)\n}));\n\nexport const pfMstRelations = relations(pfMst, ({ many }) => ({\n  pfItems: many(pfItemMst),\n  pfPos: many(pfPo)\n}));\n\nexport const pfItemMstRelations = relations(pfItemMst, ({ one }) => ({\n  platform: one(pfMst, {\n    fields: [pfItemMst.pf_id],\n    references: [pfMst.id]\n  }),\n  sapItem: one(sapItemMst, {\n    fields: [pfItemMst.sap_id],\n    references: [sapItemMst.id]\n  })\n}));\n\nexport const pfPoRelations = relations(pfPo, ({ one, many }) => ({\n  platform: one(pfMst, {\n    fields: [pfPo.platform],\n    references: [pfMst.id]\n  }),\n  orderItems: many(pfOrderItems)\n}));\n\nexport const pfOrderItemsRelations = relations(pfOrderItems, ({ one }) => ({\n  po: one(pfPo, {\n    fields: [pfOrderItems.po_id],\n    references: [pfPo.id]\n  })\n}));\n\n// Distributor relations\nexport const distributorMstRelations = relations(distributorMst, ({ many }) => ({\n  distributorPos: many(distributorPo)\n}));\n\nexport const distributorPoRelations = relations(distributorPo, ({ one, many }) => ({\n  distributor: one(distributorMst, {\n    fields: [distributorPo.distributor_id],\n    references: [distributorMst.id]\n  }),\n  orderItems: many(distributorOrderItems)\n}));\n\nexport const distributorOrderItemsRelations = relations(distributorOrderItems, ({ one }) => ({\n  po: one(distributorPo, {\n    fields: [distributorOrderItems.po_id],\n    references: [distributorPo.id]\n  })\n}));\n\n// Insert schemas\nexport const insertSapItemMstSchema = createInsertSchema(sapItemMst).omit({ id: true });\nexport const insertPfMstSchema = createInsertSchema(pfMst).omit({ id: true });\nexport const insertPfItemMstSchema = createInsertSchema(pfItemMst).omit({ id: true });\nexport const insertPfPoSchema = createInsertSchema(pfPo).omit({ id: true, created_at: true, updated_at: true });\nexport const insertPfOrderItemsSchema = createInsertSchema(pfOrderItems).omit({ id: true, po_id: true });\n\n// Types\nexport type SapItemMst = typeof sapItemMst.$inferSelect;\nexport type InsertSapItemMst = z.infer<typeof insertSapItemMstSchema>;\nexport type PfMst = typeof pfMst.$inferSelect;\nexport type InsertPfMst = z.infer<typeof insertPfMstSchema>;\nexport type PfItemMst = typeof pfItemMst.$inferSelect;\nexport type InsertPfItemMst = z.infer<typeof insertPfItemMstSchema>;\nexport type PfPo = typeof pfPo.$inferSelect;\nexport type InsertPfPo = z.infer<typeof insertPfPoSchema>;\nexport type PfOrderItems = typeof pfOrderItems.$inferSelect;\nexport type InsertPfOrderItems = z.infer<typeof insertPfOrderItemsSchema>;\n\n// Distributor insert schemas and types\nexport const insertDistributorMstSchema = createInsertSchema(distributorMst).omit({ id: true, created_at: true, updated_at: true });\nexport const insertDistributorPoSchema = createInsertSchema(distributorPo).omit({ id: true, created_at: true, updated_at: true });\nexport const insertDistributorOrderItemsSchema = createInsertSchema(distributorOrderItems).omit({ id: true, po_id: true });\n\nexport type DistributorMst = typeof distributorMst.$inferSelect;\nexport type InsertDistributorMst = z.infer<typeof insertDistributorMstSchema>;\nexport type DistributorPo = typeof distributorPo.$inferSelect;\nexport type InsertDistributorPo = z.infer<typeof insertDistributorPoSchema>;\nexport type DistributorOrderItems = typeof distributorOrderItems.$inferSelect;\nexport type InsertDistributorOrderItems = z.infer<typeof insertDistributorOrderItemsSchema>;\n\n// Enhanced user table with profile management\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  full_name: text(\"full_name\"),\n  phone: varchar(\"phone\", { length: 20 }),\n  role: varchar(\"role\", { length: 20 }).default(\"user\"),\n  department: varchar(\"department\", { length: 100 }).default(\"E-Com\"),\n  is_active: boolean(\"is_active\").default(true),\n  last_login: timestamp(\"last_login\"),\n  password_changed_at: timestamp(\"password_changed_at\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n  last_login: true,\n  password_changed_at: true\n}).extend({\n  department: z.enum([\"E-Com\", \"IT Six\"]).default(\"E-Com\"),\n});\n\nexport const loginUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\")\n});\n\nexport const updateUserSchema = createInsertSchema(users).partial().omit({\n  id: true,\n  username: true,\n  password: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(6, \"New password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Confirm password must be at least 6 characters\")\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"New password and confirm password don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type UpdateUser = z.infer<typeof updateUserSchema>;\nexport type ChangePassword = z.infer<typeof changePasswordSchema>;\n\n// Flipkart Grocery PO Header Table\nexport const flipkartGroceryPoHeader = pgTable(\"flipkart_grocery_po_header\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_number: varchar(\"po_number\", { length: 50 }).notNull().unique(),\n  supplier_name: text(\"supplier_name\").notNull(),\n  supplier_address: text(\"supplier_address\"),\n  supplier_contact: varchar(\"supplier_contact\", { length: 20 }),\n  supplier_email: varchar(\"supplier_email\", { length: 100 }),\n  supplier_gstin: varchar(\"supplier_gstin\", { length: 20 }),\n  billed_to_address: text(\"billed_to_address\"),\n  billed_to_gstin: varchar(\"billed_to_gstin\", { length: 20 }),\n  shipped_to_address: text(\"shipped_to_address\"),\n  shipped_to_gstin: varchar(\"shipped_to_gstin\", { length: 20 }),\n  nature_of_supply: varchar(\"nature_of_supply\", { length: 50 }),\n  nature_of_transaction: varchar(\"nature_of_transaction\", { length: 50 }),\n  po_expiry_date: timestamp(\"po_expiry_date\"),\n  category: varchar(\"category\", { length: 100 }),\n  order_date: timestamp(\"order_date\").notNull(),\n  mode_of_payment: varchar(\"mode_of_payment\", { length: 50 }),\n  contract_ref_id: varchar(\"contract_ref_id\", { length: 100 }),\n  contract_version: varchar(\"contract_version\", { length: 10 }),\n  credit_term: varchar(\"credit_term\", { length: 100 }),\n  total_quantity: integer(\"total_quantity\"),\n  total_taxable_value: decimal(\"total_taxable_value\", { precision: 12, scale: 2 }),\n  total_tax_amount: decimal(\"total_tax_amount\", { precision: 12, scale: 2 }),\n  total_amount: decimal(\"total_amount\", { precision: 12, scale: 2 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default('Open'),\n  created_by: varchar(\"created_by\", { length: 100 }),\n  uploaded_by: varchar(\"uploaded_by\", { length: 100 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Flipkart Grocery PO Lines Table\nexport const flipkartGroceryPoLines = pgTable(\"flipkart_grocery_po_lines\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  header_id: integer(\"header_id\").notNull().references(() => flipkartGroceryPoHeader.id, { onDelete: \"cascade\" }),\n  line_number: integer(\"line_number\").notNull(),\n  hsn_code: varchar(\"hsn_code\", { length: 20 }),\n  fsn_isbn: varchar(\"fsn_isbn\", { length: 50 }),\n  quantity: integer(\"quantity\").notNull(),\n  pending_quantity: integer(\"pending_quantity\"),\n  uom: varchar(\"uom\", { length: 20 }),\n  title: text(\"title\").notNull(),\n  brand: varchar(\"brand\", { length: 100 }),\n  type: varchar(\"type\", { length: 100 }),\n  ean: varchar(\"ean\", { length: 20 }),\n  vertical: varchar(\"vertical\", { length: 100 }),\n  required_by_date: timestamp(\"required_by_date\"),\n  supplier_mrp: decimal(\"supplier_mrp\", { precision: 10, scale: 2 }),\n  supplier_price: decimal(\"supplier_price\", { precision: 10, scale: 2 }),\n  taxable_value: decimal(\"taxable_value\", { precision: 10, scale: 2 }),\n  igst_rate: decimal(\"igst_rate\", { precision: 5, scale: 2 }),\n  igst_amount_per_unit: decimal(\"igst_amount_per_unit\", { precision: 10, scale: 2 }),\n  sgst_rate: decimal(\"sgst_rate\", { precision: 5, scale: 2 }),\n  sgst_amount_per_unit: decimal(\"sgst_amount_per_unit\", { precision: 10, scale: 2 }),\n  cgst_rate: decimal(\"cgst_rate\", { precision: 5, scale: 2 }),\n  cgst_amount_per_unit: decimal(\"cgst_amount_per_unit\", { precision: 10, scale: 2 }),\n  cess_rate: decimal(\"cess_rate\", { precision: 5, scale: 2 }),\n  cess_amount_per_unit: decimal(\"cess_amount_per_unit\", { precision: 10, scale: 2 }),\n  tax_amount: decimal(\"tax_amount\", { precision: 10, scale: 2 }),\n  total_amount: decimal(\"total_amount\", { precision: 10, scale: 2 }),\n  status: varchar(\"status\", { length: 50 }).default('Pending'),\n  created_by: varchar(\"created_by\", { length: 100 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Relations for Flipkart Grocery PO tables\nexport const flipkartGroceryPoHeaderRelations = relations(flipkartGroceryPoHeader, ({ many }) => ({\n  poLines: many(flipkartGroceryPoLines)\n}));\n\nexport const flipkartGroceryPoLinesRelations = relations(flipkartGroceryPoLines, ({ one }) => ({\n  header: one(flipkartGroceryPoHeader, {\n    fields: [flipkartGroceryPoLines.header_id],\n    references: [flipkartGroceryPoHeader.id]\n  })\n}));\n\n// Insert schemas for Flipkart Grocery PO tables\nexport const insertFlipkartGroceryPoHeaderSchema = createInsertSchema(flipkartGroceryPoHeader).omit({ \n  id: true, \n  created_at: true, \n  updated_at: true \n});\n\nexport const insertFlipkartGroceryPoLinesSchema = createInsertSchema(flipkartGroceryPoLines).omit({ \n  id: true, \n  header_id: true, \n  created_at: true, \n  updated_at: true \n});\n\n// Types for Flipkart Grocery PO tables\nexport type FlipkartGroceryPoHeader = typeof flipkartGroceryPoHeader.$inferSelect;\nexport type InsertFlipkartGroceryPoHeader = z.infer<typeof insertFlipkartGroceryPoHeaderSchema>;\nexport type FlipkartGroceryPoLines = typeof flipkartGroceryPoLines.$inferSelect;\nexport type InsertFlipkartGroceryPoLines = z.infer<typeof insertFlipkartGroceryPoLinesSchema>;\n\n// Zepto PO Schema\nexport const zeptoPoHeader = pgTable(\"zepto_po_header\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_number: varchar(\"po_number\", { length: 50 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"Open\"),\n  total_quantity: integer(\"total_quantity\").default(0),\n  total_cost_value: decimal(\"total_cost_value\", { precision: 15, scale: 2 }).default(\"0\"),\n  total_tax_amount: decimal(\"total_tax_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  total_amount: decimal(\"total_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  unique_brands: text(\"unique_brands\").array(),\n  created_by: varchar(\"created_by\", { length: 100 }),\n  uploaded_by: varchar(\"uploaded_by\", { length: 100 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const zeptoPoLines = pgTable(\"zepto_po_lines\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_header_id: integer(\"po_header_id\").references(() => zeptoPoHeader.id, { onDelete: \"cascade\" }),\n  line_number: integer(\"line_number\").notNull(),\n  po_number: varchar(\"po_number\", { length: 50 }),\n  sku: text(\"sku\"),\n  brand: varchar(\"brand\", { length: 100 }),\n  sku_id: varchar(\"sku_id\", { length: 100 }),\n  sap_id: varchar(\"sap_id\", { length: 50 }),\n  hsn_code: varchar(\"hsn_code\", { length: 20 }),\n  ean_no: varchar(\"ean_no\", { length: 50 }),\n  po_qty: integer(\"po_qty\").default(0),\n  asn_qty: integer(\"asn_qty\").default(0),\n  grn_qty: integer(\"grn_qty\").default(0),\n  remaining_qty: integer(\"remaining_qty\").default(0),\n  cost_price: decimal(\"cost_price\", { precision: 10, scale: 2 }),\n  cgst: decimal(\"cgst\", { precision: 10, scale: 2 }),\n  sgst: decimal(\"sgst\", { precision: 10, scale: 2 }),\n  igst: decimal(\"igst\", { precision: 10, scale: 2 }),\n  cess: decimal(\"cess\", { precision: 10, scale: 2 }),\n  mrp: decimal(\"mrp\", { precision: 10, scale: 2 }),\n  total_value: decimal(\"total_value\", { precision: 15, scale: 2 }),\n  status: varchar(\"status\", { length: 20 }).default(\"Pending\"),\n  created_by: varchar(\"created_by\", { length: 100 }),\n  created_at: timestamp(\"created_at\").defaultNow()\n});\n\n// Relations for Zepto PO tables\nexport const zeptoPoHeaderRelations = relations(zeptoPoHeader, ({ many }) => ({\n  poLines: many(zeptoPoLines)\n}));\n\nexport const zeptoPoLinesRelations = relations(zeptoPoLines, ({ one }) => ({\n  header: one(zeptoPoHeader, {\n    fields: [zeptoPoLines.po_header_id],\n    references: [zeptoPoHeader.id]\n  })\n}));\n\n// Insert schemas for Zepto PO tables\nexport const insertZeptoPoHeaderSchema = createInsertSchema(zeptoPoHeader).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertZeptoPoLinesSchema = createInsertSchema(zeptoPoLines).omit({\n  id: true,\n  po_header_id: true,\n  created_at: true\n});\n\n// Types for Zepto PO tables\nexport type ZeptoPoHeader = typeof zeptoPoHeader.$inferSelect;\nexport type InsertZeptoPoHeader = z.infer<typeof insertZeptoPoHeaderSchema>;\nexport type ZeptoPoLines = typeof zeptoPoLines.$inferSelect;\nexport type InsertZeptoPoLines = z.infer<typeof insertZeptoPoLinesSchema>;\n\n// City Mall PO Tables\nexport const cityMallPoHeader = pgTable(\"city_mall_po_header\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_number: varchar(\"po_number\", { length: 50 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"Open\"),\n  total_quantity: integer(\"total_quantity\").default(0),\n  total_base_amount: decimal(\"total_base_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  total_igst_amount: decimal(\"total_igst_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  total_cess_amount: decimal(\"total_cess_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  total_amount: decimal(\"total_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  unique_hsn_codes: text(\"unique_hsn_codes\").array(),\n  created_by: varchar(\"created_by\", { length: 100 }),\n  uploaded_by: varchar(\"uploaded_by\", { length: 100 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const cityMallPoLines = pgTable(\"city_mall_po_lines\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_header_id: integer(\"po_header_id\").references(() => cityMallPoHeader.id, { onDelete: \"cascade\" }),\n  line_number: integer(\"line_number\").notNull(),\n  article_id: varchar(\"article_id\", { length: 50 }),\n  article_name: text(\"article_name\"),\n  hsn_code: varchar(\"hsn_code\", { length: 20 }),\n  mrp: decimal(\"mrp\", { precision: 10, scale: 2 }),\n  base_cost_price: decimal(\"base_cost_price\", { precision: 10, scale: 2 }),\n  quantity: integer(\"quantity\").default(0),\n  base_amount: decimal(\"base_amount\", { precision: 15, scale: 2 }),\n  igst_percent: decimal(\"igst_percent\", { precision: 5, scale: 2 }),\n  cess_percent: decimal(\"cess_percent\", { precision: 5, scale: 2 }),\n  igst_amount: decimal(\"igst_amount\", { precision: 10, scale: 2 }),\n  cess_amount: decimal(\"cess_amount\", { precision: 10, scale: 2 }),\n  total_amount: decimal(\"total_amount\", { precision: 15, scale: 2 }),\n  status: varchar(\"status\", { length: 20 }).default(\"Pending\"),\n  created_by: varchar(\"created_by\", { length: 100 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations for City Mall PO tables\nexport const cityMallPoHeaderRelations = relations(cityMallPoHeader, ({ many }) => ({\n  poLines: many(cityMallPoLines)\n}));\n\nexport const cityMallPoLinesRelations = relations(cityMallPoLines, ({ one }) => ({\n  header: one(cityMallPoHeader, {\n    fields: [cityMallPoLines.po_header_id],\n    references: [cityMallPoHeader.id]\n  })\n}));\n\n// Insert schemas for City Mall PO tables\nexport const insertCityMallPoHeaderSchema = createInsertSchema(cityMallPoHeader).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertCityMallPoLinesSchema = createInsertSchema(cityMallPoLines).omit({\n  id: true,\n  po_header_id: true,\n  created_at: true\n});\n\n// Types for City Mall PO tables\nexport type CityMallPoHeader = typeof cityMallPoHeader.$inferSelect;\nexport type InsertCityMallPoHeader = z.infer<typeof insertCityMallPoHeaderSchema>;\nexport type CityMallPoLines = typeof cityMallPoLines.$inferSelect;\nexport type InsertCityMallPoLines = z.infer<typeof insertCityMallPoLinesSchema>;\n\n// Blinkit PO Tables\nexport const blinkitPoHeader = pgTable(\"blinkit_po_header\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_number: varchar(\"po_number\", { length: 50 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"Open\"),\n  total_quantity: integer(\"total_quantity\").default(0),\n  total_items: integer(\"total_items\").default(0),\n  total_basic_cost: decimal(\"total_basic_cost\", { precision: 15, scale: 2 }).default(\"0\"),\n  total_tax_amount: decimal(\"total_tax_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  total_landing_rate: decimal(\"total_landing_rate\", { precision: 15, scale: 2 }).default(\"0\"),\n  cart_discount: decimal(\"cart_discount\", { precision: 15, scale: 2 }).default(\"0\"),\n  net_amount: decimal(\"net_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  unique_hsn_codes: text(\"unique_hsn_codes\").array(),\n  created_by: varchar(\"created_by\", { length: 100 }),\n  uploaded_by: varchar(\"uploaded_by\", { length: 100 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const blinkitPoLines = pgTable(\"blinkit_po_lines\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_header_id: integer(\"po_header_id\").references(() => blinkitPoHeader.id, { onDelete: \"cascade\" }),\n  line_number: integer(\"line_number\").notNull(),\n  item_code: varchar(\"item_code\", { length: 50 }),\n  hsn_code: varchar(\"hsn_code\", { length: 20 }),\n  product_upc: varchar(\"product_upc\", { length: 50 }),\n  product_description: text(\"product_description\"),\n  grammage: varchar(\"grammage\", { length: 50 }),\n  basic_cost_price: decimal(\"basic_cost_price\", { precision: 10, scale: 2 }),\n  cgst_percent: decimal(\"cgst_percent\", { precision: 5, scale: 2 }),\n  sgst_percent: decimal(\"sgst_percent\", { precision: 5, scale: 2 }),\n  igst_percent: decimal(\"igst_percent\", { precision: 5, scale: 2 }),\n  cess_percent: decimal(\"cess_percent\", { precision: 5, scale: 2 }),\n  additional_cess: decimal(\"additional_cess\", { precision: 10, scale: 2 }),\n  tax_amount: decimal(\"tax_amount\", { precision: 10, scale: 2 }),\n  landing_rate: decimal(\"landing_rate\", { precision: 10, scale: 2 }),\n  quantity: integer(\"quantity\").default(0),\n  mrp: decimal(\"mrp\", { precision: 10, scale: 2 }),\n  margin_percent: decimal(\"margin_percent\", { precision: 5, scale: 2 }),\n  total_amount: decimal(\"total_amount\", { precision: 15, scale: 2 }),\n  status: varchar(\"status\", { length: 20 }).default(\"Active\"),\n  created_by: varchar(\"created_by\", { length: 100 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations for Blinkit PO tables\nexport const blinkitPoHeaderRelations = relations(blinkitPoHeader, ({ many }) => ({\n  poLines: many(blinkitPoLines)\n}));\n\nexport const blinkitPoLinesRelations = relations(blinkitPoLines, ({ one }) => ({\n  header: one(blinkitPoHeader, {\n    fields: [blinkitPoLines.po_header_id],\n    references: [blinkitPoHeader.id]\n  })\n}));\n\n// Insert schemas for Blinkit PO tables\nexport const insertBlinkitPoHeaderSchema = createInsertSchema(blinkitPoHeader).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertBlinkitPoLinesSchema = createInsertSchema(blinkitPoLines).omit({\n  id: true,\n  po_header_id: true,\n  created_at: true\n});\n\n// Types for Blinkit PO tables\nexport type BlinkitPoHeader = typeof blinkitPoHeader.$inferSelect;\nexport type InsertBlinkitPoHeader = z.infer<typeof insertBlinkitPoHeaderSchema>;\nexport type BlinkitPoLines = typeof blinkitPoLines.$inferSelect;\nexport type InsertBlinkitPoLines = z.infer<typeof insertBlinkitPoLinesSchema>;\n\n// Swiggy PO tables\nexport const swiggyPos = pgTable(\"swiggy_pos\", {\n  id: serial(\"id\").primaryKey(),\n  po_number: varchar(\"po_number\", { length: 100 }).notNull().unique(),\n  po_date: timestamp(\"po_date\"),\n  po_release_date: timestamp(\"po_release_date\"),\n  expected_delivery_date: timestamp(\"expected_delivery_date\"),\n  po_expiry_date: timestamp(\"po_expiry_date\"),\n  vendor_name: varchar(\"vendor_name\", { length: 255 }),\n  payment_terms: varchar(\"payment_terms\", { length: 100 }),\n  total_items: integer(\"total_items\").default(0),\n  total_quantity: integer(\"total_quantity\").default(0),\n  total_taxable_value: decimal(\"total_taxable_value\", { precision: 15, scale: 2 }),\n  total_tax_amount: decimal(\"total_tax_amount\", { precision: 15, scale: 2 }),\n  grand_total: decimal(\"grand_total\", { precision: 15, scale: 2 }),\n  unique_hsn_codes: varchar(\"unique_hsn_codes\").array(),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"),\n  created_by: varchar(\"created_by\", { length: 100 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const swiggyPoLines = pgTable(\"swiggy_po_lines\", {\n  id: serial(\"id\").primaryKey(),\n  po_id: integer(\"po_id\").references(() => swiggyPos.id, { onDelete: \"cascade\" }),\n  line_number: integer(\"line_number\").notNull(),\n  item_code: varchar(\"item_code\", { length: 100 }).notNull(),\n  item_description: text(\"item_description\"),\n  hsn_code: varchar(\"hsn_code\", { length: 20 }),\n  quantity: integer(\"quantity\").notNull(),\n  mrp: decimal(\"mrp\", { precision: 10, scale: 2 }),\n  unit_base_cost: decimal(\"unit_base_cost\", { precision: 10, scale: 3 }),\n  taxable_value: decimal(\"taxable_value\", { precision: 12, scale: 5 }),\n  cgst_rate: decimal(\"cgst_rate\", { precision: 5, scale: 2 }),\n  cgst_amount: decimal(\"cgst_amount\", { precision: 10, scale: 5 }),\n  sgst_rate: decimal(\"sgst_rate\", { precision: 5, scale: 2 }),\n  sgst_amount: decimal(\"sgst_amount\", { precision: 10, scale: 5 }),\n  igst_rate: decimal(\"igst_rate\", { precision: 5, scale: 2 }),\n  igst_amount: decimal(\"igst_amount\", { precision: 10, scale: 5 }),\n  cess_rate: decimal(\"cess_rate\", { precision: 5, scale: 2 }),\n  cess_amount: decimal(\"cess_amount\", { precision: 10, scale: 5 }),\n  additional_cess: decimal(\"additional_cess\", { precision: 10, scale: 5 }),\n  total_tax_amount: decimal(\"total_tax_amount\", { precision: 10, scale: 5 }),\n  line_total: decimal(\"line_total\", { precision: 12, scale: 5 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const swiggyPosRelations = relations(swiggyPos, ({ many }) => ({\n  poLines: many(swiggyPoLines),\n}));\n\nexport const swiggyPoLinesRelations = relations(swiggyPoLines, ({ one }) => ({\n  po: one(swiggyPos, {\n    fields: [swiggyPoLines.po_id],\n    references: [swiggyPos.id],\n  }),\n}));\n\n// Insert schemas for Swiggy PO tables\nexport const insertSwiggyPoSchema = createInsertSchema(swiggyPos).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertSwiggyPoLinesSchema = createInsertSchema(swiggyPoLines).omit({\n  id: true,\n  po_id: true,\n  created_at: true\n});\n\nexport type SwiggyPo = typeof swiggyPos.$inferSelect;\nexport type InsertSwiggyPo = z.infer<typeof insertSwiggyPoSchema>;\nexport type SwiggyPoLine = typeof swiggyPoLines.$inferSelect;\nexport type InsertSwiggyPoLine = z.infer<typeof insertSwiggyPoLinesSchema>;\n\n// BigBasket PO tables\nexport const bigbasketPoHeader = pgTable(\"bigbasket_po_header\", {\n  id: serial(\"id\").primaryKey(),\n  po_number: varchar(\"po_number\", { length: 100 }).notNull().unique(),\n  po_date: timestamp(\"po_date\"),\n  po_expiry_date: timestamp(\"po_expiry_date\"),\n  warehouse_address: text(\"warehouse_address\"),\n  delivery_address: text(\"delivery_address\"),\n  supplier_name: varchar(\"supplier_name\", { length: 255 }),\n  supplier_address: text(\"supplier_address\"),\n  supplier_gstin: varchar(\"supplier_gstin\", { length: 50 }),\n  dc_address: text(\"dc_address\"),\n  dc_gstin: varchar(\"dc_gstin\", { length: 50 }),\n  total_items: integer(\"total_items\").default(0),\n  total_quantity: integer(\"total_quantity\").default(0),\n  total_basic_cost: decimal(\"total_basic_cost\", { precision: 15, scale: 2 }),\n  total_gst_amount: decimal(\"total_gst_amount\", { precision: 15, scale: 2 }),\n  total_cess_amount: decimal(\"total_cess_amount\", { precision: 15, scale: 2 }),\n  grand_total: decimal(\"grand_total\", { precision: 15, scale: 2 }),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"),\n  created_by: varchar(\"created_by\", { length: 100 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const bigbasketPoLines = pgTable(\"bigbasket_po_lines\", {\n  id: serial(\"id\").primaryKey(),\n  po_id: integer(\"po_id\").references(() => bigbasketPoHeader.id, { onDelete: \"cascade\" }),\n  s_no: integer(\"s_no\").notNull(),\n  hsn_code: varchar(\"hsn_code\", { length: 20 }),\n  sku_code: varchar(\"sku_code\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  ean_upc_code: varchar(\"ean_upc_code\", { length: 50 }),\n  case_quantity: integer(\"case_quantity\"),\n  quantity: integer(\"quantity\").notNull(),\n  basic_cost: decimal(\"basic_cost\", { precision: 10, scale: 2 }),\n  sgst_percent: decimal(\"sgst_percent\", { precision: 5, scale: 2 }),\n  sgst_amount: decimal(\"sgst_amount\", { precision: 10, scale: 2 }),\n  cgst_percent: decimal(\"cgst_percent\", { precision: 5, scale: 2 }),\n  cgst_amount: decimal(\"cgst_amount\", { precision: 10, scale: 2 }),\n  igst_percent: decimal(\"igst_percent\", { precision: 5, scale: 2 }),\n  igst_amount: decimal(\"igst_amount\", { precision: 10, scale: 2 }),\n  gst_percent: decimal(\"gst_percent\", { precision: 5, scale: 2 }),\n  gst_amount: decimal(\"gst_amount\", { precision: 10, scale: 2 }),\n  cess_percent: decimal(\"cess_percent\", { precision: 5, scale: 2 }),\n  cess_value: decimal(\"cess_value\", { precision: 10, scale: 2 }),\n  state_cess_percent: decimal(\"state_cess_percent\", { precision: 5, scale: 2 }),\n  state_cess: decimal(\"state_cess\", { precision: 10, scale: 2 }),\n  landing_cost: decimal(\"landing_cost\", { precision: 10, scale: 2 }),\n  mrp: decimal(\"mrp\", { precision: 10, scale: 2 }),\n  total_value: decimal(\"total_value\", { precision: 12, scale: 2 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const bigbasketPoHeaderRelations = relations(bigbasketPoHeader, ({ many }) => ({\n  poLines: many(bigbasketPoLines),\n}));\n\nexport const bigbasketPoLinesRelations = relations(bigbasketPoLines, ({ one }) => ({\n  po: one(bigbasketPoHeader, {\n    fields: [bigbasketPoLines.po_id],\n    references: [bigbasketPoHeader.id],\n  }),\n}));\n\n// Insert schemas for BigBasket PO tables\nexport const insertBigbasketPoHeaderSchema = createInsertSchema(bigbasketPoHeader).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertBigbasketPoLinesSchema = createInsertSchema(bigbasketPoLines).omit({\n  id: true,\n  po_id: true,\n  created_at: true\n});\n\nexport type BigbasketPoHeader = typeof bigbasketPoHeader.$inferSelect;\nexport type InsertBigbasketPoHeader = z.infer<typeof insertBigbasketPoHeaderSchema>;\nexport type BigbasketPoLines = typeof bigbasketPoLines.$inferSelect;\nexport type InsertBigbasketPoLines = z.infer<typeof insertBigbasketPoLinesSchema>;\n\n// Zomato PO Header Table\nexport const zomatoPoHeader = pgTable(\"zomato_po_header\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_number: varchar(\"po_number\", { length: 100 }).notNull().unique(),\n  po_date: timestamp(\"po_date\"),\n  expected_delivery_date: timestamp(\"expected_delivery_date\"),\n  account_number: varchar(\"account_number\", { length: 50 }),\n  vendor_id: varchar(\"vendor_id\", { length: 50 }),\n  bill_from_name: text(\"bill_from_name\"),\n  bill_from_address: text(\"bill_from_address\"),\n  bill_from_gstin: varchar(\"bill_from_gstin\", { length: 20 }),\n  bill_from_phone: varchar(\"bill_from_phone\", { length: 20 }),\n  bill_to_name: text(\"bill_to_name\"),\n  bill_to_address: text(\"bill_to_address\"),\n  bill_to_gstin: varchar(\"bill_to_gstin\", { length: 20 }),\n  ship_from_name: text(\"ship_from_name\"),\n  ship_from_address: text(\"ship_from_address\"),\n  ship_from_gstin: varchar(\"ship_from_gstin\", { length: 20 }),\n  ship_to_name: text(\"ship_to_name\"),\n  ship_to_address: text(\"ship_to_address\"),\n  ship_to_gstin: varchar(\"ship_to_gstin\", { length: 20 }),\n  total_items: integer(\"total_items\").default(0),\n  total_quantity: decimal(\"total_quantity\", { precision: 15, scale: 2 }).default(\"0\"),\n  grand_total: decimal(\"grand_total\", { precision: 15, scale: 2 }).default(\"0\"),\n  total_tax_amount: decimal(\"total_tax_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  uploaded_by: varchar(\"uploaded_by\", { length: 100 }).default(\"admin\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Zomato PO Items Table\nexport const zomatoPoItems = pgTable(\"zomato_po_items\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_header_id: integer(\"po_header_id\").notNull().references(() => zomatoPoHeader.id, { onDelete: \"cascade\" }),\n  line_number: integer(\"line_number\").notNull(),\n  product_number: varchar(\"product_number\", { length: 100 }),\n  product_name: text(\"product_name\"),\n  hsn_code: varchar(\"hsn_code\", { length: 20 }),\n  quantity_ordered: decimal(\"quantity_ordered\", { precision: 15, scale: 2 }),\n  price_per_unit: decimal(\"price_per_unit\", { precision: 15, scale: 2 }),\n  uom: varchar(\"uom\", { length: 50 }),\n  gst_rate: decimal(\"gst_rate\", { precision: 5, scale: 4 }),\n  total_tax_amount: decimal(\"total_tax_amount\", { precision: 15, scale: 2 }),\n  line_total: decimal(\"line_total\", { precision: 15, scale: 2 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Zomato Relations\nexport const zomatoPoHeaderRelations = relations(zomatoPoHeader, ({ many }) => ({\n  poItems: many(zomatoPoItems),\n}));\n\nexport const zomatoPoItemsRelations = relations(zomatoPoItems, ({ one }) => ({\n  po: one(zomatoPoHeader, {\n    fields: [zomatoPoItems.po_header_id],\n    references: [zomatoPoHeader.id],\n  }),\n}));\n\n// Insert schemas for Zomato PO tables\nexport const insertZomatoPoHeaderSchema = createInsertSchema(zomatoPoHeader).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertZomatoPoItemsSchema = createInsertSchema(zomatoPoItems).omit({\n  id: true,\n  po_header_id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport type ZomatoPoHeader = typeof zomatoPoHeader.$inferSelect;\nexport type InsertZomatoPoHeader = z.infer<typeof insertZomatoPoHeaderSchema>;\nexport type ZomatoPoItems = typeof zomatoPoItems.$inferSelect;\nexport type InsertZomatoPoItems = z.infer<typeof insertZomatoPoItemsSchema>;\n\n// Dealshare PO Header Table\nexport const dealsharePoHeader = pgTable(\"dealshare_po_header\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_number: varchar(\"po_number\", { length: 100 }).notNull().unique(),\n  po_created_date: timestamp(\"po_created_date\"),\n  po_delivery_date: timestamp(\"po_delivery_date\"),\n  po_expiry_date: timestamp(\"po_expiry_date\"),\n  shipped_by: text(\"shipped_by\"),\n  shipped_by_address: text(\"shipped_by_address\"),\n  shipped_by_gstin: varchar(\"shipped_by_gstin\", { length: 20 }),\n  shipped_by_phone: varchar(\"shipped_by_phone\", { length: 20 }),\n  vendor_code: varchar(\"vendor_code\", { length: 50 }),\n  shipped_to: text(\"shipped_to\"),\n  shipped_to_address: text(\"shipped_to_address\"),\n  shipped_to_gstin: varchar(\"shipped_to_gstin\", { length: 20 }),\n  bill_to: text(\"bill_to\"),\n  bill_to_address: text(\"bill_to_address\"),\n  bill_to_gstin: varchar(\"bill_to_gstin\", { length: 20 }),\n  comments: text(\"comments\"),\n  total_items: integer(\"total_items\").default(0),\n  total_quantity: decimal(\"total_quantity\", { precision: 15, scale: 2 }).default(\"0\"),\n  total_gross_amount: decimal(\"total_gross_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  uploaded_by: varchar(\"uploaded_by\", { length: 100 }).default(\"admin\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Dealshare PO Items Table\nexport const dealsharePoItems = pgTable(\"dealshare_po_items\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  po_header_id: integer(\"po_header_id\").notNull().references(() => dealsharePoHeader.id, { onDelete: \"cascade\" }),\n  line_number: integer(\"line_number\").notNull(),\n  sku: varchar(\"sku\", { length: 100 }),\n  product_name: text(\"product_name\"),\n  hsn_code: varchar(\"hsn_code\", { length: 20 }),\n  quantity: integer(\"quantity\"),\n  mrp_tax_inclusive: decimal(\"mrp_tax_inclusive\", { precision: 10, scale: 2 }),\n  buying_price: decimal(\"buying_price\", { precision: 10, scale: 2 }),\n  gst_percent: decimal(\"gst_percent\", { precision: 5, scale: 2 }),\n  cess_percent: decimal(\"cess_percent\", { precision: 5, scale: 2 }),\n  gross_amount: decimal(\"gross_amount\", { precision: 12, scale: 2 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Dealshare Relations\nexport const dealsharePoHeaderRelations = relations(dealsharePoHeader, ({ many }) => ({\n  poItems: many(dealsharePoItems),\n}));\n\nexport const dealsharePoItemsRelations = relations(dealsharePoItems, ({ one }) => ({\n  po: one(dealsharePoHeader, {\n    fields: [dealsharePoItems.po_header_id],\n    references: [dealsharePoHeader.id],\n  }),\n}));\n\n// Insert schemas for Dealshare PO tables\nexport const insertDealsharePoHeaderSchema = createInsertSchema(dealsharePoHeader).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertDealsharePoItemsSchema = createInsertSchema(dealsharePoItems).omit({\n  id: true,\n  po_header_id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport type DealsharePoHeader = typeof dealsharePoHeader.$inferSelect;\nexport type InsertDealsharePoHeader = z.infer<typeof insertDealsharePoHeaderSchema>;\nexport type DealsharePoItems = typeof dealsharePoItems.$inferSelect;\nexport type InsertDealsharePoItems = z.infer<typeof insertDealsharePoItemsSchema>;\n\n// Secondary Sales Header Table\nexport const secondarySalesHeader = pgTable(\"secondary_sales_header\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  platform: varchar(\"platform\", { length: 50 }).notNull(), // amazon, flipkart, etc.\n  business_unit: varchar(\"business_unit\", { length: 50 }).notNull(), // jivo-wellness, jivo-mart, marketplace\n  period_start: timestamp(\"period_start\"),\n  period_end: timestamp(\"period_end\"),\n  report_generated_date: timestamp(\"report_generated_date\"),\n  total_items: integer(\"total_items\").default(0),\n  total_quantity: decimal(\"total_quantity\", { precision: 15, scale: 2 }).default(\"0\"),\n  total_sales_amount: decimal(\"total_sales_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  total_commission: decimal(\"total_commission\", { precision: 15, scale: 2 }).default(\"0\"),\n  currency: varchar(\"currency\", { length: 10 }).default(\"INR\"),\n  status: varchar(\"status\", { length: 20 }).default(\"Active\"),\n  uploaded_by: varchar(\"uploaded_by\", { length: 100 }).default(\"admin\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Secondary Sales Items Table\nexport const secondarySalesItems = pgTable(\"secondary_sales_items\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  header_id: integer(\"header_id\").notNull().references(() => secondarySalesHeader.id, { onDelete: \"cascade\" }),\n  line_number: integer(\"line_number\").notNull(),\n  product_sku: varchar(\"product_sku\", { length: 100 }),\n  product_name: text(\"product_name\"),\n  product_asin: varchar(\"product_asin\", { length: 50 }), // Amazon specific\n  category: varchar(\"category\", { length: 100 }),\n  brand: varchar(\"brand\", { length: 100 }),\n  quantity_sold: integer(\"quantity_sold\"),\n  unit_price: decimal(\"unit_price\", { precision: 10, scale: 2 }),\n  total_sales: decimal(\"total_sales\", { precision: 12, scale: 2 }),\n  commission_rate: decimal(\"commission_rate\", { precision: 5, scale: 2 }),\n  commission_amount: decimal(\"commission_amount\", { precision: 10, scale: 2 }),\n  shipping_fee: decimal(\"shipping_fee\", { precision: 10, scale: 2 }),\n  promotion_discount: decimal(\"promotion_discount\", { precision: 10, scale: 2 }),\n  net_amount: decimal(\"net_amount\", { precision: 12, scale: 2 }),\n  transaction_date: timestamp(\"transaction_date\"),\n  order_id: varchar(\"order_id\", { length: 100 }),\n  customer_location: varchar(\"customer_location\", { length: 100 }),\n  fulfillment_method: varchar(\"fulfillment_method\", { length: 50 }), // FBA, FBM, etc.\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Secondary Sales Relations\nexport const secondarySalesHeaderRelations = relations(secondarySalesHeader, ({ many }) => ({\n  salesItems: many(secondarySalesItems),\n}));\n\nexport const secondarySalesItemsRelations = relations(secondarySalesItems, ({ one }) => ({\n  header: one(secondarySalesHeader, {\n    fields: [secondarySalesItems.header_id],\n    references: [secondarySalesHeader.id],\n  }),\n}));\n\n// Insert schemas for Secondary Sales tables\nexport const insertSecondarySalesHeaderSchema = createInsertSchema(secondarySalesHeader).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertSecondarySalesItemsSchema = createInsertSchema(secondarySalesItems).omit({\n  id: true,\n  header_id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport type SecondarySalesHeader = typeof secondarySalesHeader.$inferSelect;\nexport type InsertSecondarySalesHeader = z.infer<typeof insertSecondarySalesHeaderSchema>;\nexport type SecondarySalesItems = typeof secondarySalesItems.$inferSelect;\nexport type InsertSecondarySalesItems = z.infer<typeof insertSecondarySalesItemsSchema>;\n\n// Secondary Sales Specific Tables for Business Units and Period Types\n// SC_AM_JW_Daily - Amazon Jivo Wellness Daily\nexport const scAmJwDaily = pgTable(\"SC_AM_JW_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  asin: varchar(\"asin\", { length: 50 }).notNull(),\n  product_title: text(\"product_title\").notNull(),\n  brand: varchar(\"brand\", { length: 100 }),\n  ordered_revenue: decimal(\"ordered_revenue\", { precision: 15, scale: 2 }),\n  ordered_units: integer(\"ordered_units\"),\n  shipped_revenue: decimal(\"shipped_revenue\", { precision: 15, scale: 2 }),\n  shipped_cogs: decimal(\"shipped_cogs\", { precision: 15, scale: 2 }),\n  shipped_units: integer(\"shipped_units\"),\n  customer_returns: integer(\"customer_returns\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// SC_AM_JW_Range - Amazon Jivo Wellness Date Range\nexport const scAmJwRange = pgTable(\"SC_AM_JW_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  asin: varchar(\"asin\", { length: 50 }).notNull(),\n  product_title: text(\"product_title\").notNull(),\n  brand: varchar(\"brand\", { length: 100 }),\n  ordered_revenue: decimal(\"ordered_revenue\", { precision: 15, scale: 2 }),\n  ordered_units: integer(\"ordered_units\"),\n  shipped_revenue: decimal(\"shipped_revenue\", { precision: 15, scale: 2 }),\n  shipped_cogs: decimal(\"shipped_cogs\", { precision: 15, scale: 2 }),\n  shipped_units: integer(\"shipped_units\"),\n  customer_returns: integer(\"customer_returns\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// SC_AM_JM_Daily - Amazon Jivo Mart Daily\nexport const scAmJmDaily = pgTable(\"SC_AM_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  asin: varchar(\"asin\", { length: 50 }).notNull(),\n  product_title: text(\"product_title\").notNull(),\n  brand: varchar(\"brand\", { length: 100 }),\n  ordered_revenue: decimal(\"ordered_revenue\", { precision: 15, scale: 2 }),\n  ordered_units: integer(\"ordered_units\"),\n  shipped_revenue: decimal(\"shipped_revenue\", { precision: 15, scale: 2 }),\n  shipped_cogs: decimal(\"shipped_cogs\", { precision: 15, scale: 2 }),\n  shipped_units: integer(\"shipped_units\"),\n  customer_returns: integer(\"customer_returns\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// SC_AM_JM_Range - Amazon Jivo Mart Date Range\nexport const scAmJmRange = pgTable(\"SC_AM_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  asin: varchar(\"asin\", { length: 50 }).notNull(),\n  product_title: text(\"product_title\").notNull(),\n  brand: varchar(\"brand\", { length: 100 }),\n  ordered_revenue: decimal(\"ordered_revenue\", { precision: 15, scale: 2 }),\n  ordered_units: integer(\"ordered_units\"),\n  shipped_revenue: decimal(\"shipped_revenue\", { precision: 15, scale: 2 }),\n  shipped_cogs: decimal(\"shipped_cogs\", { precision: 15, scale: 2 }),\n  shipped_units: integer(\"shipped_units\"),\n  customer_returns: integer(\"customer_returns\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Insert schemas for the new tables\nexport const insertScAmJwDailySchema = createInsertSchema(scAmJwDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertScAmJwRangeSchema = createInsertSchema(scAmJwRange).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertScAmJmDailySchema = createInsertSchema(scAmJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertScAmJmRangeSchema = createInsertSchema(scAmJmRange).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Types for the new tables\nexport type ScAmJwDaily = typeof scAmJwDaily.$inferSelect;\nexport type InsertScAmJwDaily = z.infer<typeof insertScAmJwDailySchema>;\nexport type ScAmJwRange = typeof scAmJwRange.$inferSelect;\nexport type InsertScAmJwRange = z.infer<typeof insertScAmJwRangeSchema>;\nexport type ScAmJmDaily = typeof scAmJmDaily.$inferSelect;\nexport type InsertScAmJmDaily = z.infer<typeof insertScAmJmDailySchema>;\nexport type ScAmJmRange = typeof scAmJmRange.$inferSelect;\nexport type InsertScAmJmRange = z.infer<typeof insertScAmJmRangeSchema>;\n\n// Zepto Secondary Sales Tables - Jivo Mart\nexport const scZeptoJmDaily = pgTable(\"SC_Zepto_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  sku_number: text(\"sku_number\"),\n  sku_name: text(\"sku_name\"),\n  ean: text(\"ean\"),\n  sku_category: text(\"sku_category\"),\n  sku_sub_category: text(\"sku_sub_category\"),\n  brand_name: text(\"brand_name\"),\n  manufacturer_name: text(\"manufacturer_name\"),\n  manufacturer_id: text(\"manufacturer_id\"),\n  city: text(\"city\"),\n  sales_qty_units: integer(\"sales_qty_units\"),\n  mrp: decimal(\"mrp\", { precision: 10, scale: 2 }),\n  gmv: decimal(\"gmv\", { precision: 10, scale: 2 }),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const scZeptoJmRange = pgTable(\"SC_Zepto_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  sku_number: text(\"sku_number\"),\n  sku_name: text(\"sku_name\"),\n  ean: text(\"ean\"),\n  sku_category: text(\"sku_category\"),\n  sku_sub_category: text(\"sku_sub_category\"),\n  brand_name: text(\"brand_name\"),\n  manufacturer_name: text(\"manufacturer_name\"),\n  manufacturer_id: text(\"manufacturer_id\"),\n  city: text(\"city\"),\n  sales_qty_units: integer(\"sales_qty_units\"),\n  mrp: decimal(\"mrp\", { precision: 10, scale: 2 }),\n  gmv: decimal(\"gmv\", { precision: 10, scale: 2 }),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Blinkit Secondary Sales Tables - Jivo Mart\nexport const scBlinkitJmDaily = pgTable(\"SC_Blinkit_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  item_id: text(\"item_id\"),\n  item_name: text(\"item_name\"),\n  manufacturer_id: text(\"manufacturer_id\"),\n  manufacturer_name: text(\"manufacturer_name\"),\n  city_id: text(\"city_id\"),\n  city_name: text(\"city_name\"),\n  category: text(\"category\"),\n  date: timestamp(\"date\").notNull(),\n  qty_sold: decimal(\"qty_sold\", { precision: 10, scale: 2 }),\n  mrp: decimal(\"mrp\", { precision: 10, scale: 2 }),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const scBlinkitJmRange = pgTable(\"SC_Blinkit_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  item_id: text(\"item_id\"),\n  item_name: text(\"item_name\"),\n  manufacturer_id: text(\"manufacturer_id\"),\n  manufacturer_name: text(\"manufacturer_name\"),\n  city_id: text(\"city_id\"),\n  city_name: text(\"city_name\"),\n  category: text(\"category\"),\n  date: timestamp(\"date\").notNull(),\n  qty_sold: decimal(\"qty_sold\", { precision: 10, scale: 2 }),\n  mrp: decimal(\"mrp\", { precision: 10, scale: 2 }),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Swiggy Secondary Sales Tables - Jivo Mart\nexport const scSwiggyJmDaily = pgTable(\"SC_Swiggy_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  brand: text(\"brand\"),\n  ordered_date: timestamp(\"ordered_date\").notNull(),\n  city: text(\"city\"),\n  area_name: text(\"area_name\"),\n  store_id: text(\"store_id\"),\n  l1_category: text(\"l1_category\"),\n  l2_category: text(\"l2_category\"),\n  l3_category: text(\"l3_category\"),\n  product_name: text(\"product_name\"),\n  variant: text(\"variant\"),\n  item_code: text(\"item_code\"),\n  combo: text(\"combo\"),\n  combo_item_code: text(\"combo_item_code\"),\n  combo_units_sold: decimal(\"combo_units_sold\", { precision: 10, scale: 2 }),\n  base_mrp: decimal(\"base_mrp\", { precision: 10, scale: 2 }),\n  units_sold: decimal(\"units_sold\", { precision: 10, scale: 2 }),\n  gmv: decimal(\"gmv\", { precision: 10, scale: 2 }),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const scSwiggyJmRange = pgTable(\"SC_Swiggy_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  brand: text(\"brand\"),\n  ordered_date: timestamp(\"ordered_date\").notNull(),\n  city: text(\"city\"),\n  area_name: text(\"area_name\"),\n  store_id: text(\"store_id\"),\n  l1_category: text(\"l1_category\"),\n  l2_category: text(\"l2_category\"),\n  l3_category: text(\"l3_category\"),\n  product_name: text(\"product_name\"),\n  variant: text(\"variant\"),\n  item_code: text(\"item_code\"),\n  combo: text(\"combo\"),\n  combo_item_code: text(\"combo_item_code\"),\n  combo_units_sold: decimal(\"combo_units_sold\", { precision: 10, scale: 2 }),\n  base_mrp: decimal(\"base_mrp\", { precision: 10, scale: 2 }),\n  units_sold: decimal(\"units_sold\", { precision: 10, scale: 2 }),\n  gmv: decimal(\"gmv\", { precision: 10, scale: 2 }),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Insert schemas for new secondary sales tables\nexport const insertZeptoSecondarySalesItemSchema = createInsertSchema(scZeptoJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertBlinkitSecondarySalesItemSchema = createInsertSchema(scBlinkitJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertSwiggySecondarySalesItemSchema = createInsertSchema(scSwiggyJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Types for new secondary sales tables\nexport type ZeptoSecondarySalesItem = typeof scZeptoJmDaily.$inferSelect;\nexport type InsertZeptoSecondarySalesItem = z.infer<typeof insertZeptoSecondarySalesItemSchema>;\n\nexport type BlinkitSecondarySalesItem = typeof scBlinkitJmDaily.$inferSelect;\nexport type InsertBlinkitSecondarySalesItem = z.infer<typeof insertBlinkitSecondarySalesItemSchema>;\n\nexport type SwiggySecondarySalesItem = typeof scSwiggyJmDaily.$inferSelect;\nexport type InsertSwiggySecondarySalesItem = z.infer<typeof insertSwiggySecondarySalesItemSchema>;\n\n// Flipkart Grocery secondary sales tables (2-month range only)\nexport const scFlipkartJm2Month = pgTable(\"SC_FlipKart_JM_2Month\", {\n  id: serial(\"id\").primaryKey(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  business_unit: text(\"business_unit\").notNull(),\n  tenant_id: text(\"tenant_id\"),\n  retailer_id: text(\"retailer_id\"),\n  retailer_name: text(\"retailer_name\"),\n  fsn: text(\"fsn\"),\n  category: text(\"category\"),\n  vertical: text(\"vertical\"),\n  brand: text(\"brand\"),\n  product_title: text(\"product_title\"),\n  ean: text(\"ean\"),\n  style_code: text(\"style_code\"),\n  isbn: text(\"isbn\"),\n  publisher: text(\"publisher\"),\n  hsn: text(\"hsn\"),\n  model_id: text(\"model_id\"),\n  last_calculated_at: text(\"last_calculated_at\"),\n  sale_date: timestamp(\"sale_date\"),\n  sale_quantity: integer(\"sale_quantity\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const scFlipkartChirag2Month = pgTable(\"SC_FlipKart_CHIRAG_2Month\", {\n  id: serial(\"id\").primaryKey(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  business_unit: text(\"business_unit\").notNull(),\n  tenant_id: text(\"tenant_id\"),\n  retailer_id: text(\"retailer_id\"),\n  retailer_name: text(\"retailer_name\"),\n  fsn: text(\"fsn\"),\n  category: text(\"category\"),\n  vertical: text(\"vertical\"),\n  brand: text(\"brand\"),\n  product_title: text(\"product_title\"),\n  ean: text(\"ean\"),\n  style_code: text(\"style_code\"),\n  isbn: text(\"isbn\"),\n  publisher: text(\"publisher\"),\n  hsn: text(\"hsn\"),\n  model_id: text(\"model_id\"),\n  last_calculated_at: text(\"last_calculated_at\"),\n  sale_date: timestamp(\"sale_date\"),\n  sale_quantity: integer(\"sale_quantity\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Insert schemas for Flipkart Grocery\nexport const insertFlipkartSecondarySalesItemSchema = createInsertSchema(scFlipkartJm2Month).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Types for Flipkart Grocery\nexport type FlipkartSecondarySalesItem = typeof scFlipkartJm2Month.$inferSelect;\nexport type InsertFlipkartSecondarySalesItem = z.infer<typeof insertFlipkartSecondarySalesItemSchema>;\n\n// Jio Mart Sale Secondary Sales Tables - Jivo Mart\nexport const scJioMartSaleJmDaily = pgTable(\"SC_JioMartSale_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  shipment_number: text(\"shipment_number\"),\n  fulfillment_type: text(\"fulfillment_type\"),\n  shipment_created_at: timestamp(\"shipment_created_at\"),\n  shipment_status: text(\"shipment_status\"),\n  fulfiller_name: text(\"fulfiller_name\"),\n  accepted_at: timestamp(\"accepted_at\"),\n  product_title: text(\"product_title\"),\n  ean: text(\"ean\"),\n  sku: text(\"sku\"),\n  qty: integer(\"qty\"),\n  mrp: decimal(\"mrp\", { precision: 10, scale: 2 }),\n  promotion_amt: decimal(\"promotion_amt\", { precision: 10, scale: 2 }),\n  shipping_charge: decimal(\"shipping_charge\", { precision: 10, scale: 2 }),\n  item_total: decimal(\"item_total\", { precision: 10, scale: 2 }),\n  payment_method_used: text(\"payment_method_used\"),\n  tracking_code: text(\"tracking_code\"),\n  shipping_agent_code: text(\"shipping_agent_code\"),\n  invoice_id: text(\"invoice_id\"),\n  acceptance_tat_date_time: timestamp(\"acceptance_tat_date_time\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const scJioMartSaleJmRange = pgTable(\"SC_JioMartSale_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  shipment_number: text(\"shipment_number\"),\n  fulfillment_type: text(\"fulfillment_type\"),\n  shipment_created_at: timestamp(\"shipment_created_at\"),\n  shipment_status: text(\"shipment_status\"),\n  fulfiller_name: text(\"fulfiller_name\"),\n  accepted_at: timestamp(\"accepted_at\"),\n  product_title: text(\"product_title\"),\n  ean: text(\"ean\"),\n  sku: text(\"sku\"),\n  qty: integer(\"qty\"),\n  mrp: decimal(\"mrp\", { precision: 10, scale: 2 }),\n  promotion_amt: decimal(\"promotion_amt\", { precision: 10, scale: 2 }),\n  shipping_charge: decimal(\"shipping_charge\", { precision: 10, scale: 2 }),\n  item_total: decimal(\"item_total\", { precision: 10, scale: 2 }),\n  payment_method_used: text(\"payment_method_used\"),\n  tracking_code: text(\"tracking_code\"),\n  shipping_agent_code: text(\"shipping_agent_code\"),\n  invoice_id: text(\"invoice_id\"),\n  acceptance_tat_date_time: timestamp(\"acceptance_tat_date_time\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Insert schemas for Jio Mart Sale\nexport const insertJioMartSaleSecondarySalesItemSchema = createInsertSchema(scJioMartSaleJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Types for Jio Mart Sale\nexport type JioMartSaleSecondarySalesItem = typeof scJioMartSaleJmDaily.$inferSelect;\nexport type InsertJioMartSaleSecondarySalesItem = z.infer<typeof insertJioMartSaleSecondarySalesItemSchema>;\n\n// Jio Mart Cancel Secondary Sales Tables\nexport const scJioMartCancelJmDaily = pgTable(\"SC_JioMartCancel_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  shipment_number: text(\"shipment_number\"),\n  ean: text(\"ean\"),\n  sku: text(\"sku\"),\n  product: text(\"product\"),\n  invoice_id: text(\"invoice_id\"),\n  invoice_amount: decimal(\"invoice_amount\", { precision: 10, scale: 2 }),\n  quantity: integer(\"quantity\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }),\n  status: text(\"status\"),\n  reason: text(\"reason\"),\n  payment_method: text(\"payment_method\"),\n  fulfiller_name: text(\"fulfiller_name\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const scJioMartCancelJmRange = pgTable(\"SC_JioMartCancel_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  shipment_number: text(\"shipment_number\"),\n  ean: text(\"ean\"),\n  sku: text(\"sku\"),\n  product: text(\"product\"),\n  invoice_id: text(\"invoice_id\"),\n  invoice_amount: decimal(\"invoice_amount\", { precision: 10, scale: 2 }),\n  quantity: integer(\"quantity\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }),\n  status: text(\"status\"),\n  reason: text(\"reason\"),\n  payment_method: text(\"payment_method\"),\n  fulfiller_name: text(\"fulfiller_name\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Insert schemas for Jio Mart Cancel\nexport const insertJioMartCancelSecondarySalesItemSchema = createInsertSchema(scJioMartCancelJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Types for Jio Mart Cancel\nexport type JioMartCancelSecondarySalesItem = typeof scJioMartCancelJmDaily.$inferSelect;\nexport type InsertJioMartCancelSecondarySalesItem = z.infer<typeof insertJioMartCancelSecondarySalesItemSchema>;\n\n// BigBasket Secondary Sales Tables\nexport const scBigBasketJmDaily = pgTable(\"SC_BigBasket_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  date_range: text(\"date_range\"),\n  source_city_name: text(\"source_city_name\"),\n  brand_name: text(\"brand_name\"),\n  top_slug: text(\"top_slug\"),\n  mid_slug: text(\"mid_slug\"),\n  leaf_slug: text(\"leaf_slug\"),\n  source_sku_id: text(\"source_sku_id\"),\n  sku_description: text(\"sku_description\"),\n  sku_weight: text(\"sku_weight\"),\n  total_quantity: decimal(\"total_quantity\", { precision: 10, scale: 2 }),\n  total_mrp: decimal(\"total_mrp\", { precision: 10, scale: 2 }),\n  total_sales: decimal(\"total_sales\", { precision: 10, scale: 2 }),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const scBigBasketJmRange = pgTable(\"SC_BigBasket_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  date_range: text(\"date_range\"),\n  source_city_name: text(\"source_city_name\"),\n  brand_name: text(\"brand_name\"),\n  top_slug: text(\"top_slug\"),\n  mid_slug: text(\"mid_slug\"),\n  leaf_slug: text(\"leaf_slug\"),\n  source_sku_id: text(\"source_sku_id\"),\n  sku_description: text(\"sku_description\"),\n  sku_weight: text(\"sku_weight\"),\n  total_quantity: decimal(\"total_quantity\", { precision: 10, scale: 2 }),\n  total_mrp: decimal(\"total_mrp\", { precision: 10, scale: 2 }),\n  total_sales: decimal(\"total_sales\", { precision: 10, scale: 2 }),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Insert schemas for BigBasket\nexport const insertBigBasketSecondarySalesItemSchema = createInsertSchema(scBigBasketJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Types for BigBasket\nexport type BigBasketSecondarySalesItem = typeof scBigBasketJmDaily.$inferSelect;\nexport type InsertBigBasketSecondarySalesItem = z.infer<typeof insertBigBasketSecondarySalesItemSchema>;\n\n\n\n// Jio Mart Inventory Tables\nexport const invJioMartJmDaily = pgTable(\"INV_JioMart_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  rfc_id: text(\"rfc_id\"),\n  rfc_name: text(\"rfc_name\"),\n  sku_id: text(\"sku_id\").notNull(),\n  title: text(\"title\"),\n  category: text(\"category\"),\n  product_status: text(\"product_status\"),\n  last_updated_at: timestamp(\"last_updated_at\"),\n  total_sellable_inv: integer(\"total_sellable_inv\"),\n  total_unsellable_inv: integer(\"total_unsellable_inv\"),\n  fc_dmg_inv: integer(\"fc_dmg_inv\"),\n  lsp_dmg_inv: integer(\"lsp_dmg_inv\"),\n  cust_dmg_inv: integer(\"cust_dmg_inv\"),\n  recvd_dmg: integer(\"recvd_dmg\"),\n  expired_inv: integer(\"expired_inv\"),\n  other_unsellable_inv: integer(\"other_unsellable_inv\"),\n  mtd_fwd_intransit: integer(\"mtd_fwd_intransit\"),\n  mtd_delvd_cust: integer(\"mtd_delvd_cust\"),\n  mtd_ret_intransit: integer(\"mtd_ret_intransit\"),\n  mtd_order_count: integer(\"mtd_order_count\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const invJioMartJmRange = pgTable(\"INV_JioMart_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  rfc_id: text(\"rfc_id\"),\n  rfc_name: text(\"rfc_name\"),\n  sku_id: text(\"sku_id\").notNull(),\n  title: text(\"title\"),\n  category: text(\"category\"),\n  product_status: text(\"product_status\"),\n  last_updated_at: timestamp(\"last_updated_at\"),\n  total_sellable_inv: integer(\"total_sellable_inv\"),\n  total_unsellable_inv: integer(\"total_unsellable_inv\"),\n  fc_dmg_inv: integer(\"fc_dmg_inv\"),\n  lsp_dmg_inv: integer(\"lsp_dmg_inv\"),\n  cust_dmg_inv: integer(\"cust_dmg_inv\"),\n  recvd_dmg: integer(\"recvd_dmg\"),\n  expired_inv: integer(\"expired_inv\"),\n  other_unsellable_inv: integer(\"other_unsellable_inv\"),\n  mtd_fwd_intransit: integer(\"mtd_fwd_intransit\"),\n  mtd_delvd_cust: integer(\"mtd_delvd_cust\"),\n  mtd_ret_intransit: integer(\"mtd_ret_intransit\"),\n  mtd_order_count: integer(\"mtd_order_count\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Insert schemas for Jio Mart Inventory\nexport const insertJioMartInventoryItemSchema = createInsertSchema(invJioMartJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Types for Jio Mart Inventory\nexport type JioMartInventoryItem = typeof invJioMartJmDaily.$inferSelect;\nexport type InsertJioMartInventoryItem = z.infer<typeof insertJioMartInventoryItemSchema>;\n\n// Blinkit Inventory Tables\nexport const invBlinkitJmDaily = pgTable(\"INV_Blinkit_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  sku_id: text(\"sku_id\").notNull(),\n  product_name: text(\"product_name\"),\n  category: text(\"category\"),\n  subcategory: text(\"subcategory\"),\n  brand: text(\"brand\"),\n  size: text(\"size\"),\n  unit: text(\"unit\"),\n  stock_on_hand: integer(\"stock_on_hand\"),\n  reserved_quantity: integer(\"reserved_quantity\"),\n  available_quantity: integer(\"available_quantity\"),\n  inbound_quantity: integer(\"inbound_quantity\"),\n  outbound_quantity: integer(\"outbound_quantity\"),\n  damaged_quantity: integer(\"damaged_quantity\"),\n  expired_quantity: integer(\"expired_quantity\"),\n  last_updated_at: timestamp(\"last_updated_at\"),\n  warehouse_location: text(\"warehouse_location\"),\n  supplier_name: text(\"supplier_name\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const invBlinkitJmRange = pgTable(\"INV_Blinkit_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  sku_id: text(\"sku_id\").notNull(),\n  product_name: text(\"product_name\"),\n  category: text(\"category\"),\n  subcategory: text(\"subcategory\"),\n  brand: text(\"brand\"),\n  size: text(\"size\"),\n  unit: text(\"unit\"),\n  stock_on_hand: integer(\"stock_on_hand\"),\n  reserved_quantity: integer(\"reserved_quantity\"),\n  available_quantity: integer(\"available_quantity\"),\n  inbound_quantity: integer(\"inbound_quantity\"),\n  outbound_quantity: integer(\"outbound_quantity\"),\n  damaged_quantity: integer(\"damaged_quantity\"),\n  expired_quantity: integer(\"expired_quantity\"),\n  last_updated_at: timestamp(\"last_updated_at\"),\n  warehouse_location: text(\"warehouse_location\"),\n  supplier_name: text(\"supplier_name\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// FlipKart Inventory Tables\nexport const invFlipkartJmDaily = pgTable(\"INV_FlipKart_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  warehouseId: varchar(\"warehouseId\", { length: 100 }),\n  sku: varchar(\"sku\", { length: 200 }),\n  title: text(\"title\"),\n  listingId: varchar(\"listingId\", { length: 100 }),\n  fsn: varchar(\"fsn\", { length: 100 }),\n  brand: varchar(\"brand\", { length: 100 }),\n  flipkartSellingPrice: decimal(\"flipkartSellingPrice\", { precision: 10, scale: 2 }),\n  liveOnWebsite: integer(\"liveOnWebsite\"),\n  sales7D: integer(\"sales7D\"),\n  sales14D: integer(\"sales14D\"),\n  sales30D: integer(\"sales30D\"),\n  sales60D: integer(\"sales60D\"),\n  sales90D: integer(\"sales90D\"),\n  b2bScheduled: integer(\"b2bScheduled\"),\n  transfersScheduled: integer(\"transfersScheduled\"),\n  b2bShipped: integer(\"b2bShipped\"),\n  transfersShipped: integer(\"transfersShipped\"),\n  b2bReceiving: integer(\"b2bReceiving\"),\n  transfersReceiving: integer(\"transfersReceiving\"),\n  reservedForOrdersAndRecalls: integer(\"reservedForOrdersAndRecalls\"),\n  reservedForInternalProcessing: integer(\"reservedForInternalProcessing\"),\n  returnsProcessing: integer(\"returnsProcessing\"),\n  ordersToDispatch: integer(\"ordersToDispatch\"),\n  recallsToDispatch: integer(\"recallsToDispatch\"),\n  damaged: integer(\"damaged\"),\n  qcReject: integer(\"qcReject\"),\n  catalogReject: integer(\"catalogReject\"),\n  returnsReject: integer(\"returnsReject\"),\n  sellerReturnReject: integer(\"sellerReturnReject\"),\n  miscellaneous: integer(\"miscellaneous\"),\n  lengthCm: decimal(\"lengthCm\", { precision: 8, scale: 6 }),\n  breadthCm: decimal(\"breadthCm\", { precision: 8, scale: 6 }),\n  heightCm: decimal(\"heightCm\", { precision: 8, scale: 6 }),\n  weightKg: decimal(\"weightKg\", { precision: 8, scale: 3 }),\n  fulfilmentType: text(\"fulfilmentType\"),\n  fAssuredBadge: varchar(\"fAssuredBadge\", { length: 10 }),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const invFlipkartJmRange = pgTable(\"INV_FlipKart_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  warehouseId: varchar(\"warehouseId\", { length: 100 }),\n  sku: varchar(\"sku\", { length: 200 }),\n  title: text(\"title\"),\n  listingId: varchar(\"listingId\", { length: 100 }),\n  fsn: varchar(\"fsn\", { length: 100 }),\n  brand: varchar(\"brand\", { length: 100 }),\n  flipkartSellingPrice: decimal(\"flipkartSellingPrice\", { precision: 10, scale: 2 }),\n  liveOnWebsite: integer(\"liveOnWebsite\"),\n  sales7D: integer(\"sales7D\"),\n  sales14D: integer(\"sales14D\"),\n  sales30D: integer(\"sales30D\"),\n  sales60D: integer(\"sales60D\"),\n  sales90D: integer(\"sales90D\"),\n  b2bScheduled: integer(\"b2bScheduled\"),\n  transfersScheduled: integer(\"transfersScheduled\"),\n  b2bShipped: integer(\"b2bShipped\"),\n  transfersShipped: integer(\"transfersShipped\"),\n  b2bReceiving: integer(\"b2bReceiving\"),\n  transfersReceiving: integer(\"transfersReceiving\"),\n  reservedForOrdersAndRecalls: integer(\"reservedForOrdersAndRecalls\"),\n  reservedForInternalProcessing: integer(\"reservedForInternalProcessing\"),\n  returnsProcessing: integer(\"returnsProcessing\"),\n  ordersToDispatch: integer(\"ordersToDispatch\"),\n  recallsToDispatch: integer(\"recallsToDispatch\"),\n  damaged: integer(\"damaged\"),\n  qcReject: integer(\"qcReject\"),\n  catalogReject: integer(\"catalogReject\"),\n  returnsReject: integer(\"returnsReject\"),\n  sellerReturnReject: integer(\"sellerReturnReject\"),\n  miscellaneous: integer(\"miscellaneous\"),\n  lengthCm: decimal(\"lengthCm\", { precision: 8, scale: 6 }),\n  breadthCm: decimal(\"breadthCm\", { precision: 8, scale: 6 }),\n  heightCm: decimal(\"heightCm\", { precision: 8, scale: 6 }),\n  weightKg: decimal(\"weightKg\", { precision: 8, scale: 3 }),\n  fulfilmentType: text(\"fulfilmentType\"),\n  fAssuredBadge: varchar(\"fAssuredBadge\", { length: 10 }),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Amazon Inventory Tables - JM (Jivo Mart)\nexport const invAmazonJmDaily = pgTable(\"INV_Amazon_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  asin: text(\"asin\").notNull(),\n  product_name: text(\"product_name\"),\n  sku: text(\"sku\"),\n  fnsku: text(\"fnsku\"),\n  category: text(\"category\"),\n  brand: text(\"brand\"),\n  size: text(\"size\"),\n  unit: text(\"unit\"),\n  warehouse_location: text(\"warehouse_location\"),\n  condition: text(\"condition\"),\n  fulfillment_channel: text(\"fulfillment_channel\"),\n  units_available: integer(\"units_available\"),\n  reserved_quantity: integer(\"reserved_quantity\"),\n  inbound_quantity: integer(\"inbound_quantity\"),\n  researching_quantity: integer(\"researching_quantity\"),\n  unfulfillable_quantity: integer(\"unfulfillable_quantity\"),\n  supplier_name: text(\"supplier_name\"),\n  cost_per_unit: decimal(\"cost_per_unit\", { precision: 10, scale: 2 }),\n  total_value: decimal(\"total_value\", { precision: 10, scale: 2 }),\n  last_updated_at: timestamp(\"last_updated_at\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const invAmazonJmRange = pgTable(\"INV_Amazon_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  asin: text(\"asin\").notNull(),\n  product_name: text(\"product_name\"),\n  sku: text(\"sku\"),\n  fnsku: text(\"fnsku\"),\n  category: text(\"category\"),\n  brand: text(\"brand\"),\n  size: text(\"size\"),\n  unit: text(\"unit\"),\n  warehouse_location: text(\"warehouse_location\"),\n  condition: text(\"condition\"),\n  fulfillment_channel: text(\"fulfillment_channel\"),\n  units_available: integer(\"units_available\"),\n  reserved_quantity: integer(\"reserved_quantity\"),\n  inbound_quantity: integer(\"inbound_quantity\"),\n  researching_quantity: integer(\"researching_quantity\"),\n  unfulfillable_quantity: integer(\"unfulfillable_quantity\"),\n  supplier_name: text(\"supplier_name\"),\n  cost_per_unit: decimal(\"cost_per_unit\", { precision: 10, scale: 2 }),\n  total_value: decimal(\"total_value\", { precision: 10, scale: 2 }),\n  last_updated_at: timestamp(\"last_updated_at\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Amazon Inventory Tables - JW (Jivo Wellness)\nexport const invAmazonJwDaily = pgTable(\"INV_Amazon_JW_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  asin: text(\"asin\").notNull(),\n  product_name: text(\"product_name\"),\n  sku: text(\"sku\"),\n  fnsku: text(\"fnsku\"),\n  category: text(\"category\"),\n  brand: text(\"brand\"),\n  size: text(\"size\"),\n  unit: text(\"unit\"),\n  warehouse_location: text(\"warehouse_location\"),\n  condition: text(\"condition\"),\n  fulfillment_channel: text(\"fulfillment_channel\"),\n  units_available: integer(\"units_available\"),\n  reserved_quantity: integer(\"reserved_quantity\"),\n  inbound_quantity: integer(\"inbound_quantity\"),\n  researching_quantity: integer(\"researching_quantity\"),\n  unfulfillable_quantity: integer(\"unfulfillable_quantity\"),\n  supplier_name: text(\"supplier_name\"),\n  cost_per_unit: decimal(\"cost_per_unit\", { precision: 10, scale: 2 }),\n  total_value: decimal(\"total_value\", { precision: 10, scale: 2 }),\n  last_updated_at: timestamp(\"last_updated_at\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const invAmazonJwRange = pgTable(\"INV_Amazon_JW_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  asin: text(\"asin\").notNull(),\n  product_name: text(\"product_name\"),\n  sku: text(\"sku\"),\n  fnsku: text(\"fnsku\"),\n  category: text(\"category\"),\n  brand: text(\"brand\"),\n  size: text(\"size\"),\n  unit: text(\"unit\"),\n  warehouse_location: text(\"warehouse_location\"),\n  condition: text(\"condition\"),\n  fulfillment_channel: text(\"fulfillment_channel\"),\n  units_available: integer(\"units_available\"),\n  reserved_quantity: integer(\"reserved_quantity\"),\n  inbound_quantity: integer(\"inbound_quantity\"),\n  researching_quantity: integer(\"researching_quantity\"),\n  unfulfillable_quantity: integer(\"unfulfillable_quantity\"),\n  supplier_name: text(\"supplier_name\"),\n  cost_per_unit: decimal(\"cost_per_unit\", { precision: 10, scale: 2 }),\n  total_value: decimal(\"total_value\", { precision: 10, scale: 2 }),\n  last_updated_at: timestamp(\"last_updated_at\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Insert schemas for Blinkit Inventory\nexport const insertBlinkitInventoryItemSchema = createInsertSchema(invBlinkitJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Insert schemas for Amazon Inventory\nexport const insertAmazonInventoryItemSchema = createInsertSchema(invAmazonJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Types for Blinkit Inventory\nexport type BlinkitInventoryItem = typeof invBlinkitJmDaily.$inferSelect;\nexport type InsertBlinkitInventoryItem = z.infer<typeof insertBlinkitInventoryItemSchema>;\n\n// Types for Amazon Inventory\nexport type AmazonInventoryItem = typeof invAmazonJmDaily.$inferSelect;\nexport type InsertAmazonInventoryItem = z.infer<typeof insertAmazonInventoryItemSchema>;\n\n// Inventory Swiggy JM Daily\nexport const invSwiggyJmDaily = pgTable(\"INV_Swiggy_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  storage_type: text(\"storage_type\"),\n  facility_name: text(\"facility_name\"),\n  city: text(\"city\"),\n  sku_code: text(\"sku_code\"),\n  sku_description: text(\"sku_description\"),\n  l1_category: text(\"l1_category\"),\n  l2_category: text(\"l2_category\"),\n  shelf_life_days: integer(\"shelf_life_days\"),\n  business_category: text(\"business_category\"),\n  days_on_hand: integer(\"days_on_hand\"),\n  potential_gmv_loss: decimal(\"potential_gmv_loss\", { precision: 10, scale: 2 }),\n  open_pos: text(\"open_pos\"),\n  open_po_quantity: integer(\"open_po_quantity\"),\n  warehouse_qty_available: integer(\"warehouse_qty_available\"),\n  last_updated_at: timestamp(\"last_updated_at\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Inventory Swiggy JM Range\nexport const invSwiggyJmRange = pgTable(\"INV_Swiggy_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  storage_type: text(\"storage_type\"),\n  facility_name: text(\"facility_name\"),\n  city: text(\"city\"),\n  sku_code: text(\"sku_code\"),\n  sku_description: text(\"sku_description\"),\n  l1_category: text(\"l1_category\"),\n  l2_category: text(\"l2_category\"),\n  shelf_life_days: integer(\"shelf_life_days\"),\n  business_category: text(\"business_category\"),\n  days_on_hand: integer(\"days_on_hand\"),\n  potential_gmv_loss: decimal(\"potential_gmv_loss\", { precision: 10, scale: 2 }),\n  open_pos: text(\"open_pos\"),\n  open_po_quantity: integer(\"open_po_quantity\"),\n  warehouse_qty_available: integer(\"warehouse_qty_available\"),\n  last_updated_at: timestamp(\"last_updated_at\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Insert schemas for Swiggy Inventory\nexport const insertSwiggyInventoryItemSchema = createInsertSchema(invSwiggyJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Types for Swiggy Inventory\nexport type SwiggyInventoryItem = typeof invSwiggyJmDaily.$inferSelect;\nexport type InsertSwiggyInventoryItem = z.infer<typeof insertSwiggyInventoryItemSchema>;\n\n// Insert schemas for FlipKart Inventory\nexport const insertFlipkartInventoryDailySchema = createInsertSchema(invFlipkartJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertFlipkartInventoryRangeSchema = createInsertSchema(invFlipkartJmRange).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Types for FlipKart Inventory\nexport type FlipkartInventoryDaily = typeof invFlipkartJmDaily.$inferSelect;\nexport type InsertFlipkartInventoryDaily = z.infer<typeof insertFlipkartInventoryDailySchema>;\nexport type FlipkartInventoryRange = typeof invFlipkartJmRange.$inferSelect;\nexport type InsertFlipkartInventoryRange = z.infer<typeof insertFlipkartInventoryRangeSchema>;\n\n// Zepto Inventory Tables\nexport const invZeptoJmDaily = pgTable(\"INV_Zepto_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  city: varchar(\"city\", { length: 100 }),\n  sku_name: text(\"sku_name\"),\n  sku_code: varchar(\"sku_code\", { length: 200 }),\n  ean: varchar(\"ean\", { length: 50 }),\n  sku_category: varchar(\"sku_category\", { length: 100 }),\n  sku_sub_category: varchar(\"sku_sub_category\", { length: 100 }),\n  brand_name: varchar(\"brand_name\", { length: 100 }),\n  manufacturer_name: varchar(\"manufacturer_name\", { length: 200 }),\n  manufacturer_id: varchar(\"manufacturer_id\", { length: 100 }),\n  units: integer(\"units\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const invZeptoJmRange = pgTable(\"INV_Zepto_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  city: varchar(\"city\", { length: 100 }),\n  sku_name: text(\"sku_name\"),\n  sku_code: varchar(\"sku_code\", { length: 200 }),\n  ean: varchar(\"ean\", { length: 50 }),\n  sku_category: varchar(\"sku_category\", { length: 100 }),\n  sku_sub_category: varchar(\"sku_sub_category\", { length: 100 }),\n  brand_name: varchar(\"brand_name\", { length: 100 }),\n  manufacturer_name: varchar(\"manufacturer_name\", { length: 200 }),\n  manufacturer_id: varchar(\"manufacturer_id\", { length: 100 }),\n  units: integer(\"units\"),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Zepto Inventory Insert Schemas\nexport const insertZeptoInventoryDailySchema = createInsertSchema(invZeptoJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertZeptoInventoryRangeSchema = createInsertSchema(invZeptoJmRange).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Types for Zepto Inventory\nexport type ZeptoInventoryDaily = typeof invZeptoJmDaily.$inferSelect;\nexport type InsertZeptoInventoryDaily = z.infer<typeof insertZeptoInventoryDailySchema>;\nexport type ZeptoInventoryRange = typeof invZeptoJmRange.$inferSelect;\nexport type InsertZeptoInventoryRange = z.infer<typeof insertZeptoInventoryRangeSchema>;\n\n// BigBasket Inventory Tables\nexport const invBigBasketJmDaily = pgTable(\"INV_BigBasket_JM_Daily\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  report_date: timestamp(\"report_date\").notNull(),\n  city: text(\"city\"),\n  sku_id: text(\"sku_id\"),\n  brand_name: text(\"brand_name\"),\n  sku_name: text(\"sku_name\"),\n  sku_weight: text(\"sku_weight\"),\n  sku_pack_type: text(\"sku_pack_type\"),\n  sku_description: text(\"sku_description\"),\n  top_category_name: text(\"top_category_name\"),\n  mid_category_name: text(\"mid_category_name\"),\n  leaf_category_name: text(\"leaf_category_name\"),\n  soh: decimal(\"soh\", { precision: 10, scale: 2 }),\n  soh_value: decimal(\"soh_value\", { precision: 10, scale: 2 }),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const invBigBasketJmRange = pgTable(\"INV_BigBasket_JM_Range\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  period_start: timestamp(\"period_start\").notNull(),\n  period_end: timestamp(\"period_end\").notNull(),\n  city: text(\"city\"),\n  sku_id: text(\"sku_id\"),\n  brand_name: text(\"brand_name\"),\n  sku_name: text(\"sku_name\"),\n  sku_weight: text(\"sku_weight\"),\n  sku_pack_type: text(\"sku_pack_type\"),\n  sku_description: text(\"sku_description\"),\n  top_category_name: text(\"top_category_name\"),\n  mid_category_name: text(\"mid_category_name\"),\n  leaf_category_name: text(\"leaf_category_name\"),\n  soh: decimal(\"soh\", { precision: 10, scale: 2 }),\n  soh_value: decimal(\"soh_value\", { precision: 10, scale: 2 }),\n  attachment_path: text(\"attachment_path\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow()\n});\n\n// Insert schemas for BigBasket Inventory\nexport const insertBigBasketInventoryDailySchema = createInsertSchema(invBigBasketJmDaily).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\nexport const insertBigBasketInventoryRangeSchema = createInsertSchema(invBigBasketJmRange).omit({\n  id: true,\n  created_at: true,\n  updated_at: true\n});\n\n// Types for BigBasket Inventory\nexport type BigBasketInventoryDaily = typeof invBigBasketJmDaily.$inferSelect;\nexport type InsertBigBasketInventoryDaily = z.infer<typeof insertBigBasketInventoryDailySchema>;\nexport type BigBasketInventoryRange = typeof invBigBasketJmRange.$inferSelect;\nexport type InsertBigBasketInventoryRange = z.infer<typeof insertBigBasketInventoryRangeSchema>;\n\n\n","size_bytes":90014},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport { ResponsiveLayout } from \"@/components/layout/responsive-layout\";\n\n// Auth pages\nimport AuthPage from \"@/pages/auth-page\";\nimport ProfilePage from \"@/pages/profile-page\";\n\n// Protected pages\nimport Dashboard from \"@/pages/dashboard\";\nimport PlatformPO from \"@/pages/platform-po\";\nimport PODetails from \"@/pages/po-details\";\nimport POEdit from \"@/pages/po-edit\";\nimport FlipkartGroceryPOUpload from \"@/pages/flipkart-grocery-po-upload\";\nimport FlipkartGroceryPOs from \"@/pages/flipkart-grocery-pos\";\nimport FlipkartGroceryPODetails from \"@/pages/flipkart-grocery-po-details\";\nimport ZeptoPoUpload from \"@/pages/zepto-po-upload\";\nimport ZeptoPOs from \"@/pages/zepto-pos\";\nimport ZeptoPoDetails from \"@/pages/zepto-po-details\";\nimport ZeptoPoEdit from \"@/pages/zepto-po-edit\";\nimport CityMallPOs from \"@/pages/city-mall-pos\";\nimport CityMallPoDetails from \"@/pages/city-mall-po-details\";\nimport UploadBlinkitPo from \"./pages/upload/UploadBlinkitPo\";\nimport ViewBlinkitPos from \"./pages/ViewBlinkitPos\";\nimport SwiggyUpload from \"./pages/SwiggyUpload\";\nimport UnifiedPoUpload from \"@/pages/unified-po-upload\";\nimport SapSync from \"@/pages/sap-sync\";\nimport SqlQuery from \"@/pages/SqlQuery\";\nimport DistributorPO from \"@/pages/distributor-po\";\nimport SecondarySales from \"@/pages/secondary-sales\";\nimport Inventory from \"@/pages/inventory\";\n\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/auth\" component={AuthPage} />\n      \n      {/* Protected routes with responsive layout */}\n      <ProtectedRoute path=\"/\" component={() => (\n        <ResponsiveLayout>\n          <Dashboard />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/profile\" component={() => <ProfilePage />} />\n      \n      <ProtectedRoute path=\"/platform-po\" component={() => (\n        <ResponsiveLayout>\n          <PlatformPO />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/po-details/:id\" component={() => (\n        <ResponsiveLayout>\n          <PODetails />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/po-edit/:id\" component={() => (\n        <ResponsiveLayout>\n          <POEdit />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/flipkart-grocery-upload\" component={() => (\n        <ResponsiveLayout>\n          <FlipkartGroceryPOUpload />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/flipkart-grocery-pos\" component={() => (\n        <ResponsiveLayout>\n          <FlipkartGroceryPOs />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/flipkart-grocery-po/:id\" component={() => (\n        <ResponsiveLayout>\n          <FlipkartGroceryPODetails />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/zepto-upload\" component={() => (\n        <ResponsiveLayout>\n          <ZeptoPoUpload />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/zepto-pos\" component={() => (\n        <ResponsiveLayout>\n          <ZeptoPOs />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/zepto-pos/:id\" component={() => (\n        <ResponsiveLayout>\n          <ZeptoPoDetails />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/zepto-pos/edit/:id\" component={() => (\n        <ResponsiveLayout>\n          <Route path=\"/zepto-pos/edit/:id\">\n            {(params) => <ZeptoPoEdit poId={params.id} />}\n          </Route>\n        </ResponsiveLayout>\n      )} />\n      \n      <Route path=\"/city-mall-upload\">\n        {() => {\n          // Redirect legacy city-mall-upload to unified upload\n          window.location.href = \"/unified-po-upload\";\n          return null;\n        }}\n      </Route>\n      \n      <ProtectedRoute path=\"/city-mall-pos\" component={() => (\n        <ResponsiveLayout>\n          <CityMallPOs />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/city-mall-pos/:id\" component={() => (\n        <ResponsiveLayout>\n          <CityMallPoDetails />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/blinkit-upload\" component={() => (\n        <ResponsiveLayout>\n          <UploadBlinkitPo />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/blinkit-pos\" component={() => (\n        <ResponsiveLayout>\n          <ViewBlinkitPos />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/swiggy-upload\" component={() => (\n        <ResponsiveLayout>\n          <SwiggyUpload />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/unified-po-upload\" component={() => (\n        <ResponsiveLayout>\n          <UnifiedPoUpload />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/sap-sync\" component={() => (\n        <ResponsiveLayout>\n          <SapSync />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/distributor-po\" component={() => (\n        <ResponsiveLayout>\n          <DistributorPO />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/secondary-sales\" component={() => (\n        <ResponsiveLayout>\n          <SecondarySales />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/inventory\" component={() => (\n        <ResponsiveLayout>\n          <Inventory />\n        </ResponsiveLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/sql-query\" component={() => (\n        <ResponsiveLayout>\n          <SqlQuery />\n        </ResponsiveLayout>\n      )} />\n\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":6300},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":1681},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { \n  PfMst, \n  InsertPfMst, \n  PfPo, \n  InsertPfPo, \n  PfOrderItems, \n  InsertPfOrderItems \n} from \"@shared/schema\";\n\nexport const api = {\n  // Platform APIs\n  platforms: {\n    getAll: async (): Promise<PfMst[]> => {\n      const response = await apiRequest(\"GET\", \"/api/platforms\");\n      return response.json();\n    },\n    create: async (platform: InsertPfMst): Promise<PfMst> => {\n      const response = await apiRequest(\"POST\", \"/api/platforms\", platform);\n      return response.json();\n    }\n  },\n\n  // PO APIs\n  pos: {\n    getAll: async (): Promise<(PfPo & { platform: PfMst; orderItems: PfOrderItems[] })[]> => {\n      const response = await apiRequest(\"GET\", \"/api/pos\");\n      return response.json();\n    },\n    getById: async (id: number): Promise<PfPo & { platform: PfMst; orderItems: PfOrderItems[] }> => {\n      const response = await apiRequest(\"GET\", `/api/pos/${id}`);\n      return response.json();\n    },\n    create: async (data: { po: InsertPfPo; items: InsertPfOrderItems[] }): Promise<PfPo> => {\n      const response = await apiRequest(\"POST\", \"/api/pos\", data);\n      return response.json();\n    },\n    update: async (id: number, data: { po: Partial<InsertPfPo>; items?: InsertPfOrderItems[] }): Promise<PfPo> => {\n      const response = await apiRequest(\"PUT\", `/api/pos/${id}`, data);\n      return response.json();\n    },\n    delete: async (id: number): Promise<void> => {\n      await apiRequest(\"DELETE\", `/api/pos/${id}`);\n    }\n  },\n\n  // Platform Items APIs\n  platformItems: {\n    search: async (platformId?: number, search?: string) => {\n      const params = new URLSearchParams();\n      if (platformId) params.append(\"platformId\", platformId.toString());\n      if (search) params.append(\"search\", search);\n      \n      const response = await apiRequest(\"GET\", `/api/platform-items?${params.toString()}`);\n      return response.json();\n    }\n  }\n};\n","size_bytes":1932},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Bell, Search } from \"lucide-react\";\n\nexport default function Dashboard() {\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-gray-900\">Dashboard</h2>\n            <p className=\"text-gray-600 mt-1\">Overview of your e-commerce operations</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            {/* Search */}\n            <div className=\"relative\">\n              <input \n                type=\"text\" \n                placeholder=\"Search...\" \n                className=\"w-64 pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent outline-none\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n            </div>\n            {/* Notifications */}\n            <button className=\"relative p-2 text-gray-400 hover:text-gray-600 transition-colors\">\n              <Bell size={20} />\n              <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center\">3</span>\n            </button>\n          </div>\n        </div>\n      </header>\n\n      {/* Content Area */}\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Welcome to PO Manager</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600\">\n                Your e-commerce purchase order management system is ready. Use the sidebar to navigate to different modules.\n              </p>\n              <div className=\"mt-4\">\n                <p className=\"text-sm text-gray-500\">\n                  Currently available: Platform PO module for creating and managing purchase orders.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":2290},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/platform-po.tsx":{"content":"import { PlatformPOTabs } from \"@/components/po/platform-po-tabs\";\n\nexport default function PlatformPO() {\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Content Area */}\n      <main className=\"flex-1 overflow-y-auto p-6 bg-gradient-to-br from-gray-50 to-blue-50 dark:from-gray-900 dark:to-gray-800\">\n        <PlatformPOTabs />\n      </main>\n    </div>\n  );\n}\n","size_bytes":393},"client/src/pages/po-list.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { Bell, Search, Eye, Edit, Trash2, Plus, Filter, Download, RefreshCw } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport * as XLSX from 'xlsx';\nimport type { PfPo, PfMst, PfOrderItems } from \"@shared/schema\";\n\ninterface POWithDetails extends Omit<PfPo, 'platform'> {\n  platform: PfMst;\n  orderItems: PfOrderItems[];\n}\n\nexport default function POList() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showFilter, setShowFilter] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: pos = [], isLoading, refetch } = useQuery<POWithDetails[]>({\n    queryKey: [\"/api/pos\"]\n  });\n\n  const deletePOMutation = useMutation({\n    mutationFn: (id: number) => apiRequest('DELETE', `/api/pos/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pos\"] });\n      toast({\n        title: \"Success\",\n        description: \"Purchase order deleted successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete purchase order\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleView = (po: POWithDetails) => {\n    setLocation(`/po-details/${po.id}`);\n  };\n\n  const handleEdit = (po: POWithDetails) => {\n    setLocation(`/po-edit/${po.id}`);\n  };\n\n  const handleDelete = (po: POWithDetails) => {\n    if (confirm(`Are you sure you want to delete PO ${po.po_number}?`)) {\n      deletePOMutation.mutate(po.id);\n    }\n  };\n\n  const handleRefresh = () => {\n    refetch();\n    toast({\n      title: \"Refreshed\",\n      description: \"Purchase orders refreshed successfully\"\n    });\n  };\n\n  const handleExport = () => {\n    // Prepare PO summary data\n    const poSummaryData = filteredPOs.map(po => {\n      const { totalQuantity, totalValue } = calculatePOTotals(po.orderItems);\n      return {\n        'PO Number': po.po_number,\n        'Platform': po.platform.pf_name,\n        'Status': po.status,\n        'Order Date': format(new Date(po.order_date), 'yyyy-MM-dd'),\n        'Expiry Date': po.expiry_date ? format(new Date(po.expiry_date), 'yyyy-MM-dd') : 'Not set',\n        'City': po.city,\n        'State': po.state,\n        'Location': `${po.city}, ${po.state}`,\n        'Distributor': po.serving_distributor || 'Not assigned',\n        'Total Items': po.orderItems.length,\n        'Total Quantity': totalQuantity,\n        'Total Value': parseFloat(totalValue.toFixed(2))\n      };\n    });\n\n    // Prepare detailed order items data\n    const orderItemsData: any[] = [];\n    filteredPOs.forEach(po => {\n      po.orderItems.forEach(item => {\n        orderItemsData.push({\n          'PO Number': po.po_number,\n          'Platform': po.platform.pf_name,\n          'Item Name': item.item_name,\n          'SAP Code': item.sap_code || 'N/A',\n          'Quantity': item.quantity,\n          'Basic Rate': parseFloat(item.basic_rate || '0'),\n          'GST Rate': parseFloat(item.gst_rate || '0'),\n          'Landing Rate': parseFloat(item.landing_rate || '0'),\n          'Item Total': parseFloat((parseFloat(item.landing_rate || '0') * item.quantity).toFixed(2)),\n          'Status': item.status || 'Pending'\n        });\n      });\n    });\n\n    // Create a new workbook\n    const workbook = XLSX.utils.book_new();\n    \n    // Create PO Summary worksheet\n    const poSummaryWorksheet = XLSX.utils.json_to_sheet(poSummaryData);\n    const poSummaryColWidths = [\n      { wch: 15 }, { wch: 20 }, { wch: 12 }, { wch: 12 }, { wch: 12 },\n      { wch: 15 }, { wch: 15 }, { wch: 25 }, { wch: 20 }, { wch: 12 },\n      { wch: 15 }, { wch: 15 }\n    ];\n    poSummaryWorksheet['!cols'] = poSummaryColWidths;\n    XLSX.utils.book_append_sheet(workbook, poSummaryWorksheet, 'PO Summary');\n    \n    // Create Order Items worksheet if there are items\n    if (orderItemsData.length > 0) {\n      const itemsWorksheet = XLSX.utils.json_to_sheet(orderItemsData);\n      const itemsColWidths = [\n        { wch: 15 }, { wch: 20 }, { wch: 30 }, { wch: 15 }, \n        { wch: 10 }, { wch: 12 }, { wch: 10 }, { wch: 12 },\n        { wch: 12 }, { wch: 12 }\n      ];\n      itemsWorksheet['!cols'] = itemsColWidths;\n      XLSX.utils.book_append_sheet(workbook, itemsWorksheet, 'Order Items');\n    }\n    \n    // Generate filename with current date\n    const filename = `purchase-orders-${format(new Date(), 'yyyy-MM-dd')}.xlsx`;\n    \n    // Write file\n    XLSX.writeFile(workbook, filename);\n    \n    toast({\n      title: \"Export Complete\",\n      description: `${filteredPOs.length} purchase orders with ${orderItemsData.length} items exported to Excel`\n    });\n  };\n\n  const filteredPOs = pos.filter(po => \n    po.po_number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    po.platform.pf_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    po.status.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    `${po.city}, ${po.state}`.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'open': return 'default';\n      case 'closed': return 'secondary';\n      case 'cancelled': return 'destructive';\n      case 'expired': return 'destructive';\n      case 'duplicate': return 'outline';\n      default: return 'default';\n    }\n  };\n\n  const calculatePOTotals = (items: PfOrderItems[]) => {\n    const totalQuantity = items.reduce((sum, item) => sum + item.quantity, 0);\n    const totalValue = items.reduce((sum, item) => {\n      return sum + (parseFloat(item.landing_rate) * item.quantity);\n    }, 0);\n    return { totalQuantity, totalValue };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Loading purchase orders...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-900 dark:to-gray-800 shadow-lg border-b border-blue-100 dark:border-gray-700 px-6 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n              Purchase Orders\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2 text-lg\">View and manage all platform purchase orders</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            {/* Search */}\n            <div className=\"relative group\">\n              <Input \n                type=\"text\" \n                placeholder=\"Search POs...\" \n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-64 pl-12 pr-4 py-3 border-0 bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm rounded-xl shadow-md focus:ring-2 focus:ring-blue-500 focus:shadow-lg transition-all duration-200 outline-none\"\n              />\n              <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 group-focus-within:text-blue-500 transition-colors\" size={20} />\n            </div>\n            {/* Create New PO */}\n            <Link href=\"/platform-po\">\n              <Button className=\"bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 shadow-lg px-6 py-3 text-white font-medium rounded-xl\">\n                <Plus className=\"mr-2 h-5 w-5\" />\n                Create New PO\n              </Button>\n            </Link>\n            {/* Notifications */}\n            <button className=\"relative p-2 text-gray-400 hover:text-gray-600 transition-colors\">\n              <Bell size={20} />\n              <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center\">3</span>\n            </button>\n          </div>\n        </div>\n      </header>\n\n      {/* Content Area */}\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          {filteredPOs.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n                  <Search className=\"w-12 h-12 text-gray-400\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Purchase Orders Found</h3>\n                <p className=\"text-gray-600 text-center mb-4\">\n                  You haven't created any purchase orders yet. Create your first PO to get started.\n                </p>\n                <Link href=\"/platform-po\">\n                  <Button>\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Create First PO\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-6\">\n              {filteredPOs.map((po) => {\n                const { totalQuantity, totalValue } = calculatePOTotals(po.orderItems);\n                \n                return (\n                  <Card key={po.id} className=\"shadow-lg border-0 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 hover:scale-[1.02]\">\n                    <CardHeader className=\"pb-4 bg-gradient-to-r from-slate-50 to-gray-50 dark:from-gray-800 dark:to-gray-900 border-b border-gray-100 dark:border-gray-700\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div>\n                            <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">{po.po_number}</CardTitle>\n                            <p className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">{po.platform.pf_name}</p>\n                          </div>\n                          <Badge \n                            variant={getStatusBadgeVariant(po.status)}\n                            className=\"px-3 py-1 text-xs font-semibold\"\n                          >\n                            {po.status}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => handleView(po)}\n                            className=\"hover:bg-blue-50 border-blue-200\"\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => handleEdit(po)}\n                            className=\"hover:bg-green-50 border-green-200\"\n                          >\n                            <Edit className=\"h-4 w-4 mr-1\" />\n                            Edit\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => handleDelete(po)}\n                            disabled={deletePOMutation.isPending}\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200\"\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-1\" />\n                            Delete\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">Order Date</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {format(new Date(po.order_date), 'MMM dd, yyyy')}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">Expiry Date</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {po.expiry_date ? format(new Date(po.expiry_date), 'MMM dd, yyyy') : 'Not set'}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">Location</p>\n                          <p className=\"text-sm text-gray-600\">{po.city}, {po.state}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">Distributor</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {po.serving_distributor || 'Not assigned'}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t border-gray-200\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">Total Items</p>\n                          <p className=\"text-lg font-semibold text-primary\">{po.orderItems.length}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">Total Quantity</p>\n                          <p className=\"text-lg font-semibold text-primary\">{totalQuantity}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">Total Value</p>\n                          <p className=\"text-lg font-semibold text-primary\">₹{totalValue.toFixed(2)}</p>\n                        </div>\n                      </div>\n\n                      {po.orderItems.length > 0 && (\n                        <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                          <p className=\"text-sm font-medium text-gray-900 mb-2\">Items Preview</p>\n                          <div className=\"space-y-1\">\n                            {po.orderItems.slice(0, 3).map((item) => (\n                              <div key={item.id} className=\"flex justify-between text-sm\">\n                                <span className=\"text-gray-600\">{item.item_name}</span>\n                                <span className=\"text-gray-900\">Qty: {item.quantity}</span>\n                              </div>\n                            ))}\n                            {po.orderItems.length > 3 && (\n                              <p className=\"text-xs text-gray-500\">\n                                +{po.orderItems.length - 3} more items\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":16107},"client/src/types/index.ts":{"content":"export interface ApiError {\n  message: string;\n  errors?: any[];\n}\n\nexport interface SearchableItem {\n  id: number;\n  name: string;\n  code: string;\n  category?: string;\n  subcategory?: string;\n  gstRate?: number;\n}\n\nexport interface POSummary {\n  totalItems: number;\n  totalQuantity: number;\n  totalValueWithoutTax: number;\n  totalValueWithTax: number;\n}\n","size_bytes":355},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  ChartLine, \n  ShoppingCart, \n  Truck, \n  Upload, \n  Package, \n  Store, \n  User,\n  Database\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ntype NavigationItem = {\n  name: string;\n  href: string;\n  icon: any;\n  active: boolean;\n  description?: string;\n  comingSoon?: boolean;\n};\n\nconst navigation: NavigationItem[] = [\n  {\n    name: \"Dashboard\",\n    href: \"/\",\n    icon: ChartLine,\n    active: true\n  },\n  {\n    name: \"Platform PO\",\n    href: \"/platform-po\",\n    icon: ShoppingCart,\n    active: true,\n    description: \"Create, upload & manage platform orders\"\n  },\n  {\n    name: \"Distributor PO\",\n    href: \"/distributor-po\",\n    icon: Truck,\n    active: true,\n    description: \"Create & manage distributor purchase orders\"\n  },\n  {\n    name: \"Secondary Sales\",\n    href: \"/secondary-sales\",\n    icon: Upload,\n    active: true,\n    description: \"Upload & manage secondary sales data from platforms\"\n  },\n  {\n    name: \"Inventory\",\n    href: \"/inventory\",\n    icon: Package,\n    active: true,\n    description: \"Upload & manage inventory data from platforms\"\n  },\n  {\n    name: \"SAP Sync\",\n    href: \"/sap-sync\", \n    icon: Database,\n    active: true,\n    description: \"Sync item master data from SAP B1 Hanna ERP\"\n  },\n  {\n    name: \"SQL Query\",\n    href: \"/sql-query\",\n    icon: Database,\n    active: true,\n    description: \"Execute custom SQL queries and generate reports\"\n  },\n\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"w-64 bg-white shadow-lg border-r border-gray-200 flex flex-col h-screen\">\n      {/* Logo Section */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Store className=\"text-white text-lg\" size={20} />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-semibold text-gray-900\">POJivo E-Com</h1>\n          </div>\n        </div>\n      </div>\n      {/* Navigation Section */}\n      <nav className=\"flex-1 px-4 py-6 space-y-2 overflow-y-scroll\" style={{scrollbarWidth: 'thin'}}>\n        {navigation.map((item) => {\n          const isActive = location === item.href;\n          const Icon = item.icon;\n\n          return (\n            <Link key={item.name} to={item.href}>\n              <div className={cn(\n                \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors duration-200\",\n                isActive ? \"text-primary bg-blue-50 border border-blue-200 font-medium\" : \"text-gray-700 hover:bg-gray-50 hover:text-primary\",\n                !item.active && \"opacity-50 pointer-events-none\"\n              )}>\n                <Icon size={20} />\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-medium\">{item.name}</span>\n                    {item.comingSoon && (\n                      <span className=\"px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full\">Coming Soon</span>\n                    )}\n                  </div>\n                  {item.description && (\n                    <p className=\"text-xs text-gray-500 mt-1\">{item.description}</p>\n                  )}\n                </div>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n      {/* User Section */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <div className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 cursor-pointer\">\n          <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center\">\n            <User size={16} className=\"text-gray-600\" />\n          </div>\n          <div>\n            <p className=\"text-sm font-medium text-gray-900\">Admin User</p>\n            <p className=\"text-xs text-gray-500\">System Administrator</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3991},"client/src/components/po/line-item-row.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Trash2, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useDebounce } from \"@/hooks/use-debounce\";\nimport type { PfItemMst, SapItemMst, PfMst, InsertPfOrderItems } from \"@shared/schema\";\n\ninterface LineItem extends InsertPfOrderItems {\n  tempId: string;\n}\n\ninterface LineItemRowProps {\n  item: LineItem;\n  platformId?: number;\n  onUpdate: (updates: Partial<LineItem>) => void;\n  onRemove: () => void;\n}\n\ninterface PlatformItemWithDetails extends PfItemMst {\n  sapItem: SapItemMst;\n  platform: PfMst;\n}\n\nconst itemStatusOptions = [\n  { value: \"Pending\", label: \"Pending\" },\n  { value: \"Invoiced\", label: \"Invoiced\" },\n  { value: \"Dispatched\", label: \"Dispatched\" },\n  { value: \"Delivered\", label: \"Delivered\" },\n  { value: \"Stock Issue\", label: \"Stock Issue\" },\n  { value: \"Cancelled\", label: \"Cancelled\" },\n  { value: \"Expired\", label: \"Expired\" },\n  { value: \"Price Difference\", label: \"Price Difference\" },\n  { value: \"MOV Issue\", label: \"MOV Issue\" },\n  { value: \"Hold\", label: \"Hold\" },\n  { value: \"CN\", label: \"CN\" },\n  { value: \"RTV\", label: \"RTV\" },\n  { value: \"Case Pack Issue\", label: \"Case Pack Issue\" }\n];\n\nexport function LineItemRow({ item, platformId, onUpdate, onRemove }: LineItemRowProps) {\n  const [searchTerm, setSearchTerm] = useState(item.item_name || \"\");\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  \n  // Debounce the search term to avoid too many API calls\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\n\n  // Fetch platform items for search\n  const { data: platformItems = [], isLoading } = useQuery<PlatformItemWithDetails[]>({\n    queryKey: [\"/api/platform-items\", platformId, debouncedSearchTerm],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (platformId) params.append('platformId', platformId.toString());\n      if (debouncedSearchTerm) params.append('search', debouncedSearchTerm);\n      \n      const response = await fetch(`/api/platform-items?${params.toString()}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch platform items');\n      }\n      return response.json();\n    },\n    enabled: !!platformId && debouncedSearchTerm.length > 0 && isSearching\n  });\n\n  // Handle clicking outside of dropdown\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current && \n        !dropdownRef.current.contains(event.target as Node) &&\n        inputRef.current &&\n        !inputRef.current.contains(event.target as Node)\n      ) {\n        setShowDropdown(false);\n        setIsSearching(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // Calculate landing rate when basic rate or GST rate changes\n  useEffect(() => {\n    const basicRate = parseFloat(item.basic_rate || \"0\");\n    const gstRate = parseFloat(item.gst_rate || \"0\");\n    const landingRate = basicRate + (basicRate * gstRate / 100);\n    \n    if (landingRate !== parseFloat(item.landing_rate || \"0\")) {\n      onUpdate({ landing_rate: landingRate.toFixed(2) });\n    }\n  }, [item.basic_rate, item.gst_rate, item.landing_rate, onUpdate]);\n\n  const handleItemSelect = (selectedItem: PlatformItemWithDetails) => {\n    onUpdate({\n      item_name: selectedItem.pf_itemname,\n      sap_code: selectedItem.sapItem.itemcode,\n      category: selectedItem.sapItem.itemgroup || \"\",\n      subcategory: selectedItem.sapItem.subgroup || \"\",\n      gst_rate: selectedItem.sapItem.taxrate?.toString() || \"0\"\n    });\n    setSearchTerm(selectedItem.pf_itemname);\n    setShowDropdown(false);\n    setIsSearching(false);\n  };\n\n  const handleInputChange = (field: keyof LineItem, value: string | number) => {\n    onUpdate({ [field]: value });\n  };\n\n  const handleSearchInputChange = (value: string) => {\n    setSearchTerm(value);\n    onUpdate({ item_name: value });\n    setIsSearching(true);\n    setShowDropdown(value.length > 0);\n  };\n\n  return (\n    <tr className=\"hover:bg-gray-50 dark:hover:bg-gray-900/50 transition-colors\">\n      <td className=\"px-4 py-4\">\n        <div className=\"relative w-full\">\n          <div className=\"relative\">\n            <Input\n              ref={inputRef}\n              value={searchTerm}\n              onChange={(e) => handleSearchInputChange(e.target.value)}\n              placeholder=\"Search and select item...\"\n              onFocus={() => {\n                if (searchTerm.length > 0) {\n                  setIsSearching(true);\n                  setShowDropdown(true);\n                }\n              }}\n              className=\"w-full pr-8 text-sm\"\n            />\n            {isSearching && (\n              <Search className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            )}\n          </div>\n          \n          {showDropdown && (\n            <div \n              ref={dropdownRef}\n              className=\"absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-xl max-h-60 overflow-y-auto\"\n            >\n              {isLoading ? (\n                <div className=\"px-4 py-3 text-center text-gray-500\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary mx-auto\"></div>\n                  <p className=\"mt-2 text-sm\">Searching...</p>\n                </div>\n              ) : platformItems.length > 0 ? (\n                platformItems.map((platformItem) => (\n                  <div\n                    key={platformItem.id}\n                    className=\"px-4 py-3 hover:bg-blue-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors\"\n                    onClick={() => handleItemSelect(platformItem)}\n                  >\n                    <div className=\"font-medium text-gray-900\">{platformItem.pf_itemname}</div>\n                    <div className=\"text-sm text-gray-600 mt-1\">\n                      <span className=\"font-medium\">SAP:</span> {platformItem.sapItem.itemcode} | \n                      <span className=\"ml-2\">{platformItem.sapItem.itemgroup}</span>\n                      {platformItem.sapItem.taxrate && (\n                        <span className=\"ml-2 text-green-600\">GST: {platformItem.sapItem.taxrate}%</span>\n                      )}\n                    </div>\n                  </div>\n                ))\n              ) : debouncedSearchTerm.length > 0 ? (\n                <div className=\"px-4 py-3 text-center text-gray-500\">\n                  No items found for \"{debouncedSearchTerm}\"\n                </div>\n              ) : null}\n            </div>\n          )}\n        </div>\n      </td>\n      \n      <td className=\"px-4 py-4\">\n        <Input \n          value={item.sap_code || \"\"} \n          readOnly \n          className=\"w-full bg-gray-50 text-sm font-mono\"\n        />\n      </td>\n      \n      <td className=\"px-4 py-4\">\n        <Input\n          value={item.category || \"\"}\n          onChange={(e) => handleInputChange(\"category\", e.target.value)}\n          placeholder=\"Category\"\n          readOnly\n          className=\"w-full bg-gray-50 text-sm\"\n        />\n      </td>\n      \n      <td className=\"px-4 py-4\">\n        <Input\n          type=\"number\"\n          min=\"1\"\n          value={item.quantity || \"\"}\n          onChange={(e) => handleInputChange(\"quantity\", parseInt(e.target.value) || 0)}\n          placeholder=\"Qty\"\n          className=\"w-full text-sm text-center\"\n        />\n      </td>\n      \n      <td className=\"px-4 py-4\">\n        <Input\n          type=\"number\"\n          step=\"0.01\"\n          value={item.basic_rate || \"\"}\n          onChange={(e) => handleInputChange(\"basic_rate\", e.target.value)}\n          placeholder=\"0.00\"\n          className=\"w-full text-sm text-right\"\n        />\n      </td>\n      \n      <td className=\"px-4 py-4\">\n        <Input\n          type=\"number\"\n          step=\"0.01\"\n          value={item.gst_rate || \"\"}\n          onChange={(e) => handleInputChange(\"gst_rate\", e.target.value)}\n          placeholder=\"18\"\n          className=\"w-full text-sm text-center\"\n        />\n      </td>\n      \n      <td className=\"px-4 py-4\">\n        <Input\n          type=\"number\"\n          step=\"0.01\"\n          value={item.landing_rate || \"\"}\n          readOnly\n          className=\"w-full bg-gray-50 text-sm text-right font-medium text-green-600\"\n        />\n      </td>\n      \n      <td className=\"px-4 py-4\">\n        <div className=\"flex items-center justify-center space-x-1\">\n          <Select\n            value={item.status || \"Pending\"}\n            onValueChange={(value) => handleInputChange(\"status\", value)}\n          >\n            <SelectTrigger className=\"w-24 text-xs\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {itemStatusOptions.map((option) => (\n                <SelectItem key={option.value} value={option.value}>\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onRemove}\n            className=\"text-red-600 hover:text-red-800 hover:bg-red-50 p-1 h-8 w-8\"\n          >\n            <Trash2 size={14} />\n          </Button>\n        </div>\n      </td>\n    </tr>\n  );\n}\n","size_bytes":9753},"client/src/components/po/platform-po-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Plus, Check, CalendarDays } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DatePicker } from \"@/components/ui/date-picker\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { LineItemRow } from \"./line-item-row\";\nimport { SeedButton } from \"@/components/seed-button\";\nimport type { PfMst, DistributorMst, InsertPfOrderItems } from \"@shared/schema\";\n\nconst poFormSchema = z.object({\n  po_number: z.string().min(1, \"PO number is required\"),\n  platform: z.number().min(1, \"Platform selection is required\"),\n  status: z.string().min(1, \"Status is required\"),\n  order_date: z.string().min(1, \"Order date is required\"),\n  expiry_date: z.string().optional(),\n  appointment_date: z.string().optional(),\n  region: z.string().min(1, \"Region is required\"),\n  state: z.string().min(1, \"State is required\"),\n  city: z.string().min(1, \"City is required\"),\n  area: z.string().optional(),\n  serving_distributor: z.string().optional(),\n  attachment: z.string().optional()\n});\n\ntype POFormData = z.infer<typeof poFormSchema>;\n\ninterface LineItem extends InsertPfOrderItems {\n  tempId: string;\n  po_id?: number;\n}\n\nconst statusOptions = [\n  { value: \"Open\", label: \"Open\" },\n  { value: \"Closed\", label: \"Closed\" },\n  { value: \"Cancelled\", label: \"Cancelled\" },\n  { value: \"Expired\", label: \"Expired\" },\n  { value: \"Duplicate\", label: \"Duplicate\" }\n];\n\nconst regionOptions = [\n  { value: \"North India\", label: \"North India\" },\n  { value: \"South India\", label: \"South India\" },\n  { value: \"East India\", label: \"East India\" },\n  { value: \"West India\", label: \"West India\" }\n];\n\nconst stateOptions = [\n  { value: \"Punjab\", label: \"Punjab\" },\n  { value: \"Delhi\", label: \"Delhi\" },\n  { value: \"Karnataka\", label: \"Karnataka\" },\n  { value: \"Maharashtra\", label: \"Maharashtra\" },\n  { value: \"West Bengal\", label: \"West Bengal\" }\n];\n\nconst cityOptions = [\n  { value: \"Chandigarh\", label: \"Chandigarh\" },\n  { value: \"New Delhi\", label: \"New Delhi\" },\n  { value: \"Bangalore\", label: \"Bangalore\" },\n  { value: \"Mumbai\", label: \"Mumbai\" },\n  { value: \"Kolkata\", label: \"Kolkata\" }\n];\n\nexport function PlatformPOForm() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [lineItems, setLineItems] = useState<LineItem[]>([]);\n\n  const form = useForm<POFormData>({\n    resolver: zodResolver(poFormSchema),\n    defaultValues: {\n      po_number: \"\",\n      platform: 0,\n      status: \"Open\",\n      order_date: new Date().toISOString().split('T')[0],\n      expiry_date: \"\",\n      appointment_date: \"\",\n      region: \"\",\n      state: \"\",\n      city: \"\",\n      area: \"\",\n      serving_distributor: \"none\",\n      attachment: \"\"\n    }\n  });\n\n  // Fetch platforms\n  const { data: platforms = [] } = useQuery<PfMst[]>({\n    queryKey: [\"/api/platforms\"]\n  });\n\n  // Fetch distributors\n  const { data: distributors = [] } = useQuery<DistributorMst[]>({\n    queryKey: [\"/api/distributors\"]\n  });\n\n  // Create PO mutation\n  const createPoMutation = useMutation({\n    mutationFn: async (data: { po: POFormData; items: InsertPfOrderItems[] }) => {\n      const response = await apiRequest(\"POST\", \"/api/pos\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Purchase order created successfully!\"\n      });\n      form.reset();\n      setLineItems([]);\n      queryClient.invalidateQueries({ queryKey: [\"/api/pos\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create purchase order\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const addLineItem = () => {\n    const newItem: LineItem = {\n      tempId: `temp-${Date.now()}`,\n      po_id: 0, // Temporary value, will be set by backend\n      item_name: \"\",\n      quantity: 0,\n      sap_code: \"\",\n      category: \"\",\n      subcategory: \"\",\n      basic_rate: \"0\",\n      gst_rate: \"0\",\n      landing_rate: \"0\",\n      status: \"Pending\"\n    };\n    setLineItems([...lineItems, newItem]);\n  };\n\n  const updateLineItem = (tempId: string, updates: Partial<LineItem>) => {\n    setLineItems(items => \n      items.map(item => \n        item.tempId === tempId ? { ...item, ...updates } : item\n      )\n    );\n  };\n\n  const removeLineItem = (tempId: string) => {\n    setLineItems(items => items.filter(item => item.tempId !== tempId));\n  };\n\n  const calculateTotals = () => {\n    const totalQuantity = lineItems.reduce((sum, item) => sum + (item.quantity || 0), 0);\n    const totalValue = lineItems.reduce((sum, item) => {\n      const landingRate = parseFloat(item.landing_rate || \"0\");\n      const quantity = item.quantity || 0;\n      return sum + (landingRate * quantity);\n    }, 0);\n\n    return { totalQuantity, totalValue };\n  };\n\n  const onSubmit = (data: POFormData) => {\n    if (lineItems.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please add at least one line item\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const items: InsertPfOrderItems[] = lineItems.map(({ tempId, ...item }) => ({\n      ...item,\n      po_id: 0 // Will be set by the backend\n    }));\n\n    // Convert \"none\" back to null for database storage\n    const processedData = {\n      ...data,\n      serving_distributor: data.serving_distributor === \"none\" ? null : data.serving_distributor\n    };\n\n    createPoMutation.mutate({ po: processedData, items });\n  };\n\n  const { totalQuantity, totalValue } = calculateTotals();\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      {/* Form Header */}\n      <Card className=\"shadow-lg border-0 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-900 dark:to-gray-800\">\n        <CardHeader className=\"border-b border-blue-100 dark:border-gray-700 bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n              Create New Purchase Order\n            </CardTitle>\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                type=\"submit\" \n                form=\"po-form\"\n                disabled={createPoMutation.isPending}\n                className=\"bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700\"\n              >\n                <Check className=\"mr-2 h-4 w-4\" />\n                {createPoMutation.isPending ? 'Creating...' : 'Create PO'}\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"p-8 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm\">\n          <Form {...form}>\n            <form id=\"po-form\" onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n              \n              {/* Basic Information Section */}\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center space-x-2 pb-2\">\n                  <div className=\"h-px bg-gradient-to-r from-blue-200 to-indigo-200 flex-1\"></div>\n                  <h4 className=\"text-sm font-medium text-blue-600 dark:text-blue-400 px-3\">Basic Information</h4>\n                  <div className=\"h-px bg-gradient-to-r from-indigo-200 to-blue-200 flex-1\"></div>\n                </div>\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"po_number\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>PO Number *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter PO number\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"platform\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Platform *</FormLabel>\n                      <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select Platform\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {platforms.map((platform) => (\n                            <SelectItem key={platform.id} value={platform.id.toString()}>\n                              {platform.pf_name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select Status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {statusOptions.map((option) => (\n                            <SelectItem key={option.value} value={option.value}>\n                              {option.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"order_date\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <CalendarDays className=\"h-4 w-4\" />\n                        Order Date *\n                      </FormLabel>\n                      <FormControl>\n                        <DatePicker\n                          date={field.value ? new Date(field.value) : undefined}\n                          onDateChange={(date) => field.onChange(date ? date.toISOString().split('T')[0] : '')}\n                          placeholder=\"Select order date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"expiry_date\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <CalendarDays className=\"h-4 w-4\" />\n                        Expiry Date\n                      </FormLabel>\n                      <FormControl>\n                        <DatePicker\n                          date={field.value ? new Date(field.value) : undefined}\n                          onDateChange={(date) => field.onChange(date ? date.toISOString().split('T')[0] : '')}\n                          placeholder=\"Select expiry date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"appointment_date\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <CalendarDays className=\"h-4 w-4\" />\n                        Appointment Date\n                      </FormLabel>\n                      <FormControl>\n                        <DatePicker\n                          date={field.value ? new Date(field.value) : undefined}\n                          onDateChange={(date) => field.onChange(date ? date.toISOString().split('T')[0] : '')}\n                          placeholder=\"Select appointment date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"region\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Region *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select Region\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {regionOptions.map((option) => (\n                            <SelectItem key={option.value} value={option.value}>\n                              {option.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"state\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>State *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select State\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {stateOptions.map((option) => (\n                            <SelectItem key={option.value} value={option.value}>\n                              {option.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"city\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>City *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select City\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {cityOptions.map((option) => (\n                            <SelectItem key={option.value} value={option.value}>\n                              {option.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"area\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Area</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter area/locality\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"serving_distributor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Serving Distributor</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value || \"none\"}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select Distributor\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"none\">-- No Distributor --</SelectItem>\n                          {distributors.map((distributor) => (\n                            <SelectItem key={distributor.id} value={distributor.distributor_name}>\n                              {distributor.distributor_name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                </div>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      {/* Line Items Section */}\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader className=\"border-b border-blue-100 dark:border-gray-700 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-gray-800 dark:to-gray-900\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent\">\n              Order Items\n            </CardTitle>\n            <Button \n              type=\"button\" \n              onClick={addLineItem} \n              className=\"bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 shadow-md\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Item\n            </Button>\n          </div>\n        </CardHeader>\n\n        {/* Items Table */}\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full table-fixed min-w-[1200px]\">\n            <colgroup>\n              <col className=\"w-80\" />\n              <col className=\"w-28\" />\n              <col className=\"w-32\" />\n              <col className=\"w-24\" />\n              <col className=\"w-28\" />\n              <col className=\"w-24\" />\n              <col className=\"w-28\" />\n              <col className=\"w-32\" />\n            </colgroup>\n            <thead className=\"bg-gradient-to-r from-slate-50 to-gray-50 dark:from-gray-800 dark:to-gray-900\">\n              <tr>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider\">Item Details</th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider\">SAP Code</th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider\">Category</th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider\">Quantity</th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider\">Basic Rate</th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider\">GST Rate</th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider\">Landing Rate</th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider\">Actions</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white dark:bg-gray-950 divide-y divide-gray-100 dark:divide-gray-800\">\n              {lineItems.map((item) => (\n                <LineItemRow\n                  key={item.tempId}\n                  item={item}\n                  platformId={form.watch(\"platform\")}\n                  onUpdate={(updates) => updateLineItem(item.tempId, updates)}\n                  onRemove={() => removeLineItem(item.tempId)}\n                />\n              ))}\n              {lineItems.length === 0 && (\n                <tr>\n                  <td colSpan={8} className=\"px-6 py-8 text-center text-gray-500\">\n                    No items added yet. Click \"Add Item\" to get started.\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n\n        {/* Summary Section */}\n        {lineItems.length > 0 && (\n          <div className=\"px-6 py-6 border-t border-blue-100 dark:border-gray-700 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-900\">\n            <div className=\"flex justify-between items-center\">\n              <div className=\"flex items-center space-x-6 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"h-2 w-2 bg-blue-500 rounded-full\"></div>\n                  <span>{lineItems.length} item(s)</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"h-2 w-2 bg-green-500 rounded-full\"></div>\n                  <span>Total Quantity: {totalQuantity}</span>\n                </div>\n              </div>\n              <div className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n                Total Value: ₹{totalValue.toFixed(2)}\n              </div>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      {/* Action Buttons */}\n      <div className=\"mt-6 flex justify-end space-x-4\">\n        <Button \n          type=\"submit\" \n          form=\"po-form\"\n          disabled={createPoMutation.isPending}\n          className=\"px-8 font-medium\"\n        >\n          Create Purchase Order\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23076},"client/src/components/po/platform-po-tabs.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, List, BarChart3, Upload, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { PlatformPOForm } from \"./platform-po-form\";\nimport { POListView } from \"./po-list-view\";\nimport { OrderItemsListView } from \"./order-items-list-view\";\nimport { NewPODropdown } from \"./new-po-dropdown\";\nimport { UnifiedUploadComponent } from \"./unified-upload-component\";\n\nexport function PlatformPOTabs() {\n  const [activeTab, setActiveTab] = useState(\"list\");\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n\n  return (\n    <div className=\"max-w-7xl mx-auto space-y-6\">\n      {/* Module Header */}\n      <Card className=\"shadow-lg border-0 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-900 dark:to-gray-800\">\n        <CardHeader className=\"border-b border-blue-100 dark:border-gray-700 bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n                Platform Purchase Orders\n              </CardTitle>\n              <p className=\"text-gray-600 dark:text-gray-300 mt-2\">\n                Create, manage, and track purchase orders for e-commerce platforms\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <NewPODropdown \n                onCreatePO={() => {\n                  setShowCreateForm(true);\n                  setShowUploadModal(false);\n                }}\n                onUploadPO={() => {\n                  setShowUploadModal(true);\n                  setShowCreateForm(false);\n                }}\n              />\n              <div className=\"flex items-center space-x-4 text-sm\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"h-2 w-2 bg-green-500 rounded-full animate-pulse\"></div>\n                  <span className=\"text-gray-600 dark:text-gray-300\">System Online</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Main Content with Tabs */}\n      <Card className=\"shadow-lg border-0\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          {!showUploadModal && !showCreateForm && (\n            <CardHeader className=\"border-b border-gray-100 dark:border-gray-700 bg-gradient-to-r from-slate-50 to-gray-50 dark:from-gray-800 dark:to-gray-900\">\n              <TabsList className=\"grid w-full grid-cols-2 bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm shadow-md rounded-xl\">\n                <TabsTrigger \n                  value=\"list\" \n                  className=\"flex items-center space-x-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-green-600 data-[state=active]:to-emerald-600 data-[state=active]:text-white\"\n                >\n                  <List className=\"h-4 w-4\" />\n                  <span>View POs</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"analytics\" \n                  className=\"flex items-center space-x-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-600 data-[state=active]:to-pink-600 data-[state=active]:text-white\"\n                >\n                  <BarChart3 className=\"h-4 w-4\" />\n                  <span>Order Items</span>\n                </TabsTrigger>\n              </TabsList>\n            </CardHeader>\n          )}\n\n          <CardContent className=\"p-0\">\n            {!showUploadModal && !showCreateForm && (\n              <>\n                <TabsContent value=\"list\" className=\"mt-0\">\n                  <div className=\"p-6\">\n                    <POListView />\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"analytics\" className=\"mt-0\">\n                  <div className=\"p-6\">\n                    <OrderItemsListView />\n                  </div>\n                </TabsContent>\n              </>\n            )}\n\n            {showUploadModal && (\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setShowUploadModal(false)}\n                      className=\"flex items-center space-x-2\"\n                    >\n                      <ArrowLeft className=\"h-4 w-4\" />\n                      <span>Back</span>\n                    </Button>\n                    <h3 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">Upload Purchase Order</h3>\n                  </div>\n                </div>\n                <UnifiedUploadComponent \n                  onComplete={() => {\n                    setShowUploadModal(false);\n                    setActiveTab(\"list\");\n                  }}\n                />\n              </div>\n            )}\n\n            {showCreateForm && (\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setShowCreateForm(false)}\n                      className=\"flex items-center space-x-2\"\n                    >\n                      <ArrowLeft className=\"h-4 w-4\" />\n                      <span>Back</span>\n                    </Button>\n                    <h3 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">Create New Purchase Order</h3>\n                  </div>\n                </div>\n                <PlatformPOForm />\n              </div>\n            )}\n          </CardContent>\n        </Tabs>\n      </Card>\n    </div>\n  );\n}","size_bytes":6240},"client/src/components/po/po-list-view.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format, isAfter, isBefore, isEqual, parseISO } from \"date-fns\";\nimport { Search, Eye, Edit, Trash2, Filter, Download, RefreshCw, X, Calendar } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport * as XLSX from 'xlsx';\nimport type { PfMst, PfOrderItems } from \"@shared/schema\";\n\ninterface POWithDetails {\n  id: number;\n  po_number: string;\n  status: string;\n  order_date: Date;\n  expiry_date: Date | null;\n  city: string;\n  state: string;\n  serving_distributor: string | null;\n  platform: PfMst;\n  orderItems: PfOrderItems[];\n}\n\nexport function POListView() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showFilter, setShowFilter] = useState(false);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [platformFilter, setPlatformFilter] = useState(\"all\");\n  const [orderDateFrom, setOrderDateFrom] = useState(\"\");\n  const [orderDateTo, setOrderDateTo] = useState(\"\");\n  const [expiryDateFrom, setExpiryDateFrom] = useState(\"\");\n  const [expiryDateTo, setExpiryDateTo] = useState(\"\");\n  \n  const { data: pos = [], isLoading, refetch } = useQuery<POWithDetails[]>({\n    queryKey: [\"/api/pos\"]\n  });\n\n  const { data: platforms = [] } = useQuery<PfMst[]>({\n    queryKey: [\"/api/platforms\"]\n  });\n\n  const deletePOMutation = useMutation({\n    mutationFn: (id: number) => apiRequest('DELETE', `/api/pos/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pos\"] });\n      toast({\n        title: \"Success\",\n        description: \"Purchase order deleted successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete purchase order\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleView = (po: POWithDetails) => {\n    setLocation(`/po-details/${po.id}`);\n  };\n\n  const handleEdit = (po: POWithDetails) => {\n    // For Zepto POs, redirect to Zepto-specific edit page\n    if (po.platform.pf_name === \"Zepto\") {\n      setLocation(`/zepto-pos/edit/${po.id}`);\n    } else {\n      setLocation(`/po-edit/${po.id}`);\n    }\n  };\n\n  const handleDelete = (po: POWithDetails) => {\n    if (confirm(`Are you sure you want to delete PO ${po.po_number}?`)) {\n      deletePOMutation.mutate(po.id);\n    }\n  };\n\n  const handleRefresh = () => {\n    refetch();\n    toast({\n      title: \"Refreshed\",\n      description: \"Purchase orders list has been refreshed\"\n    });\n  };\n\n  const handleExport = () => {\n    // Prepare PO summary data\n    const poSummaryData = filteredPOs.map(po => {\n      const { totalQuantity, totalValue } = calculatePOTotals(po.orderItems);\n      return {\n        'PO Number': po.po_number,\n        'Platform': po.platform.pf_name,\n        'Status': po.status,\n        'Order Date': format(new Date(po.order_date), 'yyyy-MM-dd'),\n        'Expiry Date': po.expiry_date ? format(new Date(po.expiry_date), 'yyyy-MM-dd') : 'Not set',\n        'City': po.city,\n        'State': po.state,\n        'Location': `${po.city}, ${po.state}`,\n        'Distributor': po.serving_distributor || 'Not assigned',\n        'Total Items': po.orderItems.length,\n        'Total Quantity': totalQuantity,\n        'Total Value': parseFloat(totalValue.toFixed(2))\n      };\n    });\n\n    // Prepare detailed order items data\n    const orderItemsData: any[] = [];\n    filteredPOs.forEach(po => {\n      po.orderItems.forEach(item => {\n        orderItemsData.push({\n          'PO Number': po.po_number,\n          'Platform': po.platform.pf_name,\n          'Item Name': item.item_name,\n          'SAP Code': item.sap_code || 'N/A',\n          'Quantity': item.quantity,\n          'Basic Rate': parseFloat(item.basic_rate || '0'),\n          'GST Rate': parseFloat(item.gst_rate || '0'),\n          'Landing Rate': parseFloat(item.landing_rate || '0'),\n          'Item Total': parseFloat((parseFloat(item.landing_rate || '0') * item.quantity).toFixed(2)),\n          'Status': item.status || 'Pending'\n        });\n      });\n    });\n\n    // Create a new workbook\n    const workbook = XLSX.utils.book_new();\n    \n    // Create PO Summary worksheet\n    const poSummaryWorksheet = XLSX.utils.json_to_sheet(poSummaryData);\n    const poSummaryColWidths = [\n      { wch: 15 }, { wch: 20 }, { wch: 12 }, { wch: 12 }, { wch: 12 },\n      { wch: 15 }, { wch: 15 }, { wch: 25 }, { wch: 20 }, { wch: 12 },\n      { wch: 15 }, { wch: 15 }\n    ];\n    poSummaryWorksheet['!cols'] = poSummaryColWidths;\n    XLSX.utils.book_append_sheet(workbook, poSummaryWorksheet, 'PO Summary');\n    \n    // Create Order Items worksheet if there are items\n    if (orderItemsData.length > 0) {\n      const itemsWorksheet = XLSX.utils.json_to_sheet(orderItemsData);\n      const itemsColWidths = [\n        { wch: 15 }, { wch: 20 }, { wch: 30 }, { wch: 15 }, \n        { wch: 10 }, { wch: 12 }, { wch: 10 }, { wch: 12 },\n        { wch: 12 }, { wch: 12 }\n      ];\n      itemsWorksheet['!cols'] = itemsColWidths;\n      XLSX.utils.book_append_sheet(workbook, itemsWorksheet, 'Order Items');\n    }\n    \n    // Generate filename with current date\n    const filename = `purchase-orders-${format(new Date(), 'yyyy-MM-dd')}.xlsx`;\n    \n    // Write file\n    XLSX.writeFile(workbook, filename);\n    \n    toast({\n      title: \"Export Complete\",\n      description: `${filteredPOs.length} purchase orders with ${orderItemsData.length} items exported to Excel`\n    });\n  };\n\n  const clearFilters = () => {\n    setSearchTerm(\"\");\n    setStatusFilter(\"all\");\n    setPlatformFilter(\"all\");\n    setOrderDateFrom(\"\");\n    setOrderDateTo(\"\");\n    setExpiryDateFrom(\"\");\n    setExpiryDateTo(\"\");\n    setShowFilter(false);\n  };\n\n  // Filter POs based on search term and filters\n  const filteredPOs = pos.filter(po => {\n    const matchesSearch = searchTerm === \"\" || \n      po.po_number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      po.platform.pf_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      po.status.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      `${po.city}, ${po.state}`.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || po.status.toLowerCase() === statusFilter.toLowerCase();\n    const matchesPlatform = platformFilter === \"all\" || po.platform.id.toString() === platformFilter;\n    \n    // Date filters\n    const poOrderDate = new Date(po.order_date);\n    const matchesOrderDateFrom = orderDateFrom === \"\" || isAfter(poOrderDate, new Date(orderDateFrom)) || isEqual(poOrderDate, new Date(orderDateFrom));\n    const matchesOrderDateTo = orderDateTo === \"\" || isBefore(poOrderDate, new Date(orderDateTo)) || isEqual(poOrderDate, new Date(orderDateTo));\n    \n    let matchesExpiryDateFrom = true;\n    let matchesExpiryDateTo = true;\n    if (po.expiry_date) {\n      const poExpiryDate = new Date(po.expiry_date);\n      matchesExpiryDateFrom = expiryDateFrom === \"\" || isAfter(poExpiryDate, new Date(expiryDateFrom)) || isEqual(poExpiryDate, new Date(expiryDateFrom));\n      matchesExpiryDateTo = expiryDateTo === \"\" || isBefore(poExpiryDate, new Date(expiryDateTo)) || isEqual(poExpiryDate, new Date(expiryDateTo));\n    } else {\n      // If no expiry date, only match if no expiry date filters are set\n      matchesExpiryDateFrom = expiryDateFrom === \"\";\n      matchesExpiryDateTo = expiryDateTo === \"\";\n    }\n    \n    return matchesSearch && matchesStatus && matchesPlatform && \n           matchesOrderDateFrom && matchesOrderDateTo && \n           matchesExpiryDateFrom && matchesExpiryDateTo;\n  });\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'open': return 'default';\n      case 'closed': return 'secondary';\n      case 'cancelled': return 'destructive';\n      case 'expired': return 'destructive';\n      case 'duplicate': return 'outline';\n      default: return 'default';\n    }\n  };\n\n  const calculatePOTotals = (items: PfOrderItems[]) => {\n    const totalQuantity = items.reduce((sum, item) => sum + item.quantity, 0);\n    const totalValue = items.reduce((sum, item) => {\n      return sum + (parseFloat(item.landing_rate) * item.quantity);\n    }, 0);\n    return { totalQuantity, totalValue };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"h-12 w-12 animate-spin rounded-full border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600 dark:text-gray-300\">Loading purchase orders...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Controls Bar */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between flex-wrap gap-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n              <Input\n                type=\"text\"\n                placeholder=\"Search purchase orders...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 w-80 bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200 dark:border-gray-600\"\n              />\n            </div>\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowFilter(!showFilter)}\n              className=\"flex items-center space-x-2\"\n            >\n              <Filter className=\"h-4 w-4\" />\n              <span>Filter</span>\n              {(statusFilter !== \"all\" || platformFilter !== \"all\" || \n                orderDateFrom !== \"\" || orderDateTo !== \"\" || \n                expiryDateFrom !== \"\" || expiryDateTo !== \"\") && (\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n              )}\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n              {filteredPOs.length} of {pos.length} orders\n            </span>\n            <Button \n              variant=\"outline\" \n              onClick={handleRefresh}\n              disabled={isLoading}\n              className=\"flex items-center space-x-2\"\n            >\n              <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n              <span>Refresh</span>\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={handleExport}\n              disabled={filteredPOs.length === 0}\n              className=\"flex items-center space-x-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              <span>Export</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Filter Panel */}\n        {showFilter && (\n          <Card className=\"border border-gray-200 dark:border-gray-700\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-sm font-medium text-gray-900 dark:text-white\">Filters</h3>\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"ghost\" size=\"sm\" onClick={clearFilters}>\n                    Clear All\n                  </Button>\n                  <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowFilter(false)}>\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"space-y-6\">\n                {/* Status and Platform Filters */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Status\n                    </Label>\n                    <Select value={statusFilter} onValueChange={setStatusFilter}>\n                      <SelectTrigger className=\"mt-2\">\n                        <SelectValue placeholder=\"All Status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Status</SelectItem>\n                        <SelectItem value=\"open\">Open</SelectItem>\n                        <SelectItem value=\"closed\">Closed</SelectItem>\n                        <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                        <SelectItem value=\"expired\">Expired</SelectItem>\n                        <SelectItem value=\"duplicate\">Duplicate</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Platform\n                    </Label>\n                    <Select value={platformFilter} onValueChange={setPlatformFilter}>\n                      <SelectTrigger className=\"mt-2\">\n                        <SelectValue placeholder=\"All Platforms\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Platforms</SelectItem>\n                        {platforms.map((platform) => (\n                          <SelectItem key={platform.id} value={platform.id.toString()}>\n                            {platform.pf_name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Date Filters */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Calendar className=\"h-4 w-4 text-gray-500\" />\n                    <h4 className=\"text-sm font-medium text-gray-900 dark:text-white\">Date Filters</h4>\n                  </div>\n                  \n                  {/* Order Date Range */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                        Order Date From\n                      </Label>\n                      <Input\n                        type=\"date\"\n                        value={orderDateFrom}\n                        onChange={(e) => setOrderDateFrom(e.target.value)}\n                        className=\"mt-2\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                        Order Date To\n                      </Label>\n                      <Input\n                        type=\"date\"\n                        value={orderDateTo}\n                        onChange={(e) => setOrderDateTo(e.target.value)}\n                        className=\"mt-2\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Expiry Date Range */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                        Expiry Date From\n                      </Label>\n                      <Input\n                        type=\"date\"\n                        value={expiryDateFrom}\n                        onChange={(e) => setExpiryDateFrom(e.target.value)}\n                        className=\"mt-2\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                        Expiry Date To\n                      </Label>\n                      <Input\n                        type=\"date\"\n                        value={expiryDateTo}\n                        onChange={(e) => setExpiryDateTo(e.target.value)}\n                        className=\"mt-2\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-2xl font-bold\">{pos.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Total POs</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {pos.filter(po => po.status === 'Open').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Open POs</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-2xl font-bold text-gray-600\">\n              {pos.filter(po => po.status === 'Closed').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Closed POs</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-2xl font-bold text-red-600\">\n              {pos.filter(po => po.status === 'Cancelled').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Cancelled POs</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* PO Cards */}\n      {pos.length === 0 ? (\n        <Card className=\"shadow-lg border-0\">\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <div className=\"w-20 h-20 bg-gradient-to-br from-blue-100 to-indigo-100 dark:from-gray-800 dark:to-gray-700 rounded-full flex items-center justify-center mb-6\">\n              <Search className=\"w-10 h-10 text-blue-500 dark:text-blue-400\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">No Purchase Orders Found</h3>\n            <p className=\"text-gray-600 dark:text-gray-300 text-center mb-6 max-w-md\">\n              You haven't created any purchase orders yet. Switch to the \"Create PO\" tab to get started.\n            </p>\n          </CardContent>\n        </Card>\n      ) : filteredPOs.length === 0 ? (\n        <Card className=\"shadow-lg border-0\">\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <div className=\"w-20 h-20 bg-gradient-to-br from-orange-100 to-yellow-100 dark:from-gray-800 dark:to-gray-700 rounded-full flex items-center justify-center mb-6\">\n              <Search className=\"w-10 h-10 text-orange-500 dark:text-orange-400\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">No Matching Purchase Orders</h3>\n            <p className=\"text-gray-600 dark:text-gray-300 text-center mb-6 max-w-md\">\n              No purchase orders match your current search and filter criteria.\n            </p>\n            <Button onClick={clearFilters} variant=\"outline\">\n              Clear Filters\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {filteredPOs.map((po) => {\n            const { totalQuantity, totalValue } = calculatePOTotals(po.orderItems);\n            \n            return (\n              <Card key={`po-${po.id}-${po.po_number}`} className=\"shadow-lg border-0 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 hover:scale-[1.01]\">\n                <CardHeader className=\"pb-4 bg-gradient-to-r from-slate-50 to-gray-50 dark:from-gray-800 dark:to-gray-900 border-b border-gray-100 dark:border-gray-700\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div>\n                        <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">{po.po_number}</CardTitle>\n                        <p className=\"text-sm font-medium text-blue-600 dark:text-blue-400 mt-1\">{po.platform.pf_name}</p>\n                      </div>\n                      <Badge \n                        variant={getStatusBadgeVariant(po.status)}\n                        className=\"px-3 py-1 text-xs font-semibold\"\n                      >\n                        {po.status}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => handleView(po)}\n                        className=\"hover:bg-blue-50 border-blue-200\"\n                      >\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        View\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => handleEdit(po)}\n                        className=\"hover:bg-green-50 border-green-200\"\n                      >\n                        <Edit className=\"h-4 w-4 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => handleDelete(po)}\n                        disabled={deletePOMutation.isPending}\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200\"\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-1\" />\n                        Delete\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n                    <div className=\"space-y-1\">\n                      <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Order Date</p>\n                      <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                        {format(new Date(po.order_date), 'MMM dd, yyyy')}\n                      </p>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Expiry Date</p>\n                      <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                        {po.expiry_date ? format(new Date(po.expiry_date), 'MMM dd, yyyy') : 'Not set'}\n                      </p>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Location</p>\n                      <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">{po.city}, {po.state}</p>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Distributor</p>\n                      <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                        {po.serving_distributor || 'Not assigned'}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {/* Summary Row */}\n                  <div className=\"flex items-center justify-between pt-4 border-t border-gray-100 dark:border-gray-700\">\n                    <div className=\"flex items-center space-x-6 text-sm\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"h-2 w-2 bg-blue-500 rounded-full\"></div>\n                        <span className=\"font-medium text-gray-700 dark:text-gray-300\">{po.orderItems.length} items</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"h-2 w-2 bg-green-500 rounded-full\"></div>\n                        <span className=\"font-medium text-gray-700 dark:text-gray-300\">Qty: {totalQuantity}</span>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n                        ₹{totalValue.toFixed(2)}\n                      </p>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">Total Value</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":25591},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }","size_bytes":2608},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/date-picker.tsx":{"content":"import * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\ninterface DatePickerProps {\n  date?: Date\n  onDateChange?: (date: Date | undefined) => void\n  placeholder?: string\n  disabled?: boolean\n  className?: string\n}\n\nexport function DatePicker({\n  date,\n  onDateChange,\n  placeholder = \"Pick a date\",\n  disabled = false,\n  className\n}: DatePickerProps) {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-full justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\",\n            className\n          )}\n          disabled={disabled}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>{placeholder}</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={onDateChange}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}","size_bytes":1351},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }","size_bytes":1229},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/seed-button.tsx":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Database } from \"lucide-react\";\n\nexport function SeedButton() {\n  const { toast } = useToast();\n\n  const seedMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/seed-test-data\", {\n        method: \"POST\",\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to seed test data\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Test data has been seeded successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to seed test data\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <Button\n      onClick={() => seedMutation.mutate()}\n      disabled={seedMutation.isPending}\n      variant=\"outline\"\n      size=\"sm\"\n      className=\"flex items-center gap-2\"\n    >\n      <Database className=\"h-4 w-4\" />\n      {seedMutation.isPending ? \"Seeding...\" : \"Seed Test Data\"}\n    </Button>\n  );\n}","size_bytes":1193},"client/src/hooks/use-debounce.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}","size_bytes":385},"scripts/seed.ts":{"content":"import { seedTestData } from \"../server/seed-data\";\n\nasync function run() {\n  console.log(\"Seeding test data...\");\n  const result = await seedTestData();\n  if (result.success) {\n    console.log(\"✅ Test data seeded successfully!\");\n  } else {\n    console.error(\"❌ Failed to seed test data:\", result.error);\n  }\n  process.exit(result.success ? 0 : 1);\n}\n\nrun().catch(console.error);","size_bytes":384},"server/seed-data.ts":{"content":"import { storage } from \"./storage\";\nimport type { InsertPfMst, InsertSapItemMst, InsertPfItemMst } from \"@shared/schema\";\n\nexport async function seedTestData() {\n  try {\n    // Get existing platforms\n    const existingPlatforms = await storage.getAllPlatforms();\n    \n    // Find platforms we need\n    const amazonPlatform = existingPlatforms.find(p => p.pf_name === \"Amazon\");\n    const flipkartPlatform = existingPlatforms.find(p => p.pf_name === \"Flipkart\");\n    const blinkitPlatform = existingPlatforms.find(p => p.pf_name === \"Blinkit\");\n    \n    if (!amazonPlatform || !flipkartPlatform || !blinkitPlatform) {\n      console.error(\"Required platforms not found. Please ensure Amazon, Flipkart, and Blinkit platforms exist.\");\n      return { success: false, error: \"Required platforms not found\" };\n    }\n    \n    const createdPlatforms = [amazonPlatform, flipkartPlatform, blinkitPlatform];\n\n    // Create SAP items\n    const sapItems: InsertSapItemMst[] = [\n      { itemcode: \"SAP001\", itemname: \"Laptop - Dell Inspiron 15\", itemgroup: \"Electronics\", subgroup: \"Computers\", taxrate: \"18\" },\n      { itemcode: \"SAP002\", itemname: \"Mobile - Samsung Galaxy S21\", itemgroup: \"Electronics\", subgroup: \"Mobile Phones\", taxrate: \"18\" },\n      { itemcode: \"SAP003\", itemname: \"Headphones - Sony WH-1000XM4\", itemgroup: \"Electronics\", subgroup: \"Audio\", taxrate: \"18\" },\n      { itemcode: \"SAP004\", itemname: \"T-Shirt - Cotton Blue\", itemgroup: \"Apparel\", subgroup: \"Men's Clothing\", taxrate: \"5\" },\n      { itemcode: \"SAP005\", itemname: \"Running Shoes - Nike Air Max\", itemgroup: \"Footwear\", subgroup: \"Sports Shoes\", taxrate: \"12\" },\n      { itemcode: \"SAP006\", itemname: \"Coffee Maker - Nespresso\", itemgroup: \"Home Appliances\", subgroup: \"Kitchen\", taxrate: \"18\" },\n      { itemcode: \"SAP007\", itemname: \"Yoga Mat - Premium\", itemgroup: \"Sports\", subgroup: \"Fitness\", taxrate: \"12\" },\n      { itemcode: \"SAP008\", itemname: \"Book - Programming Guide\", itemgroup: \"Books\", subgroup: \"Technical\", taxrate: \"0\" },\n      { itemcode: \"SAP009\", itemname: \"Watch - Casio Digital\", itemgroup: \"Accessories\", subgroup: \"Watches\", taxrate: \"18\" },\n      { itemcode: \"SAP010\", itemname: \"Backpack - Travel 40L\", itemgroup: \"Bags\", subgroup: \"Travel\", taxrate: \"18\" }\n    ];\n\n    const createdSapItems = [];\n    for (const item of sapItems) {\n      try {\n        const created = await storage.createSapItem(item);\n        createdSapItems.push(created);\n      } catch (error: any) {\n        // If item already exists, find and use the existing one\n        if (error.code === '23505') {\n          const existingSapItems = await storage.getAllSapItems();\n          const existing = existingSapItems.find(existing => existing.itemcode === item.itemcode);\n          if (existing) {\n            createdSapItems.push(existing);\n          }\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    // Create platform items (linking platforms to SAP items)\n    const platformItems: InsertPfItemMst[] = [\n      // Amazon items\n      { pf_id: createdPlatforms[0].id, sap_id: createdSapItems[0].id, pf_itemcode: \"AMZ-LAP-001\", pf_itemname: \"Dell Inspiron 15 Laptop (8GB RAM, 512GB SSD)\" },\n      { pf_id: createdPlatforms[0].id, sap_id: createdSapItems[1].id, pf_itemcode: \"AMZ-MOB-001\", pf_itemname: \"Samsung Galaxy S21 5G (128GB, Phantom Gray)\" },\n      { pf_id: createdPlatforms[0].id, sap_id: createdSapItems[2].id, pf_itemcode: \"AMZ-AUD-001\", pf_itemname: \"Sony WH-1000XM4 Wireless Noise Cancelling Headphones\" },\n      { pf_id: createdPlatforms[0].id, sap_id: createdSapItems[5].id, pf_itemcode: \"AMZ-APP-001\", pf_itemname: \"Nespresso Vertuo Coffee Machine\" },\n      \n      // Flipkart items\n      { pf_id: createdPlatforms[1].id, sap_id: createdSapItems[0].id, pf_itemcode: \"FK-LAP-001\", pf_itemname: \"DELL Inspiron Core i5 11th Gen Laptop\" },\n      { pf_id: createdPlatforms[1].id, sap_id: createdSapItems[1].id, pf_itemcode: \"FK-MOB-001\", pf_itemname: \"SAMSUNG Galaxy S21 5G (Phantom Gray, 128 GB)\" },\n      { pf_id: createdPlatforms[1].id, sap_id: createdSapItems[3].id, pf_itemcode: \"FK-CLO-001\", pf_itemname: \"Men's Cotton T-Shirt (Blue, Size L)\" },\n      { pf_id: createdPlatforms[1].id, sap_id: createdSapItems[4].id, pf_itemcode: \"FK-SHO-001\", pf_itemname: \"NIKE Air Max Running Shoes For Men\" },\n      \n      // Blinkit items (was Myntra)\n      { pf_id: createdPlatforms[2].id, sap_id: createdSapItems[6].id, pf_itemcode: \"BLK-FOOD-001\", pf_itemname: \"Premium Yoga Mat - 6mm Thick\" },\n      { pf_id: createdPlatforms[2].id, sap_id: createdSapItems[7].id, pf_itemcode: \"BLK-BOOK-001\", pf_itemname: \"Programming Guide - Learn Python\" },\n      { pf_id: createdPlatforms[2].id, sap_id: createdSapItems[3].id, pf_itemcode: \"BLK-CLO-001\", pf_itemname: \"Men's Cotton T-Shirt - Blue XL\" },\n      { pf_id: createdPlatforms[2].id, sap_id: createdSapItems[4].id, pf_itemcode: \"BLK-SHO-001\", pf_itemname: \"Nike Running Shoes - Size 10\" }\n    ];\n\n    for (const item of platformItems) {\n      await storage.createPlatformItem(item);\n    }\n\n    console.log(\"Test data seeded successfully!\");\n    return { success: true };\n  } catch (error) {\n    console.error(\"Error seeding test data:\", error);\n    return { success: false, error };\n  }\n}","size_bytes":5231},"client/src/pages/po-details.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { format } from \"date-fns\";\nimport { ArrowLeft, Edit, Trash2, Download, Mail, Phone, Calendar, MapPin, Package, DollarSign, Clock, Building } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { PfPo, PfMst, PfOrderItems } from \"@shared/schema\";\n\ninterface POWithDetails extends Omit<PfPo, 'platform'> {\n  platform: PfMst;\n  orderItems: PfOrderItems[];\n}\n\nexport default function PODetails() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const poId = params.id;\n\n  const { data: po, isLoading, error } = useQuery<POWithDetails>({\n    queryKey: [`/api/pos/${poId}`],\n    enabled: !!poId\n  });\n\n  const handleEdit = () => {\n    setLocation(`/po-edit/${poId}`);\n  };\n\n  const handleDelete = async () => {\n    if (!po) return;\n    \n    if (confirm(`Are you sure you want to delete PO ${po.po_number}?`)) {\n      try {\n        await apiRequest('DELETE', `/api/pos/${poId}`);\n        toast({\n          title: \"Success\",\n          description: \"Purchase order deleted successfully\"\n        });\n        setLocation(\"/platform-po\");\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete purchase order\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  };\n\n  const handleDownload = () => {\n    if (!po) return;\n    \n    // Generate and download PO as PDF or CSV\n    toast({\n      title: \"Download Started\",\n      description: `Downloading PO ${po.po_number}`\n    });\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'open': return 'default';\n      case 'closed': return 'secondary';\n      case 'cancelled': return 'destructive';\n      case 'expired': return 'destructive';\n      case 'duplicate': return 'outline';\n      default: return 'default';\n    }\n  };\n\n  const calculatePOTotals = (items: PfOrderItems[]) => {\n    const totalQuantity = items.reduce((sum, item) => sum + item.quantity, 0);\n    const totalValue = items.reduce((sum, item) => {\n      return sum + (parseFloat(item.landing_rate) * item.quantity);\n    }, 0);\n    return { totalQuantity, totalValue };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Loading purchase order details...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !po) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Purchase Order Not Found</h2>\n            <p className=\"text-gray-600 mb-4\">The requested purchase order could not be found.</p>\n            <Button onClick={() => setLocation(\"/platform-po\")}>\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Purchase Orders\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const { totalQuantity, totalValue } = calculatePOTotals(po.orderItems);\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-900 dark:to-gray-800 shadow-lg border-b border-blue-100 dark:border-gray-700 px-6 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setLocation(\"/platform-po\")}\n              className=\"hover:bg-blue-50\"\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n                {po.po_number}\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-300 mt-1\">\n                {po.platform.pf_name} • Created {format(new Date(po.order_date), 'MMM dd, yyyy')}\n              </p>\n            </div>\n            <Badge \n              variant={getStatusBadgeVariant(po.status)}\n              className=\"px-3 py-1 text-sm font-semibold\"\n            >\n              {po.status}\n            </Badge>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"outline\" onClick={handleDownload}>\n              <Download className=\"mr-2 h-4 w-4\" />\n              Download\n            </Button>\n            <Button variant=\"outline\" onClick={handleEdit}>\n              <Edit className=\"mr-2 h-4 w-4\" />\n              Edit\n            </Button>\n            <Button variant=\"outline\" onClick={handleDelete} className=\"text-red-600 hover:text-red-700 hover:bg-red-50\">\n              <Trash2 className=\"mr-2 h-4 w-4\" />\n              Delete\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"flex-1 overflow-y-auto p-6 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"max-w-7xl mx-auto space-y-6\">\n          {/* PO Overview */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Package className=\"mr-2 h-5 w-5\" />\n                  Purchase Order Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium text-gray-500\">Order Date</p>\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"mr-2 h-4 w-4 text-gray-400\" />\n                      <span className=\"font-semibold\">{format(new Date(po.order_date), 'MMM dd, yyyy')}</span>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium text-gray-500\">Expiry Date</p>\n                    <div className=\"flex items-center\">\n                      <Clock className=\"mr-2 h-4 w-4 text-gray-400\" />\n                      <span className=\"font-semibold\">\n                        {po.expiry_date ? format(new Date(po.expiry_date), 'MMM dd, yyyy') : 'Not set'}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium text-gray-500\">Location</p>\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"mr-2 h-4 w-4 text-gray-400\" />\n                      <span className=\"font-semibold\">{po.city}, {po.state}</span>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium text-gray-500\">Distributor</p>\n                    <div className=\"flex items-center\">\n                      <Building className=\"mr-2 h-4 w-4 text-gray-400\" />\n                      <span className=\"font-semibold\">{po.serving_distributor || 'Not assigned'}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Summary Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <DollarSign className=\"mr-2 h-5 w-5\" />\n                  Order Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Total Items</span>\n                    <span className=\"font-semibold\">{po.orderItems.length}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Total Quantity</span>\n                    <span className=\"font-semibold\">{totalQuantity}</span>\n                  </div>\n                  <Separator />\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-lg font-medium\">Total Value</span>\n                    <span className=\"text-lg font-bold text-primary\">₹{totalValue.toFixed(2)}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Items */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Order Items ({po.orderItems.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {po.orderItems.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">No items in this purchase order</p>\n                  </div>\n                ) : (\n                  <>\n                    {/* Header */}\n                    <div className=\"grid grid-cols-12 gap-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg font-medium text-sm\">\n                      <div className=\"col-span-4\">Item Name</div>\n                      <div className=\"col-span-2 text-center\">Quantity</div>\n                      <div className=\"col-span-2 text-center\">Landing Rate</div>\n                      <div className=\"col-span-2 text-center\">Total</div>\n                      <div className=\"col-span-2 text-center\">Status</div>\n                    </div>\n                    \n                    {/* Items */}\n                    {po.orderItems.map((item) => (\n                      <div key={item.id} className=\"grid grid-cols-12 gap-4 p-3 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\">\n                        <div className=\"col-span-4\">\n                          <p className=\"font-medium\">{item.item_name}</p>\n                          {item.hsn_code && (\n                            <p className=\"text-sm text-gray-500\">HSN: {item.hsn_code}</p>\n                          )}\n                        </div>\n                        <div className=\"col-span-2 text-center\">\n                          <span className=\"font-semibold\">{item.quantity}</span>\n                        </div>\n                        <div className=\"col-span-2 text-center\">\n                          <span className=\"font-semibold\">₹{parseFloat(item.landing_rate).toFixed(2)}</span>\n                        </div>\n                        <div className=\"col-span-2 text-center\">\n                          <span className=\"font-semibold\">₹{(parseFloat(item.landing_rate) * item.quantity).toFixed(2)}</span>\n                        </div>\n                        <div className=\"col-span-2 text-center\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Active\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":12103},"client/src/pages/po-edit.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { format } from \"date-fns\";\nimport { ArrowLeft, Save, Trash2, Plus, X, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport type { PfPo, PfMst, PfOrderItems } from \"@shared/schema\";\n\ninterface POWithDetails extends Omit<PfPo, 'platform'> {\n  platform: PfMst;\n  orderItems: PfOrderItems[];\n}\n\ninterface OrderItem {\n  id?: number;\n  item_name: string;\n  quantity: number;\n  landing_rate: string;\n  hsn_code?: string;\n}\n\nexport default function POEdit() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const poId = params.id;\n\n  // Form state\n  const [formData, setFormData] = useState({\n    po_number: \"\",\n    platform_id: \"\",\n    status: \"\",\n    order_date: \"\",\n    expiry_date: \"\",\n    city: \"\",\n    state: \"\",\n    serving_distributor: \"\"\n  });\n  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);\n\n  // Fetch PO data\n  const { data: po, isLoading: poLoading } = useQuery<POWithDetails>({\n    queryKey: [`/api/pos/${poId}`],\n    enabled: !!poId\n  });\n\n  // Fetch platforms for dropdown\n  const { data: platforms = [] } = useQuery<PfMst[]>({\n    queryKey: [\"/api/platforms\"]\n  });\n\n  // Initialize form with PO data\n  useEffect(() => {\n    if (po) {\n      setFormData({\n        po_number: po.po_number,\n        platform_id: po.platform.id.toString(),\n        status: po.status || \"\",\n        order_date: format(new Date(po.order_date), 'yyyy-MM-dd'),\n        expiry_date: po.expiry_date ? format(new Date(po.expiry_date), 'yyyy-MM-dd') : \"\",\n        city: po.city || \"\",\n        state: po.state || \"\",\n        serving_distributor: po.serving_distributor || \"\"\n      });\n      setOrderItems(po.orderItems.map(item => ({\n        id: item.id,\n        item_name: item.item_name,\n        quantity: item.quantity,\n        landing_rate: item.landing_rate,\n        hsn_code: item.sap_code || \"\"\n      })));\n    }\n  }, [po]);\n\n  // Update PO mutation\n  const updatePOMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('PUT', `/api/pos/${poId}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/pos/${poId}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pos\"] });\n      toast({\n        title: \"Success\",\n        description: \"Purchase order updated successfully\"\n      });\n      setLocation(`/po-details/${poId}`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update purchase order\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.po_number || !formData.platform_id || !formData.order_date) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (orderItems.length === 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please add at least one order item\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const submitData = {\n      ...formData,\n      platform_id: parseInt(formData.platform_id),\n      expiry_date: formData.expiry_date || null,\n      orderItems: orderItems.filter(item => item.item_name && item.quantity > 0)\n    };\n\n    updatePOMutation.mutate(submitData);\n  };\n\n  const addOrderItem = () => {\n    setOrderItems([...orderItems, {\n      item_name: \"\",\n      quantity: 1,\n      landing_rate: \"0\",\n      hsn_code: \"\"\n    }]);\n  };\n\n  const updateOrderItem = (index: number, field: keyof OrderItem, value: string | number) => {\n    const updated = orderItems.map((item, i) => \n      i === index ? { ...item, [field]: value } : item\n    );\n    setOrderItems(updated);\n  };\n\n  const removeOrderItem = (index: number) => {\n    setOrderItems(orderItems.filter((_, i) => i !== index));\n  };\n\n  const calculateTotal = () => {\n    return orderItems.reduce((sum, item) => {\n      return sum + (parseFloat(item.landing_rate) * item.quantity);\n    }, 0);\n  };\n\n  if (poLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Loading purchase order...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!po) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Purchase Order Not Found</h2>\n            <p className=\"text-gray-600 mb-4\">The requested purchase order could not be found.</p>\n            <Button onClick={() => setLocation(\"/platform-po\")}>\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Purchase Orders\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-gray-900 dark:to-gray-800 shadow-lg border-b border-green-100 dark:border-gray-700 px-6 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setLocation(`/po-details/${poId}`)}\n              className=\"hover:bg-green-50\"\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent\">\n                Edit Purchase Order\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-300 mt-1\">\n                Modify details for {po.po_number}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setLocation(`/po-details/${poId}`)}\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSubmit}\n              disabled={updatePOMutation.isPending}\n              className=\"bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700\"\n            >\n              <Save className=\"mr-2 h-4 w-4\" />\n              {updatePOMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"flex-1 overflow-y-auto p-6 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Basic Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"po_number\">PO Number *</Label>\n                    <Input\n                      id=\"po_number\"\n                      value={formData.po_number}\n                      onChange={(e) => setFormData({...formData, po_number: e.target.value})}\n                      placeholder=\"Enter PO number\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"platform\">Platform *</Label>\n                    <Select \n                      value={formData.platform_id} \n                      onValueChange={(value) => setFormData({...formData, platform_id: value})}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select platform\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {platforms.map((platform) => (\n                          <SelectItem key={platform.id} value={platform.id.toString()}>\n                            {platform.pf_name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Select \n                      value={formData.status} \n                      onValueChange={(value) => setFormData({...formData, status: value})}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"open\">Open</SelectItem>\n                        <SelectItem value=\"closed\">Closed</SelectItem>\n                        <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                        <SelectItem value=\"expired\">Expired</SelectItem>\n                        <SelectItem value=\"duplicate\">Duplicate</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serving_distributor\">Serving Distributor</Label>\n                    <Input\n                      id=\"serving_distributor\"\n                      value={formData.serving_distributor}\n                      onChange={(e) => setFormData({...formData, serving_distributor: e.target.value})}\n                      placeholder=\"Enter distributor name\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Dates and Location */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Dates & Location</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"order_date\">Order Date *</Label>\n                    <Input\n                      id=\"order_date\"\n                      type=\"date\"\n                      value={formData.order_date}\n                      onChange={(e) => setFormData({...formData, order_date: e.target.value})}\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"expiry_date\">Expiry Date</Label>\n                    <Input\n                      id=\"expiry_date\"\n                      type=\"date\"\n                      value={formData.expiry_date}\n                      onChange={(e) => setFormData({...formData, expiry_date: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"city\">City</Label>\n                    <Input\n                      id=\"city\"\n                      value={formData.city}\n                      onChange={(e) => setFormData({...formData, city: e.target.value})}\n                      placeholder=\"Enter city\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"state\">State</Label>\n                    <Input\n                      id=\"state\"\n                      value={formData.state}\n                      onChange={(e) => setFormData({...formData, state: e.target.value})}\n                      placeholder=\"Enter state\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Order Items */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Order Items ({orderItems.length})</CardTitle>\n                <Button type=\"button\" onClick={addOrderItem} variant=\"outline\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Item\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {orderItems.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-gray-500\">No items added yet. Click \"Add Item\" to get started.</p>\n                    </div>\n                  ) : (\n                    <>\n                      {/* Header */}\n                      <div className=\"grid grid-cols-12 gap-2 p-2 bg-gray-50 dark:bg-gray-800 rounded-lg font-medium text-sm\">\n                        <div className=\"col-span-4\">Item Name</div>\n                        <div className=\"col-span-2\">Quantity</div>\n                        <div className=\"col-span-2\">Rate (₹)</div>\n                        <div className=\"col-span-2\">HSN Code</div>\n                        <div className=\"col-span-1\">Total</div>\n                        <div className=\"col-span-1\">Action</div>\n                      </div>\n                      \n                      {/* Items */}\n                      {orderItems.map((item, index) => (\n                        <div key={index} className=\"grid grid-cols-12 gap-2 p-2 border border-gray-200 dark:border-gray-700 rounded-lg\">\n                          <div className=\"col-span-4\">\n                            <Input\n                              value={item.item_name}\n                              onChange={(e) => updateOrderItem(index, 'item_name', e.target.value)}\n                              placeholder=\"Item name\"\n                              className=\"w-full\"\n                            />\n                          </div>\n                          <div className=\"col-span-2\">\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              value={item.quantity}\n                              onChange={(e) => updateOrderItem(index, 'quantity', parseInt(e.target.value) || 1)}\n                              className=\"w-full\"\n                            />\n                          </div>\n                          <div className=\"col-span-2\">\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              min=\"0\"\n                              value={item.landing_rate}\n                              onChange={(e) => updateOrderItem(index, 'landing_rate', e.target.value)}\n                              className=\"w-full\"\n                            />\n                          </div>\n                          <div className=\"col-span-2\">\n                            <Input\n                              value={item.hsn_code}\n                              onChange={(e) => updateOrderItem(index, 'hsn_code', e.target.value)}\n                              placeholder=\"HSN code\"\n                              className=\"w-full\"\n                            />\n                          </div>\n                          <div className=\"col-span-1 flex items-center\">\n                            <span className=\"text-sm font-medium\">\n                              ₹{(parseFloat(item.landing_rate) * item.quantity).toFixed(2)}\n                            </span>\n                          </div>\n                          <div className=\"col-span-1 flex items-center\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => removeOrderItem(index)}\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {/* Total */}\n                      <Separator />\n                      <div className=\"flex justify-end\">\n                        <div className=\"text-right\">\n                          <p className=\"text-sm text-gray-600\">Total Value</p>\n                          <p className=\"text-xl font-bold text-primary\">₹{calculateTotal().toFixed(2)}</p>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </form>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":17833},"client/src/components/po/order-items-list-view.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format, isAfter, isBefore, isEqual } from \"date-fns\";\nimport { Search, Filter, Download, RefreshCw, X, Calendar, Package, ChevronDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport * as XLSX from 'xlsx';\nimport type { PfMst, PfOrderItems } from \"@shared/schema\";\n\ninterface OrderItemWithDetails extends PfOrderItems {\n  po_number: string;\n  platform_name: string;\n  order_date: Date;\n  expiry_date: Date | null;\n  platform: PfMst;\n  hsn_code?: string | null;\n}\n\nexport function OrderItemsListView() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showFilter, setShowFilter] = useState(false);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [platformFilter, setPlatformFilter] = useState(\"all\");\n  const [orderDateFrom, setOrderDateFrom] = useState(\"\");\n  const [orderDateTo, setOrderDateTo] = useState(\"\");\n  const [expiryDateFrom, setExpiryDateFrom] = useState(\"\");\n  const [expiryDateTo, setExpiryDateTo] = useState(\"\");\n  \n  const { data: orderItems = [], isLoading, refetch } = useQuery<OrderItemWithDetails[]>({\n    queryKey: [\"/api/order-items\"]\n  });\n\n  const { data: platforms = [] } = useQuery<PfMst[]>({\n    queryKey: [\"/api/platforms\"]\n  });\n\n  // Status update mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ itemId, status }: { itemId: number, status: string }) => {\n      const response = await fetch(`/api/order-items/${itemId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ status })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to update status');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/order-items\"] });\n      toast({\n        title: \"Status Updated\",\n        description: \"Order item status has been updated successfully\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update order item status\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleStatusUpdate = (itemId: number, newStatus: string) => {\n    updateStatusMutation.mutate({ itemId, status: newStatus });\n  };\n\n  const handleRefresh = () => {\n    refetch();\n    toast({\n      title: \"Refreshed\",\n      description: \"Order items list has been refreshed\"\n    });\n  };\n\n  const handleExport = () => {\n    const exportData = filteredOrderItems.map(item => ({\n      'PO Number': item.po_number,\n      'Platform': item.platform_name,\n      'Item Name': item.item_name,\n      'SAP Code': item.sap_code || 'N/A',\n      'HSN Code': item.hsn_code || 'N/A',\n      'Quantity': item.quantity,\n      'Basic Rate': parseFloat(item.basic_rate || '0'),\n      'GST Rate': parseFloat(item.gst_rate || '0'),\n      'Landing Rate': parseFloat(item.landing_rate || '0'),\n      'Item Total': parseFloat((parseFloat(item.landing_rate || '0') * item.quantity).toFixed(2)),\n      'Status': item.status || 'Pending',\n      'Order Date': format(new Date(item.order_date), 'yyyy-MM-dd'),\n      'Expiry Date': item.expiry_date ? format(new Date(item.expiry_date), 'yyyy-MM-dd') : 'Not set'\n    }));\n\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.json_to_sheet(exportData);\n    const colWidths = [\n      { wch: 15 }, { wch: 20 }, { wch: 30 }, { wch: 15 }, { wch: 15 },\n      { wch: 10 }, { wch: 12 }, { wch: 10 }, { wch: 12 }, { wch: 12 },\n      { wch: 12 }, { wch: 12 }, { wch: 12 }\n    ];\n    worksheet['!cols'] = colWidths;\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Order Items');\n    \n    const filename = `order-items-${format(new Date(), 'yyyy-MM-dd')}.xlsx`;\n    XLSX.writeFile(workbook, filename);\n    \n    toast({\n      title: \"Export Complete\",\n      description: `${filteredOrderItems.length} order items exported to Excel`\n    });\n  };\n\n  const clearFilters = () => {\n    setSearchTerm(\"\");\n    setStatusFilter(\"all\");\n    setPlatformFilter(\"all\");\n    setOrderDateFrom(\"\");\n    setOrderDateTo(\"\");\n    setExpiryDateFrom(\"\");\n    setExpiryDateTo(\"\");\n    setShowFilter(false);\n  };\n\n  // Filter order items based on search term and filters\n  const filteredOrderItems = orderItems.filter(item => {\n    const matchesSearch = searchTerm === \"\" || \n      item.item_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.po_number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.platform_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (item.sap_code && item.sap_code.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.hsn_code && item.hsn_code.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesStatus = statusFilter === \"all\" || (item.status || 'pending').toLowerCase() === statusFilter.toLowerCase();\n    const matchesPlatform = platformFilter === \"all\" || item.platform.id.toString() === platformFilter;\n    \n    // Date filters\n    const itemOrderDate = new Date(item.order_date);\n    const matchesOrderDateFrom = orderDateFrom === \"\" || isAfter(itemOrderDate, new Date(orderDateFrom)) || isEqual(itemOrderDate, new Date(orderDateFrom));\n    const matchesOrderDateTo = orderDateTo === \"\" || isBefore(itemOrderDate, new Date(orderDateTo)) || isEqual(itemOrderDate, new Date(orderDateTo));\n    \n    let matchesExpiryDateFrom = true;\n    let matchesExpiryDateTo = true;\n    if (item.expiry_date) {\n      const itemExpiryDate = new Date(item.expiry_date);\n      matchesExpiryDateFrom = expiryDateFrom === \"\" || isAfter(itemExpiryDate, new Date(expiryDateFrom)) || isEqual(itemExpiryDate, new Date(expiryDateFrom));\n      matchesExpiryDateTo = expiryDateTo === \"\" || isBefore(itemExpiryDate, new Date(expiryDateTo)) || isEqual(itemExpiryDate, new Date(expiryDateTo));\n    } else {\n      matchesExpiryDateFrom = expiryDateFrom === \"\";\n      matchesExpiryDateTo = expiryDateTo === \"\";\n    }\n    \n    return matchesSearch && matchesStatus && matchesPlatform && \n           matchesOrderDateFrom && matchesOrderDateTo && \n           matchesExpiryDateFrom && matchesExpiryDateTo;\n  });\n\n  // Calculate totals\n  const totalItems = filteredOrderItems.length;\n  const totalQuantity = filteredOrderItems.reduce((sum, item) => sum + item.quantity, 0);\n  const totalValue = filteredOrderItems.reduce((sum, item) => \n    sum + (parseFloat(item.landing_rate || '0') * item.quantity), 0\n  );\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'pending': return 'default';\n      case 'invoiced': return 'secondary';\n      case 'dispatched': return 'secondary';\n      case 'delivered': return 'secondary';\n      case 'cancelled': return 'destructive';\n      case 'expired': return 'destructive';\n      case 'price difference': return 'outline';\n      case 'mov issue': return 'outline';\n      case 'stock issue': return 'outline';\n      case 'hold': return 'outline';\n      case 'cn': return 'outline';\n      case 'rtv': return 'outline';\n      default: return 'default';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"h-12 w-12 animate-spin rounded-full border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600 dark:text-gray-300\">Loading order items...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Controls Bar */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between flex-wrap gap-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n              <Input\n                type=\"text\"\n                placeholder=\"Search order items...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 w-80 bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200 dark:border-gray-600\"\n              />\n            </div>\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowFilter(!showFilter)}\n              className=\"flex items-center space-x-2\"\n            >\n              <Filter className=\"h-4 w-4\" />\n              <span>Filter</span>\n              {(statusFilter !== \"all\" || platformFilter !== \"all\" || \n                orderDateFrom !== \"\" || orderDateTo !== \"\" || \n                expiryDateFrom !== \"\" || expiryDateTo !== \"\") && (\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n              )}\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n              {filteredOrderItems.length} of {orderItems.length} items\n            </span>\n            <Button \n              variant=\"outline\" \n              onClick={handleRefresh}\n              disabled={isLoading}\n              className=\"flex items-center space-x-2\"\n            >\n              <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n              <span>Refresh</span>\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={handleExport}\n              disabled={filteredOrderItems.length === 0}\n              className=\"flex items-center space-x-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              <span>Export</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Filter Panel */}\n        {showFilter && (\n          <Card className=\"border border-gray-200 dark:border-gray-700\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-sm font-medium text-gray-900 dark:text-white\">Filters</h3>\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"ghost\" size=\"sm\" onClick={clearFilters}>\n                    Clear All\n                  </Button>\n                  <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowFilter(false)}>\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"space-y-6\">\n                {/* Status and Platform Filters */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Status\n                    </Label>\n                    <Select value={statusFilter} onValueChange={setStatusFilter}>\n                      <SelectTrigger className=\"mt-2\">\n                        <SelectValue placeholder=\"All Status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Status</SelectItem>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"invoiced\">Invoiced</SelectItem>\n                        <SelectItem value=\"dispatched\">Dispatched</SelectItem>\n                        <SelectItem value=\"delivered\">Delivered</SelectItem>\n                        <SelectItem value=\"price difference\">Price Difference</SelectItem>\n                        <SelectItem value=\"mov issue\">MOV Issue</SelectItem>\n                        <SelectItem value=\"stock issue\">Stock Issue</SelectItem>\n                        <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                        <SelectItem value=\"expired\">Expired</SelectItem>\n                        <SelectItem value=\"hold\">Hold</SelectItem>\n                        <SelectItem value=\"cn\">CN</SelectItem>\n                        <SelectItem value=\"rtv\">RTV</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Platform\n                    </Label>\n                    <Select value={platformFilter} onValueChange={setPlatformFilter}>\n                      <SelectTrigger className=\"mt-2\">\n                        <SelectValue placeholder=\"All Platforms\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Platforms</SelectItem>\n                        {platforms.map((platform) => (\n                          <SelectItem key={platform.id} value={platform.id.toString()}>\n                            {platform.pf_name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Date Filters */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Calendar className=\"h-4 w-4 text-gray-500\" />\n                    <h4 className=\"text-sm font-medium text-gray-900 dark:text-white\">Date Filters</h4>\n                  </div>\n                  \n                  {/* Order Date Range */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                        Order Date From\n                      </Label>\n                      <Input\n                        type=\"date\"\n                        value={orderDateFrom}\n                        onChange={(e) => setOrderDateFrom(e.target.value)}\n                        className=\"mt-2\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                        Order Date To\n                      </Label>\n                      <Input\n                        type=\"date\"\n                        value={orderDateTo}\n                        onChange={(e) => setOrderDateTo(e.target.value)}\n                        className=\"mt-2\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Expiry Date Range */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                        Expiry Date From\n                      </Label>\n                      <Input\n                        type=\"date\"\n                        value={expiryDateFrom}\n                        onChange={(e) => setExpiryDateFrom(e.target.value)}\n                        className=\"mt-2\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                        Expiry Date To\n                      </Label>\n                      <Input\n                        type=\"date\"\n                        value={expiryDateTo}\n                        onChange={(e) => setExpiryDateTo(e.target.value)}\n                        className=\"mt-2\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n              <div className=\"ml-2\">\n                <div className=\"text-2xl font-bold\">{totalItems}</div>\n                <p className=\"text-xs text-muted-foreground\">Total Items</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n              <div className=\"ml-2\">\n                <div className=\"text-2xl font-bold\">{totalQuantity}</div>\n                <p className=\"text-xs text-muted-foreground\">Total Quantity</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n              <div className=\"ml-2\">\n                <div className=\"text-2xl font-bold\">₹{totalValue.toLocaleString('en-IN')}</div>\n                <p className=\"text-xs text-muted-foreground\">Total Value</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Order Items Cards */}\n      {orderItems.length === 0 ? (\n        <Card className=\"shadow-lg border-0\">\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <div className=\"w-20 h-20 bg-gradient-to-br from-blue-100 to-indigo-100 dark:from-gray-800 dark:to-gray-700 rounded-full flex items-center justify-center mb-6\">\n              <Package className=\"w-10 h-10 text-blue-500 dark:text-blue-400\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">No Order Items Found</h3>\n            <p className=\"text-gray-600 dark:text-gray-300 text-center mb-6 max-w-md\">\n              No order items have been created yet. Create purchase orders to see items here.\n            </p>\n          </CardContent>\n        </Card>\n      ) : filteredOrderItems.length === 0 ? (\n        <Card className=\"shadow-lg border-0\">\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <div className=\"w-20 h-20 bg-gradient-to-br from-orange-100 to-yellow-100 dark:from-gray-800 dark:to-gray-700 rounded-full flex items-center justify-center mb-6\">\n              <Search className=\"w-10 h-10 text-orange-500 dark:text-orange-400\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">No Matching Order Items</h3>\n            <p className=\"text-gray-600 dark:text-gray-300 text-center mb-6 max-w-md\">\n              No order items match your current search and filter criteria.\n            </p>\n            <Button onClick={clearFilters} variant=\"outline\">\n              Clear Filters\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {filteredOrderItems.map((item) => (\n            <Card key={item.id} className=\"shadow-lg border-0 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 hover:scale-[1.01]\">\n              <CardHeader className=\"pb-4 bg-gradient-to-r from-slate-50 to-gray-50 dark:from-gray-800 dark:to-gray-900 border-b border-gray-100 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">{item.item_name}</CardTitle>\n                      <p className=\"text-sm font-medium text-blue-600 dark:text-blue-400 mt-1\">\n                        {item.po_number} • {item.platform_name}\n                      </p>\n                    </div>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          className=\"flex items-center space-x-2 px-3 py-1\"\n                          disabled={updateStatusMutation.isPending}\n                        >\n                          <Badge \n                            variant={getStatusBadgeVariant(item.status || 'pending')}\n                            className=\"text-xs font-semibold border-none bg-transparent p-0\"\n                          >\n                            {item.status || 'Pending'}\n                          </Badge>\n                          <ChevronDown className=\"h-3 w-3\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\" className=\"w-52 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-lg [&>*]:text-gray-900 [&>*]:dark:text-gray-100\">\n                        <DropdownMenuItem \n                          onClick={() => handleStatusUpdate(item.id, 'Pending')}\n                          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 font-medium\"\n                          style={{ color: '#111827' }}\n                        >\n                          <Badge variant=\"default\" className=\"text-xs mr-2\">Pending</Badge>\n                          <span style={{ color: '#111827' }}>Pending</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleStatusUpdate(item.id, 'Invoiced')}\n                          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 font-medium\"\n                          style={{ color: '#111827' }}\n                        >\n                          <Badge variant=\"secondary\" className=\"text-xs mr-2\">Invoiced</Badge>\n                          <span style={{ color: '#111827' }}>Invoiced</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleStatusUpdate(item.id, 'Dispatched')}\n                          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 font-medium\"\n                          style={{ color: '#111827' }}\n                        >\n                          <Badge variant=\"secondary\" className=\"text-xs mr-2\">Dispatched</Badge>\n                          <span style={{ color: '#111827' }}>Dispatched</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleStatusUpdate(item.id, 'Delivered')}\n                          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 font-medium\"\n                          style={{ color: '#111827' }}\n                        >\n                          <Badge variant=\"secondary\" className=\"text-xs mr-2\">Delivered</Badge>\n                          <span style={{ color: '#111827' }}>Delivered</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleStatusUpdate(item.id, 'Price Difference')}\n                          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 font-medium\"\n                          style={{ color: '#111827' }}\n                        >\n                          <Badge variant=\"outline\" className=\"text-xs mr-2\">Price Difference</Badge>\n                          <span style={{ color: '#111827' }}>Price Difference</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleStatusUpdate(item.id, 'MOV Issue')}\n                          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 font-medium\"\n                          style={{ color: '#111827' }}\n                        >\n                          <Badge variant=\"outline\" className=\"text-xs mr-2\">MOV Issue</Badge>\n                          <span style={{ color: '#111827' }}>MOV Issue</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleStatusUpdate(item.id, 'Stock Issue')}\n                          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 font-medium\"\n                          style={{ color: '#111827' }}\n                        >\n                          <Badge variant=\"outline\" className=\"text-xs mr-2\">Stock Issue</Badge>\n                          <span style={{ color: '#111827' }}>Stock Issue</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleStatusUpdate(item.id, 'Cancelled')}\n                          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 font-medium\"\n                          style={{ color: '#111827' }}\n                        >\n                          <Badge variant=\"destructive\" className=\"text-xs mr-2\">Cancelled</Badge>\n                          <span style={{ color: '#111827' }}>Cancelled</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleStatusUpdate(item.id, 'Expired')}\n                          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 font-medium\"\n                          style={{ color: '#111827' }}\n                        >\n                          <Badge variant=\"destructive\" className=\"text-xs mr-2\">Expired</Badge>\n                          <span style={{ color: '#111827' }}>Expired</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleStatusUpdate(item.id, 'Hold')}\n                          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 font-medium\"\n                          style={{ color: '#111827' }}\n                        >\n                          <Badge variant=\"outline\" className=\"text-xs mr-2\">Hold</Badge>\n                          <span style={{ color: '#111827' }}>Hold</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleStatusUpdate(item.id, 'CN')}\n                          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 font-medium\"\n                          style={{ color: '#111827' }}\n                        >\n                          <Badge variant=\"outline\" className=\"text-xs mr-2\">CN</Badge>\n                          <span style={{ color: '#111827' }}>CN</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleStatusUpdate(item.id, 'RTV')}\n                          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 font-medium\"\n                          style={{ color: '#111827' }}\n                        >\n                          <Badge variant=\"outline\" className=\"text-xs mr-2\">RTV</Badge>\n                          <span style={{ color: '#111827' }}>RTV</span>\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-lg font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n                      ₹{(parseFloat(item.landing_rate || '0') * item.quantity).toFixed(2)}\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Item Total</p>\n                  </div>\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Quantity</p>\n                    <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">{item.quantity}</p>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Landing Rate</p>\n                    <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                      ₹{parseFloat(item.landing_rate || '0').toFixed(2)}\n                    </p>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">SAP Code</p>\n                    <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                      {item.sap_code || 'N/A'}\n                    </p>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">HSN Code</p>\n                    <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                      {item.hsn_code || 'N/A'}\n                    </p>\n                  </div>\n                </div>\n                \n                {/* Additional Details Row */}\n                <div className=\"flex items-center justify-between pt-4 border-t border-gray-100 dark:border-gray-700\">\n                  <div className=\"flex items-center space-x-6 text-sm\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"h-2 w-2 bg-blue-500 rounded-full\"></div>\n                      <span className=\"font-medium text-gray-700 dark:text-gray-300\">\n                        Order: {format(new Date(item.order_date), 'MMM dd, yyyy')}\n                      </span>\n                    </div>\n                    {item.expiry_date && (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"h-2 w-2 bg-orange-500 rounded-full\"></div>\n                        <span className=\"font-medium text-gray-700 dark:text-gray-300\">\n                          Expires: {format(new Date(item.expiry_date), 'MMM dd, yyyy')}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"flex items-center space-x-4 text-sm\">\n                      {item.basic_rate && (\n                        <span className=\"text-gray-600 dark:text-gray-400\">\n                          Basic: ₹{parseFloat(item.basic_rate).toFixed(2)}\n                        </span>\n                      )}\n                      {item.gst_rate && (\n                        <span className=\"text-gray-600 dark:text-gray-400\">\n                          GST: {parseFloat(item.gst_rate).toFixed(2)}%\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":31992},"client/src/pages/unified-po-upload.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Upload,\n  FileText,\n  CheckCircle,\n  AlertCircle,\n  Eye,\n  Database,\n  ArrowRight,\n  ArrowLeft,\n} from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface ParsedPOData {\n  header?: any;\n  lines?: any[];\n  totalItems?: number;\n  totalQuantity?: number;\n  totalAmount?: string;\n  // For multi-PO platforms like Blinkit\n  poList?: Array<{\n    header: any;\n    lines: any[];\n    totalItems: number;\n    totalQuantity: number;\n    totalAmount: string;\n  }>;\n  totalPOs?: number;\n  detectedVendor?: string;\n}\n\nconst PLATFORMS = [\n  {\n    id: \"flipkart\",\n    name: \"Flipkart Grocery\",\n    endpoint: \"/api/po/import/flipkart\",\n    queryKey: \"/api/flipkart-grocery-pos\",\n  },\n  {\n    id: \"zepto\",\n    name: \"Zepto\",\n    endpoint: \"/api/po/import/zepto\",\n    queryKey: \"/api/zepto-pos\",\n  },\n  {\n    id: \"citymall\",\n    name: \"City Mall\",\n    endpoint: \"/api/po/import/citymall\",\n    queryKey: \"/api/city-mall-pos\",\n  },\n  {\n    id: \"blinkit\",\n    name: \"Blinkit\",\n    endpoint: \"/api/po/import/blinkit\",\n    queryKey: \"/api/blinkit-pos\",\n  },\n  {\n    id: \"swiggy\",\n    name: \"Swiggy Instamart\",\n    endpoint: \"/api/po/import/swiggy\",\n    queryKey: \"/api/swiggy-pos\",\n  },\n];\n\nexport default function UnifiedPOUpload() {\n  const [currentStep, setCurrentStep] = useState<\n    \"platform\" | \"upload\" | \"preview\"\n  >(\"platform\");\n  const [selectedPlatform, setSelectedPlatform] = useState<string>(\"\");\n  const [file, setFile] = useState<File | null>(null);\n  const [parsedData, setParsedData] = useState<ParsedPOData | null>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const selectedPlatformData = PLATFORMS.find((p) => p.id === selectedPlatform);\n\n  const previewMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"platform\", selectedPlatform);\n\n      const response = await fetch(\"/api/po/preview\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to preview file\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setParsedData(data);\n      setCurrentStep(\"preview\");\n      toast({\n        title: \"File previewed successfully\",\n        description: `Found ${data.totalItems} items`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Preview failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async (data: { header?: any; lines?: any[]; poList?: any[] }) => {\n      const response = await fetch(`/api/po/import/${selectedPlatform}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to import PO\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Handle both single PO response and multi-PO response\n      if (data.results && Array.isArray(data.results)) {\n        // Multi-PO response (Blinkit)\n        const successfulImports = data.results.filter((r: any) => r.status === 'success');\n        const failedImports = data.results.filter((r: any) => r.status === 'failed');\n        \n        toast({\n          title: \"PO import completed\",\n          description: `Successfully imported ${successfulImports.length} of ${data.results.length} POs${failedImports.length > 0 ? `. ${failedImports.length} failed.` : ''}`,\n        });\n      } else {\n        // Single PO response\n        toast({\n          title: \"PO imported successfully\",\n          description: `PO ${data.po_number} has been created`,\n        });\n      }\n      \n      resetForm();\n      queryClient.invalidateQueries({\n        queryKey: [selectedPlatformData!.queryKey],\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Import failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    const files = e.dataTransfer.files;\n    if (files && files[0]) {\n      handleFileSelection(files[0]);\n    }\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files[0]) {\n      handleFileSelection(files[0]);\n    }\n  };\n\n  const handleFileSelection = (selectedFile: File) => {\n    const validTypes = [\n      \"text/csv\",\n      \"application/vnd.ms-excel\",\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    ];\n\n    const isValidFile =\n      validTypes.includes(selectedFile.type) ||\n      selectedFile.name.endsWith(\".csv\") ||\n      selectedFile.name.endsWith(\".xls\") ||\n      selectedFile.name.endsWith(\".xlsx\");\n\n    if (isValidFile) {\n      setFile(selectedFile);\n      setParsedData(null);\n    } else {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload a CSV or Excel file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePlatformSelect = (platform: string) => {\n    setSelectedPlatform(platform);\n    setCurrentStep(\"upload\");\n  };\n\n  const handlePreview = () => {\n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a file to preview\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    previewMutation.mutate(file);\n  };\n\n  const handleImport = () => {\n    if (!parsedData) {\n      toast({\n        title: \"No data to import\",\n        description: \"Please preview the file first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Handle Blinkit multi-PO structure\n    if (parsedData.poList) {\n      importMutation.mutate({\n        poList: parsedData.poList,\n      });\n    } else {\n      // Handle single PO structure for other platforms\n      importMutation.mutate({\n        header: parsedData.header,\n        lines: parsedData.lines,\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setCurrentStep(\"platform\");\n    setSelectedPlatform(\"\");\n    setFile(null);\n    setParsedData(null);\n  };\n\n  const goBack = () => {\n    if (currentStep === \"upload\") {\n      setCurrentStep(\"platform\");\n      setFile(null);\n    } else if (currentStep === \"preview\") {\n      setCurrentStep(\"upload\");\n      setParsedData(null);\n    }\n  };\n\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      <div className=\"container mx-auto p-6 space-y-6 max-w-6xl\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Purchase Order Upload</h1>\n            <p className=\"text-gray-600\">\n              Upload and import purchase orders from all platforms\n            </p>\n          </div>\n        </div>\n\n        {/* Progress Steps */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div\n                className={`flex items-center gap-2 ${currentStep === \"platform\" ? \"text-blue-600\" : currentStep === \"upload\" || currentStep === \"preview\" ? \"text-green-600\" : \"text-gray-400\"}`}\n              >\n                <div\n                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${currentStep === \"platform\" ? \"bg-blue-100 text-blue-600\" : currentStep === \"upload\" || currentStep === \"preview\" ? \"bg-green-100 text-green-600\" : \"bg-gray-100 text-gray-400\"}`}\n                >\n                  1\n                </div>\n                <span className=\"font-medium\">Select Platform</span>\n              </div>\n\n              <ArrowRight className=\"h-5 w-5 text-gray-400\" />\n\n              <div\n                className={`flex items-center gap-2 ${currentStep === \"upload\" ? \"text-blue-600\" : currentStep === \"preview\" ? \"text-green-600\" : \"text-gray-400\"}`}\n              >\n                <div\n                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${currentStep === \"upload\" ? \"bg-blue-100 text-blue-600\" : currentStep === \"preview\" ? \"bg-green-100 text-green-600\" : \"bg-gray-100 text-gray-400\"}`}\n                >\n                  2\n                </div>\n                <span className=\"font-medium\">Upload File</span>\n              </div>\n\n              <ArrowRight className=\"h-5 w-5 text-gray-400\" />\n\n              <div\n                className={`flex items-center gap-2 ${currentStep === \"preview\" ? \"text-blue-600\" : \"text-gray-400\"}`}\n              >\n                <div\n                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${currentStep === \"preview\" ? \"bg-blue-100 text-blue-600\" : \"bg-gray-100 text-gray-400\"}`}\n                >\n                  3\n                </div>\n                <span className=\"font-medium\">Preview & Import</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Step 1: Platform Selection */}\n        {currentStep === \"platform\" && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Upload className=\"h-5 w-5\" />\n                Select Platform\n              </CardTitle>\n              <CardDescription>\n                Choose the e-commerce platform for your purchase order\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {PLATFORMS.map((platform) => (\n                  <Button\n                    key={platform.id}\n                    variant=\"outline\"\n                    className=\"h-20 text-left justify-start p-4 hover:bg-blue-50 hover:border-blue-300\"\n                    onClick={() => handlePlatformSelect(platform.id)}\n                  >\n                    <div>\n                      <div className=\"font-medium text-base\">\n                        {platform.name}\n                      </div>\n                      <div className=\"text-sm text-gray-500 mt-1\">\n                        Upload {platform.name} PO files\n                      </div>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 2: File Upload */}\n        {currentStep === \"upload\" && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Upload {selectedPlatformData?.name} PO File\n              </CardTitle>\n              <CardDescription>\n                Upload CSV or Excel files containing{\" \"}\n                {selectedPlatformData?.name} purchase order data\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div\n                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                  dragActive\n                    ? \"border-blue-500 bg-blue-50\"\n                    : \"border-gray-300 hover:border-gray-400\"\n                }`}\n                onDragEnter={handleDrag}\n                onDragLeave={handleDrag}\n                onDragOver={handleDrag}\n                onDrop={handleDrop}\n              >\n                <FileText className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <div className=\"space-y-2\">\n                  <p className=\"text-lg font-medium\">\n                    {file\n                      ? \"File Selected\"\n                      : `Drop your ${selectedPlatformData?.name} CSV/Excel file here`}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    or{\" \"}\n                    <Label\n                      htmlFor=\"file-upload\"\n                      className=\"text-blue-600 hover:underline cursor-pointer\"\n                    >\n                      browse to choose a file\n                    </Label>\n                  </p>\n                  <p className=\"text-xs text-gray-400\">\n                    Supports .csv, .xls, and .xlsx files\n                  </p>\n                </div>\n                <Input\n                  id=\"file-upload\"\n                  type=\"file\"\n                  accept=\".csv,.xls,.xlsx,text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                  onChange={handleFileChange}\n                  className=\"hidden\"\n                />\n              </div>\n\n              {file && (\n                <div className=\"flex items-center gap-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-green-800\">{file.name}</p>\n                    <p className=\"text-sm text-green-600\">\n                      {(file.size / 1024 / 1024).toFixed(2)} MB\n                    </p>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setFile(null)}\n                  >\n                    Remove\n                  </Button>\n                </div>\n              )}\n\n              <div className=\"flex gap-3\">\n                <Button variant=\"outline\" onClick={goBack}>\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back\n                </Button>\n                <Button\n                  onClick={handlePreview}\n                  disabled={!file || previewMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  {previewMutation.isPending\n                    ? \"Analyzing...\"\n                    : \"Preview & Review\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 3: Preview & Import */}\n        {currentStep === \"preview\" && parsedData && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Eye className=\"h-5 w-5\" />\n                File Preview & Review - {selectedPlatformData?.name}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Blinkit Multi-PO Display */}\n              {parsedData.poList ? (\n                <div className=\"space-y-8\">\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                    <h3 className=\"text-lg font-semibold\">\n                      Multiple POs Found: {parsedData.totalPOs} Purchase Orders\n                    </h3>\n                  </div>\n                  \n                  {parsedData.poList.map((po: any, poIndex: number) => (\n                    <div key={poIndex} className=\"border rounded-lg p-6 bg-white shadow-sm\">\n                      <h4 className=\"text-lg font-semibold mb-4 text-blue-600\">\n                        PO #{poIndex + 1}: {po.header.po_number}\n                      </h4>\n                      \n                      {/* Individual PO Summary */}\n                      <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                        <div className=\"p-3 bg-green-50 rounded-lg\">\n                          <p className=\"text-sm font-medium text-green-800\">Items</p>\n                          <p className=\"text-lg font-bold text-green-900\">{po.totalItems}</p>\n                        </div>\n                        <div className=\"p-3 bg-purple-50 rounded-lg\">\n                          <p className=\"text-sm font-medium text-purple-800\">Quantity</p>\n                          <p className=\"text-lg font-bold text-purple-900\">{po.totalQuantity}</p>\n                        </div>\n                        <div className=\"p-3 bg-yellow-50 rounded-lg\">\n                          <p className=\"text-sm font-medium text-yellow-800\">Amount</p>\n                          <p className=\"text-lg font-bold text-yellow-900\">₹{po.totalAmount}</p>\n                        </div>\n                      </div>\n\n                      {/* PO Lines Table */}\n                      <div className=\"overflow-x-auto\">\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              <TableHead>Item Code</TableHead>\n                              <TableHead>Product Description</TableHead>\n                              <TableHead>UOM</TableHead>\n                              <TableHead>Quantity</TableHead>\n                              <TableHead>Landing Rate</TableHead>\n                              <TableHead>Total Amount</TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {po.lines.map((line: any, lineIndex: number) => (\n                              <TableRow key={lineIndex}>\n                                <TableCell className=\"font-medium\">{line.item_code}</TableCell>\n                                <TableCell>{line.product_description}</TableCell>\n                                <TableCell>{line.grammage}</TableCell>\n                                <TableCell>{line.quantity}</TableCell>\n                                <TableCell>₹{line.landing_rate}</TableCell>\n                                <TableCell>₹{line.total_amount}</TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <>\n                  {/* Summary Information for single PO platforms */}\n                  {selectedPlatform === \"flipkart\" ? (\n                <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-blue-800\">\n                      PO Number\n                    </p>\n                    <p className=\"text-lg font-bold text-blue-900\">\n                      {parsedData.header?.po_number || \"N/A\"}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-green-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-green-800\">\n                      Total Items\n                    </p>\n                    <p className=\"text-lg font-bold text-green-900\">\n                      {parsedData.totalItems || 0}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-purple-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-purple-800\">\n                      Total Quantity\n                    </p>\n                    <p className=\"text-lg font-bold text-purple-900\">\n                      {parsedData.totalQuantity || 0}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-yellow-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-yellow-800\">\n                      Total Amount\n                    </p>\n                    <p className=\"text-lg font-bold text-yellow-900\">\n                      ₹{parsedData.totalAmount || \"0\"}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-orange-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-orange-800\">\n                      PO Date\n                    </p>\n                    <p className=\"text-lg font-bold text-orange-900\">\n                      {parsedData.header?.order_date\n                        ? new Date(\n                            parsedData.header.order_date,\n                          ).toLocaleDateString()\n                        : \"N/A\"}\n                    </p>\n                  </div>\n                </div>\n              ) : selectedPlatform === \"swiggy\" ? (\n                <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-blue-800\">\n                      PO Number\n                    </p>\n                    <p className=\"text-lg font-bold text-blue-900\">\n                      {parsedData.header?.po_number || \"N/A\"}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-green-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-green-800\">\n                      Total Items\n                    </p>\n                    <p className=\"text-lg font-bold text-green-900\">\n                      {parsedData.totalItems || 0}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-purple-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-purple-800\">\n                      Total Quantity\n                    </p>\n                    <p className=\"text-lg font-bold text-purple-900\">\n                      {parsedData.totalQuantity || 0}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-yellow-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-yellow-800\">\n                      Total Amount\n                    </p>\n                    <p className=\"text-lg font-bold text-yellow-900\">\n                      ₹{parsedData.header?.grand_total ? parseFloat(parsedData.header.grand_total).toFixed(2) : (parsedData.totalAmount || \"0\")}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-orange-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-orange-800\">\n                      PO Date\n                    </p>\n                    <p className=\"text-lg font-bold text-orange-900\">\n                      {parsedData.header?.po_date\n                        ? new Date(\n                            parsedData.header.po_date,\n                          ).toLocaleDateString()\n                        : \"Not Available\"}\n                    </p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-blue-800\">\n                      PO Number\n                    </p>\n                    <p className=\"text-lg font-bold text-blue-900\">\n                      {parsedData.header?.po_number || \"N/A\"}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-green-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-green-800\">\n                      Total Items\n                    </p>\n                    <p className=\"text-lg font-bold text-green-900\">\n                      {parsedData.totalItems || 0}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-purple-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-purple-800\">\n                      Total Quantity\n                    </p>\n                    <p className=\"text-lg font-bold text-purple-900\">\n                      {parsedData.totalQuantity || 0}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-yellow-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-yellow-800\">\n                      Total Amount\n                    </p>\n                    <p className=\"text-lg font-bold text-yellow-900\">\n                      ₹{parsedData.totalAmount || \"0\"}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {/* PO Header Preview */}\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium\">PO Header Information</h4>\n                <div className=\"bg-gray-50 p-3 rounded-lg\">\n                  {selectedPlatform === \"flipkart\" ? (\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      {/* <div><strong>PO Number:</strong> {parsedData.header?.po_number || \"N/A\"}</div>\n                      <div><strong>PO Date:</strong> {parsedData.header?.order_date ? new Date(parsedData.header.order_date).toLocaleDateString() : \"N/A\"}</div>\n                      <div><strong>Total Amount:</strong> ₹{parsedData.totalAmount || \"0\"}</div> */}\n                      <div>\n                        <strong>Order Date:</strong>{\" \"}\n                        {parsedData.header?.order_date\n                          ? new Date(\n                              parsedData.header.order_date,\n                            ).toLocaleDateString()\n                          : \"N/A\"}\n                      </div>\n                      <div>\n                        <strong>Status:</strong>{\" \"}\n                        <Badge variant=\"outline\">\n                          {parsedData.header?.status || \"Open\"}\n                        </Badge>\n                      </div>\n                      <div>\n                        <strong>Platform:</strong> {selectedPlatformData?.name}\n                      </div>\n                    </div>\n                  ) : selectedPlatform === \"swiggy\" ? (\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <div>\n                        <strong>PO Number:</strong>{\" \"}\n                        {parsedData.header?.po_number || \"N/A\"}\n                      </div>\n                      <div>\n                        <strong>PO Date:</strong>{\" \"}\n                        {parsedData.header?.po_date\n                          ? new Date(parsedData.header.po_date).toLocaleDateString()\n                          : \"Not Available\"}\n                      </div>\n                      <div>\n                        <strong>Vendor Name:</strong>{\" \"}\n                        {parsedData.header?.vendor_name || \"N/A\"}\n                      </div>\n                      <div>\n                        <strong>Payment Terms:</strong>{\" \"}\n                        {parsedData.header?.payment_terms || \"N/A\"}\n                      </div>\n                      <div>\n                        <strong>Status:</strong>{\" \"}\n                        <Badge variant=\"outline\">\n                          {parsedData.header?.status || \"Open\"}\n                        </Badge>\n                      </div>\n                      <div>\n                        <strong>Platform:</strong> {selectedPlatformData?.name}\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <div>\n                        <strong>PO Number:</strong>{\" \"}\n                        {parsedData.header?.po_number || \"N/A\"}\n                      </div>\n                      <div>\n                        <strong>PO Date:</strong>{\" \"}\n                        {parsedData.header?.po_date ||\n                          parsedData.header?.order_date ||\n                          \"N/A\"}\n                      </div>\n                      <div>\n                        <strong>Status:</strong>{\" \"}\n                        <Badge variant=\"outline\">\n                          {parsedData.header?.status || \"Open\"}\n                        </Badge>\n                      </div>\n                      <div>\n                        <strong>Platform:</strong> {selectedPlatformData?.name}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Line Items Preview */}\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium\">\n                  Line Items Preview (First 5 items)\n                </h4>\n                {selectedPlatform === \"citymall\" && parsedData.lines && parsedData.lines[0] && (\n                  <div className=\"text-xs text-gray-500 mb-2 p-2 bg-gray-50 rounded\">\n                    <div><strong>Debug Info:</strong></div>\n                    <div>Article ID: {parsedData.lines[0].article_id || 'MISSING'}</div>\n                    <div>Article Name: {parsedData.lines[0].article_name || 'MISSING'}</div>\n                    <div>Keys: {Object.keys(parsedData.lines[0]).join(', ')}</div>\n                  </div>\n                )}\n                <div className=\"border rounded-lg overflow-hidden\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        {selectedPlatform === \"flipkart\" ? (\n                          <>\n                            <TableHead>Item Name</TableHead>\n                            <TableHead>HSN Code</TableHead>\n                            <TableHead>Pending Quantity</TableHead>\n                            <TableHead>Quantity</TableHead>\n                            <TableHead>UOM</TableHead>\n                            <TableHead>Tax Amount</TableHead>\n                            <TableHead>Total Amount</TableHead>\n                          </>\n                        ) : selectedPlatform === \"swiggy\" ? (\n                          <>\n                            <TableHead>Item Description</TableHead>\n                            <TableHead>Item Code</TableHead>\n                            <TableHead>HSN Code</TableHead>\n                            <TableHead>Quantity</TableHead>\n                            <TableHead>MRP</TableHead>\n                            <TableHead>Unit Cost</TableHead>\n                            <TableHead>Taxable Value</TableHead>\n                          </>\n                        ) : selectedPlatform === \"zepto\" ? (\n                          <>\n                            <TableHead>SKU</TableHead>\n                            <TableHead>Brand</TableHead>\n                            <TableHead>SAP ID</TableHead>\n                            <TableHead>HSN Code</TableHead>\n                            <TableHead>PO Quantity</TableHead>\n                            <TableHead>Cost Price</TableHead>\n                            <TableHead>MRP</TableHead>\n                          </>\n                        ) : selectedPlatform === \"citymall\" ? (\n                          <>\n                            <TableHead>Item</TableHead>\n                            <TableHead>Code</TableHead>\n                            <TableHead>Quantity</TableHead>\n                            <TableHead>Price</TableHead>\n                            <TableHead>Total</TableHead>\n                          </>\n                        ) : (\n                          <>\n                            <TableHead>Item Name</TableHead>\n                            <TableHead>HSN Code</TableHead>\n                            <TableHead>Pending Quantity</TableHead>\n                            <TableHead>Quantity</TableHead>\n                            <TableHead>UOM</TableHead>\n                            <TableHead>Tax Amount</TableHead>\n                            <TableHead>Total Amount</TableHead>\n                          </>\n                        )}\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {parsedData.lines?.map((line, index) => (\n                        <TableRow key={index}>\n                          {selectedPlatform === \"flipkart\" ? (\n                            <>\n                              <TableCell className=\"font-medium\">\n                                {line.title || line.item_name || \"N/A\"}\n                              </TableCell>\n                              <TableCell>{line.hsn_code || \"N/A\"}</TableCell>\n                              <TableCell>\n                                {line.pending_quantity || \"N/A\"}\n                              </TableCell>\n                              <TableCell>{line.quantity || \"N/A\"}</TableCell>\n                              <TableCell>{line.uom || \"N/A\"}</TableCell>\n                              <TableCell>₹{line.tax_amount || \"N/A\"}</TableCell>\n                              <TableCell>\n                                ₹{line.total_amount || \"N/A\"}\n                              </TableCell>\n                            </>\n                          ) : selectedPlatform === \"swiggy\" ? (\n                            <>\n                              <TableCell className=\"font-medium\">\n                                {line.item_description || line.item_name || \"N/A\"}\n                              </TableCell>\n                              <TableCell>{line.item_code || \"N/A\"}</TableCell>\n                              <TableCell>{line.hsn_code || \"Not Available\"}</TableCell>\n                              <TableCell>{line.quantity || \"N/A\"}</TableCell>\n                              <TableCell>₹{line.mrp || \"N/A\"}</TableCell>\n                              <TableCell>{line.unit_base_cost ? `₹${parseFloat(line.unit_base_cost).toFixed(2)}` : \"Not Available\"}</TableCell>\n                              <TableCell>₹{line.taxable_value ? parseFloat(line.taxable_value).toFixed(2) : \"N/A\"}</TableCell>\n                            </>\n                          ) : selectedPlatform === \"zepto\" ? (\n                            <>\n                              <TableCell className=\"font-medium\">\n                                {line.sku || \"N/A\"}\n                              </TableCell>\n                              <TableCell>{line.brand || \"N/A\"}</TableCell>\n                              <TableCell className=\"text-blue-600 font-medium\">\n                                {line.sap_id || \"Not Available\"}\n                              </TableCell>\n                              <TableCell>{line.hsn_code || \"N/A\"}</TableCell>\n                              <TableCell>{line.po_qty || \"N/A\"}</TableCell>\n                              <TableCell>₹{line.cost_price || \"N/A\"}</TableCell>\n                              <TableCell>₹{line.mrp || \"N/A\"}</TableCell>\n                            </>\n                          ) : selectedPlatform === \"citymall\" ? (\n                            <>\n                              <TableCell className=\"font-medium\">\n                                {line.article_name || \"N/A\"}\n                              </TableCell>\n                              <TableCell>{line.article_id || \"N/A\"}</TableCell>\n                              <TableCell>{line.quantity || \"N/A\"}</TableCell>\n                              <TableCell>₹{line.base_cost_price || \"N/A\"}</TableCell>\n                              <TableCell>₹{line.total_amount || \"N/A\"}</TableCell>\n                            </>\n                          ) : (\n                            <>\n                              <TableCell className=\"font-medium\">\n                                {line.title || line.item_name || \"N/A\"}\n                              </TableCell>\n                              <TableCell>{line.hsn_code || \"N/A\"}</TableCell>\n                              <TableCell>\n                                {line.pending_quantity || \"N/A\"}\n                              </TableCell>\n                              <TableCell>{line.quantity || \"N/A\"}</TableCell>\n                              <TableCell>{line.uom || \"N/A\"}</TableCell>\n                              <TableCell>₹{line.tax_amount || \"N/A\"}</TableCell>\n                              <TableCell>\n                                ₹{line.total_amount || \"N/A\"}\n                              </TableCell>\n                            </>\n                          )}\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n                {parsedData.lines && parsedData.lines.length > 5 && (\n                  <p className=\"text-sm text-gray-500 text-center\">\n                    Showing 5 of {parsedData.lines.length} items\n                  </p>\n                )}\n              </div>\n                </>\n              )}\n\n              {/* Import Actions */}\n              <div className=\"flex gap-3 pt-4 border-t\">\n                <Button variant=\"outline\" onClick={goBack}>\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back\n                </Button>\n                <Button\n                  onClick={handleImport}\n                  disabled={importMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  <Database className=\"h-4 w-4 mr-2\" />\n                  {importMutation.isPending\n                    ? \"Importing...\"\n                    : \"Import to Database\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Instructions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>How to Use</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold\">\n                  1\n                </div>\n                <div>\n                  <h4 className=\"font-medium mb-1\">Select Platform</h4>\n                  <p className=\"text-gray-600\">\n                    Choose the e-commerce platform (Flipkart, Zepto, City Mall,\n                    Blinkit, or Swiggy)\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold\">\n                  2\n                </div>\n                <div>\n                  <h4 className=\"font-medium mb-1\">Upload File</h4>\n                  <p className=\"text-gray-600\">\n                    Upload your CSV or Excel file containing the purchase order\n                    data\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold\">\n                  3\n                </div>\n                <div>\n                  <h4 className=\"font-medium mb-1\">Preview & Import</h4>\n                  <p className=\"text-gray-600\">\n                    Review the parsed data and import it into the database\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg mt-4\">\n                <div className=\"flex items-start gap-2\">\n                  <AlertCircle className=\"h-4 w-4 text-blue-600 mt-0.5\" />\n                  <div>\n                    <p className=\"text-blue-800 text-sm\">\n                      <strong>Note:</strong> Make sure your files follow the\n                      standard format for each platform. Always review the\n                      preview before importing to ensure data accuracy.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":40790},"server/swiggy-parser.ts":{"content":"import XLSX from 'xlsx';\nimport type { InsertSwiggyPo, InsertSwiggyPoLine } from '@shared/schema';\n\ninterface ParsedSwiggyPO {\n  header: InsertSwiggyPo;\n  lines: InsertSwiggyPoLine[];\n}\n\nexport function parseSwiggyPO(fileBuffer: Buffer, uploadedBy: string): ParsedSwiggyPO {\n  try {\n    // Read the Excel XML file\n    const workbook = XLSX.read(fileBuffer, { type: 'buffer' });\n    const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n    \n    // Convert to JSON to get all data - use different options to handle merged cells\n    const jsonData = XLSX.utils.sheet_to_json(worksheet, { \n      header: 1, \n      defval: '',\n      range: 0,\n      raw: false,\n      dateNF: 'mmm d, yyyy'\n    }) as any[][];\n    \n    // Also try to get raw cell data to find dates\n    const rawData = XLSX.utils.sheet_to_json(worksheet, { \n      header: 1, \n      defval: '',\n      range: 0,\n      raw: true\n    }) as any[][];\n\n    // Initialize header variables\n    let poNumber = '';\n    let poDate: Date | undefined;\n    let poReleaseDate: Date | undefined;\n    let expectedDeliveryDate: Date | undefined;\n    let poExpiryDate: Date | undefined;\n    let paymentTerms = '';\n    let vendorName = '';\n    let vendorAddress = '';\n    let vendorGstin = '';\n    let billingAddress = '';\n    let shippingAddress = '';\n\n    // Extract header information from the first rows\n    for (let i = 0; i < Math.min(25, jsonData.length); i++) {\n      const row = jsonData[i];\n      if (!row) continue;\n\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        if (!cell) continue;\n        \n        const cellStr = cell.toString().trim();\n        \n\n        \n\n        \n        // Extract PO Number - check current and next several cells\n        if (cellStr === 'PO No :') {\n          // Look in next few cells for the PO number\n          for (let k = j + 1; k < Math.min(j + 10, row.length); k++) {\n            if (row[k] && row[k].toString().trim()) {\n              const potentialPO = row[k].toString().trim();\n              if (potentialPO.startsWith('JCNPO') || potentialPO.startsWith('SOTY-')) {\n                poNumber = potentialPO;\n                break;\n              }\n            }\n          }\n        }\n        \n        // Also check if the cell itself contains a PO number\n        if (cellStr.startsWith('JCNPO') || cellStr.startsWith('SOTY-')) {\n          poNumber = cellStr;\n        }\n        \n        // Extract dates - look in next several cells for the date value\n        if (cellStr === 'PO Date :') {\n          for (let k = j + 1; k < Math.min(j + 15, row.length); k++) {\n            if (row[k] && row[k].toString().trim()) {\n              const dateStr = row[k].toString().trim();\n              if (dateStr.includes('Aug') || dateStr.includes('2024') || dateStr.includes('2025')) {\n                poDate = parseSwiggyDate(dateStr);\n                break;\n              }\n            }\n          }\n          // Also check raw data for the same position\n          if (!poDate && rawData[i]) {\n            for (let k = j + 1; k < Math.min(j + 15, rawData[i].length); k++) {\n              if (rawData[i][k] && rawData[i][k].toString().trim()) {\n                const dateStr = rawData[i][k].toString().trim();\n                if (dateStr.includes('Aug') || dateStr.includes('2024') || dateStr.includes('2025')) {\n                  poDate = parseSwiggyDate(dateStr);\n                  break;\n                }\n              }\n            }\n          }\n        }\n        if (cellStr === 'PO Release Date :') {\n          for (let k = j + 1; k < Math.min(j + 15, row.length); k++) {\n            if (row[k] && row[k].toString().trim()) {\n              const dateStr = row[k].toString().trim();\n              if (dateStr.includes('Aug') || dateStr.includes('2024') || dateStr.includes('2025')) {\n                poReleaseDate = parseSwiggyDate(dateStr);\n                break;\n              }\n            }\n          }\n        }\n        if (cellStr === 'Expected Delivery Date:') {\n          for (let k = j + 1; k < Math.min(j + 15, row.length); k++) {\n            if (row[k] && row[k].toString().trim()) {\n              const dateStr = row[k].toString().trim();\n              if (dateStr.includes('Aug') || dateStr.includes('2024') || dateStr.includes('2025')) {\n                expectedDeliveryDate = parseSwiggyDate(dateStr);\n                break;\n              }\n            }\n          }\n        }\n        if (cellStr === 'PO Expiry Date: ') {\n          for (let k = j + 1; k < Math.min(j + 15, row.length); k++) {\n            if (row[k] && row[k].toString().trim()) {\n              const dateStr = row[k].toString().trim();\n              if (dateStr.includes('Aug') || dateStr.includes('2024') || dateStr.includes('2025')) {\n                poExpiryDate = parseSwiggyDate(dateStr);\n                break;\n              }\n            }\n          }\n        }\n        \n        // Extract payment terms - check multiple approaches\n        if (cellStr === 'Payment Terms :' || cellStr.includes('Payment Terms')) {\n          // Look in next few cells for the value\n          for (let k = j + 1; k < Math.min(j + 10, row.length); k++) {\n            if (row[k] && row[k].toString().trim()) {\n              const value = row[k].toString().trim();\n              if (value && value !== '' && !value.includes('PO') && !value.includes('Date')) {\n                paymentTerms = value;\n                break;\n              }\n            }\n          }\n        }\n        \n        // Also look for \"0 Days\" or similar patterns directly\n        if ((cellStr === '0 Days' || cellStr.includes('Days')) && !paymentTerms) {\n          paymentTerms = cellStr;\n        }\n        \n        // Extract vendor information - check for \"Vendor Name :\" in separate cells  \n        if (cellStr === 'Vendor Name :' || cellStr.includes('Vendor Name')) {\n          // The vendor name might be in merged cells or subsequent rows\n          // Check the current row and next few rows for vendor information\n          for (let nextRow = i; nextRow < Math.min(i + 5, jsonData.length); nextRow++) {\n            const searchRow = jsonData[nextRow];\n            if (searchRow) {\n              for (let k = 0; k < searchRow.length; k++) {\n                if (searchRow[k] && searchRow[k].toString().trim()) {\n                  const value = searchRow[k].toString().trim();\n                  // Look for vendor name that's not a label or empty\n                  if (value && value !== '' && \n                      !value.includes(':') && \n                      !value.includes('PO') && \n                      !value.includes('Date') && \n                      !value.includes('Payment') &&\n                      !value.includes('Expected') &&\n                      !value.includes('Vendor Name') &&\n                      !value.includes('Aug') &&\n                      !value.includes('2025') &&\n                      value.length > 3) {\n                    vendorName = value;\n                    break;\n                  }\n                }\n              }\n              if (vendorName) break;\n            }\n          }\n        }\n        \n        // Extract vendor information from multi-line cells\n        if (cellStr.includes('Vendor Name :')) {\n          const lines = cellStr.split('\\n');\n          if (lines.length > 1) {\n            vendorName = lines[0].replace('Vendor Name :', '').trim();\n            vendorAddress = lines.slice(1, -2).join(', ');\n            const gstinLine = lines.find((line: any) => line.includes('GSTIN'));\n            if (gstinLine) {\n              vendorGstin = gstinLine.replace('GSTIN :', '').trim();\n            }\n          }\n        }\n      }\n    }\n\n    // Find the item data section - look for column headers\n    let itemDataStartRow = -1;\n    for (let i = 0; i < jsonData.length; i++) {\n      const row = jsonData[i];\n      if (!row) continue;\n      \n      const hasSerialNo = row.some(cell => cell && cell.toString().trim() === 'S.');\n      const hasItemCode = row.some(cell => cell && cell.toString().trim() === 'Item Code');\n      const hasItemDesc = row.some(cell => cell && cell.toString().trim() === 'Item Desc');\n      \n      if (hasSerialNo && hasItemCode && hasItemDesc) {\n        // Skip the header row and the next row (which contains \"No\")\n        itemDataStartRow = i + 2;\n        break;\n      }\n    }\n\n    const lines: InsertSwiggyPoLine[] = [];\n    let totalQuantity = 0;\n    let totalTaxableValue = 0;\n    let totalTaxAmount = 0;\n    let totalAmount = 0;\n\n    // Parse item data\n    if (itemDataStartRow > 0) {\n      for (let i = itemDataStartRow; i < jsonData.length; i++) {\n        const row = jsonData[i];\n        if (!row || row.length < 10) continue;\n        \n        // Check if this is an item row by looking at the first cell\n        const serialNumber = parseInt(row[0]?.toString() || '0');\n        if (isNaN(serialNumber) || serialNumber === 0) continue;\n\n        try {\n          const line: InsertSwiggyPoLine = {\n            line_number: serialNumber,\n            item_code: row[1]?.toString() || '',\n            item_description: row[2]?.toString().replace(/\\n/g, ' ') || '',\n            hsn_code: findHsnCode(row),\n            quantity: parseInt(row[5]?.toString() || '0'),\n            mrp: parseDecimal(row[6]?.toString()),\n            unit_base_cost: findUnitCost(row)?.toString() || null,\n            taxable_value: parseDecimal(row[9]?.toString()),\n            cgst_rate: parseDecimal(row[10]?.toString()),\n            cgst_amount: parseDecimal(row[12]?.toString()),\n            sgst_rate: parseDecimal(row[13]?.toString()),\n            sgst_amount: parseDecimal(row[15]?.toString()),\n            igst_rate: parseDecimal(row[16]?.toString()),\n            igst_amount: parseDecimal(row[17]?.toString()),\n            cess_rate: parseDecimal(row[19]?.toString()),\n            cess_amount: parseDecimal(row[20]?.toString()),\n            additional_cess: parseDecimal(row[21]?.toString()),\n            line_total: parseDecimal(row[22]?.toString()),\n            created_by: uploadedBy\n          };\n\n          lines.push(line);\n          console.log('Parsed Swiggy line item:', JSON.stringify(line, null, 2));\n\n          // Update totals\n          totalQuantity += line.quantity || 0;\n          totalTaxableValue += Number(line.taxable_value || 0);\n          totalTaxAmount += (Number(line.cgst_amount || 0) + Number(line.sgst_amount || 0) + \n                            Number(line.igst_amount || 0) + Number(line.cess_amount || 0) + \n                            Number(line.additional_cess || 0));\n          totalAmount += Number(line.line_total || 0);\n        } catch (error) {\n          console.warn(`Error parsing Swiggy PO line ${i}:`, error);\n          continue;\n        }\n      }\n    }\n\n    // Check if PO number was found\n    if (!poNumber) {\n      throw new Error('po no is not available please check you upload po');\n    }\n\n    // Generate PO number if not found (this line should never be reached now)\n    if (!poNumber) {\n      const timestamp = Date.now();\n      poNumber = `SW_${timestamp}`;\n    }\n    \n    // Set default vendor name if not found - but don't use problematic values\n    if (!vendorName || vendorName === \"N/A\" || vendorName.includes(\"Aug\") || vendorName.includes(\"2025\")) {\n      vendorName = null;\n    }\n    \n    // Filter out empty line items\n    const filteredLines = lines.filter(line => \n      line.item_code && line.item_code.trim() !== '' && \n      line.quantity > 0\n    );\n\n    const header: InsertSwiggyPo = {\n      po_number: poNumber,\n      po_date: poDate ? new Date(poDate + 'T00:00:00Z') : null,\n      po_release_date: poReleaseDate ? new Date(poReleaseDate + 'T00:00:00Z') : null,\n      expected_delivery_date: expectedDeliveryDate ? new Date(expectedDeliveryDate + 'T00:00:00Z') : null,\n      po_expiry_date: poExpiryDate ? new Date(poExpiryDate + 'T00:00:00Z') : null,\n      vendor_name: vendorName && vendorName !== \"N/A\" && vendorName !== \"Aug 4, 2025\" ? vendorName : null,\n      payment_terms: paymentTerms || null,\n      total_items: filteredLines.length,\n      total_quantity: totalQuantity,\n      total_taxable_value: totalTaxableValue > 0 ? totalTaxableValue.toString() : null,\n      total_tax_amount: totalTaxAmount > 0 ? totalTaxAmount.toString() : null,\n      grand_total: totalAmount > 0 ? totalAmount.toString() : null,\n      unique_hsn_codes: Array.from(new Set(filteredLines.map(line => line.hsn_code).filter(Boolean))),\n      status: 'pending',\n      created_by: uploadedBy\n    };\n\n    return { header, lines: filteredLines };\n  } catch (error) {\n    throw new Error(`Failed to parse Swiggy PO: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nfunction parseSwiggyDate(dateStr: string | undefined): string | null {\n  if (!dateStr) return null;\n  \n  try {\n    const cleanDateStr = dateStr.toString().trim();\n    \n    // Handle Excel date format (e.g., \"Aug 4, 2025\")\n    const date = new Date(cleanDateStr);\n    \n    if (!isNaN(date.getTime())) {\n      return date.toISOString().split('T')[0]; // Return YYYY-MM-DD format\n    }\n    \n    return null;\n  } catch (error) {\n    console.warn('Error parsing Swiggy date:', dateStr, error);\n    return null;\n  }\n}\n\n// Helper function to find HSN code in a row (could be in different columns)\nfunction findHsnCode(row: any[]): string | null {\n  // Common positions for HSN codes in Swiggy files\n  const possibleIndexes = [3, 4, 5];\n  \n  for (const index of possibleIndexes) {\n    if (row[index]) {\n      const value = row[index].toString().trim();\n      // HSN codes are typically 8-digit numbers\n      if (/^\\d{8}$/.test(value)) {\n        return value;\n      }\n    }\n  }\n  \n  // Also check for HSN codes anywhere in the row\n  for (let i = 0; i < row.length; i++) {\n    if (row[i]) {\n      const value = row[i].toString().trim();\n      if (/^\\d{8}$/.test(value) && !isNaN(Number(value))) {\n        return value;\n      }\n    }\n  }\n  \n  return null;\n}\n\n// Helper function to find unit cost in a row (could be in different columns)\nfunction findUnitCost(row: any[]): number | null {\n  // Common positions for unit cost in Swiggy files\n  const possibleIndexes = [7, 8, 9];\n  \n  for (const index of possibleIndexes) {\n    if (row[index]) {\n      const value = parseDecimal(row[index].toString());\n      // Unit costs are typically reasonable decimal values\n      if (value && Number(value) > 0 && Number(value) < 10000) {\n        return Number(value);\n      }\n    }\n  }\n  \n  return null;\n}\n\nfunction parseDecimal(value: string | undefined): string | null {\n  if (!value) return null;\n  \n  try {\n    const cleanValue = value.toString().replace(/[^\\d.-]/g, '').trim();\n    if (cleanValue === '') return null;\n    \n    const parsed = parseFloat(cleanValue);\n    return isNaN(parsed) ? null : parsed.toString();\n  } catch (error) {\n    return null;\n  }\n}","size_bytes":14803},"server/csv-parser.ts":{"content":"import { parse } from 'csv-parse/sync';\nimport XLSX from 'xlsx';\nimport * as xml2js from 'xml2js';\nimport Papa from 'papaparse';\nimport type { InsertFlipkartGroceryPoHeader, InsertFlipkartGroceryPoLines, InsertZeptoPoHeader, InsertZeptoPoLines, InsertCityMallPoHeader, InsertCityMallPoLines, InsertBlinkitPoHeader, InsertBlinkitPoLines, InsertSwiggyPo, InsertSwiggyPoLine } from '@shared/schema';\n\ninterface ParsedFlipkartPO {\n  header: InsertFlipkartGroceryPoHeader;\n  lines: InsertFlipkartGroceryPoLines[];\n}\n\nexport function parseFlipkartGroceryPO(csvContent: string, uploadedBy: string): ParsedFlipkartPO {\n  console.log('Parsing Flipkart Grocery PO...');\n  const records = parse(csvContent, {\n    skip_empty_lines: true,\n    relax_column_count: true\n  });\n  \n  console.log('Flipkart CSV records count:', records.length);\n  console.log('First 5 rows:', records.slice(0, 5));\n\n  let header: InsertFlipkartGroceryPoHeader;\n  const lines: InsertFlipkartGroceryPoLines[] = [];\n\n  // Parse header information from the first few rows\n  let poNumber = '';\n  let supplierName = '';\n  let supplierAddress = '';\n  let supplierContact = '';\n  let supplierEmail = '';\n  let supplierGstin = '';\n  let billedToAddress = '';\n  let billedToGstin = '';\n  let shippedToAddress = '';\n  let shippedToGstin = '';\n  let natureOfSupply = '';\n  let natureOfTransaction = '';\n  let poExpiryDate: Date | undefined;\n  let category = '';\n  let orderDate: Date = new Date();\n  let modeOfPayment = '';\n  let contractRefId = '';\n  let contractVersion = '';\n  let creditTerm = '';\n\n  // Extract header data from structured CSV\n  for (let i = 0; i < Math.min(10, records.length); i++) {\n    const row = records[i];\n    if (!row || row.length === 0) continue;\n\n    // PO Number from row 1\n    if (row[0]?.includes('PURCHASE ORDER #')) {\n      poNumber = row[0].split('#')[1]?.trim() || '';\n    }\n    \n    // PO details from row 2\n    if (row[0] === 'PO#' && row[1]) {\n      poNumber = row[1].trim();\n      \n      // Extract other details from this row\n      for (let j = 0; j < row.length; j++) {\n        if (row[j] === 'Nature Of Supply' && row[j + 1]) {\n          natureOfSupply = row[j + 1];\n        }\n        if (row[j] === 'Nature of Transaction' && row[j + 1]) {\n          natureOfTransaction = row[j + 1];\n        }\n        if (row[j] === 'PO Expiry' && row[j + 1]) {\n          poExpiryDate = parseDate(row[j + 1]);\n        }\n        if (row[j] === 'CATEGORY' && row[j + 1]) {\n          category = row[j + 1];\n        }\n        if (row[j] === 'ORDER DATE' && row[j + 1]) {\n          orderDate = parseDate(row[j + 1]) || new Date();\n        }\n      }\n    }\n\n    // Supplier details from row 3\n    if (row[0] === 'SUPPLIER NAME' && row[1]) {\n      supplierName = row[1];\n      \n      for (let j = 0; j < row.length; j++) {\n        if (row[j] === 'SUPPLIER ADDRESS' && row[j + 1]) {\n          supplierAddress = row[j + 1];\n        }\n        if (row[j] === 'SUPPLIER CONTACT' && row[j + 1]) {\n          supplierContact = row[j + 1];\n        }\n        if (row[j] === 'EMAIL' && row[j + 1]) {\n          supplierEmail = row[j + 1];\n        }\n      }\n    }\n\n    // Billing and shipping details from row 4\n    if (row[0] === 'Billed by') {\n      for (let j = 0; j < row.length; j++) {\n        if (row[j] === 'GSTIN' && row[j + 1] && !supplierGstin) {\n          supplierGstin = row[j + 1];\n        }\n      }\n    }\n\n    // Billed to address from row 5\n    if (row[0] === 'BILLED TO ADDRESS' && row[2]) {\n      billedToAddress = row[2];\n      \n      for (let j = 0; j < row.length; j++) {\n        if (row[j] === 'GSTIN' && row[j + 1] && !billedToGstin) {\n          billedToGstin = row[j + 1];\n        }\n        if (row[j] === 'SHIPPED TO ADDRESS' && row[j + 2]) {\n          shippedToAddress = row[j + 2];\n        }\n        if (row[j] === 'GSTIN' && row[j + 1] && billedToGstin && !shippedToGstin) {\n          shippedToGstin = row[j + 1];\n        }\n      }\n    }\n\n    // Payment details from row 7\n    if (row[0] === 'MODE OF PAYMENT' && row[2]) {\n      modeOfPayment = row[2];\n      \n      for (let j = 0; j < row.length; j++) {\n        if (row[j] === 'CONTRACT REF ID' && row[j + 1]) {\n          contractRefId = row[j + 1];\n        }\n        if (row[j] === 'CONTRACT VERSION' && row[j + 1]) {\n          contractVersion = row[j + 1];\n        }\n        if (row[j] === 'CREDIT TERM' && row[j + 2]) {\n          creditTerm = row[j + 2];\n        }\n      }\n    }\n  }\n\n  // Find the header row for order details\n  let orderDetailsStartIndex = -1;\n  for (let i = 0; i < records.length; i++) {\n    const row = records[i];\n    if (row && row[0] === 'S. no.' && row.includes('HSN/SA Code')) {\n      orderDetailsStartIndex = i + 1;\n      console.log('Found order details header at row:', i, 'Start index:', orderDetailsStartIndex);\n      break;\n    }\n  }\n  \n  console.log('Extracted PO Number:', poNumber);\n  console.log('Supplier Name:', supplierName);\n  console.log('Order details start index:', orderDetailsStartIndex);\n\n  // Parse line items\n  let totalQuantity = 0;\n  let totalTaxableValue = 0;\n  let totalTaxAmount = 0;\n  let totalAmount = 0;\n\n  if (orderDetailsStartIndex > 0) {\n    for (let i = orderDetailsStartIndex; i < records.length; i++) {\n      const row = records[i];\n      if (!row || row.length < 5) continue;\n      \n      // Stop if we hit summary or notification rows\n      if (row[0]?.toString().includes('Total Quantity') || \n          row[0]?.toString().includes('Important Notification') ||\n          !row[0] || row[0].toString().trim() === '') {\n        break;\n      }\n\n      try {\n        const lineNumber = parseInt(row[0]?.toString() || '0');\n        if (lineNumber > 0) {\n          const line: InsertFlipkartGroceryPoLines = {\n            line_number: lineNumber,\n            hsn_code: row[1]?.toString() || null,\n            fsn_isbn: row[2]?.toString() || null,\n            quantity: parseInt(row[3]?.toString() || '0'),\n            pending_quantity: parseInt(row[4]?.toString() || '0'),\n            uom: row[5]?.toString() || null,\n            title: row[6]?.toString() || '',\n            brand: row[8]?.toString() || null,\n            type: row[9]?.toString() || null,\n            ean: row[10]?.toString() || null,\n            vertical: row[11]?.toString() || null,\n            required_by_date: parseDate(row[12]?.toString()),\n            supplier_mrp: parseDecimal(row[13]?.toString()),\n            supplier_price: parseDecimal(row[14]?.toString()),\n            taxable_value: parseDecimal(row[15]?.toString()),\n            igst_rate: parseDecimal(row[16]?.toString()),\n            igst_amount_per_unit: parseDecimal(row[17]?.toString()),\n            sgst_rate: parseDecimal(row[18]?.toString()),\n            sgst_amount_per_unit: parseDecimal(row[19]?.toString()),\n            cgst_rate: parseDecimal(row[20]?.toString()),\n            cgst_amount_per_unit: parseDecimal(row[21]?.toString()),\n            cess_rate: parseDecimal(row[22]?.toString()),\n            cess_amount_per_unit: parseDecimal(row[23]?.toString()),\n            tax_amount: parseDecimal(row[24]?.toString()),\n            total_amount: parseDecimal(row[25]?.toString()),\n            status: 'Pending',\n            created_by: uploadedBy\n          };\n\n          lines.push(line);\n          console.log('Parsed line item:', line);\n          \n          // Update totals\n          totalQuantity += line.quantity;\n          totalTaxableValue += Number(line.taxable_value) || 0;\n          totalTaxAmount += Number(line.tax_amount) || 0;\n          totalAmount += Number(line.total_amount) || 0;\n        }\n      } catch (error) {\n        console.warn(`Error parsing line ${i}:`, error);\n        continue;\n      }\n    }\n  }\n\n  header = {\n    po_number: poNumber,\n    supplier_name: supplierName,\n    supplier_address: supplierAddress,\n    supplier_contact: supplierContact,\n    supplier_email: supplierEmail,\n    supplier_gstin: supplierGstin,\n    billed_to_address: billedToAddress,\n    billed_to_gstin: billedToGstin,\n    shipped_to_address: shippedToAddress,\n    shipped_to_gstin: shippedToGstin,\n    nature_of_supply: natureOfSupply,\n    nature_of_transaction: natureOfTransaction,\n    po_expiry_date: poExpiryDate,\n    category: category,\n    order_date: orderDate,\n    mode_of_payment: modeOfPayment,\n    contract_ref_id: contractRefId,\n    contract_version: contractVersion,\n    credit_term: creditTerm,\n    total_quantity: totalQuantity,\n    total_taxable_value: totalTaxableValue.toString(),\n    total_tax_amount: totalTaxAmount.toString(),\n    total_amount: totalAmount.toString(),\n    status: 'Open',\n    created_by: uploadedBy,\n    uploaded_by: uploadedBy\n  };\n\n  return { header, lines };\n}\n\nfunction parseDate(dateStr: string | undefined): Date | undefined {\n  if (!dateStr) return undefined;\n  \n  try {\n    // Handle DD-MM-YY format\n    if (dateStr.includes('-')) {\n      const parts = dateStr.split('-');\n      if (parts.length === 3) {\n        const day = parseInt(parts[0]);\n        const month = parseInt(parts[1]) - 1; // JS months are 0-indexed\n        let year = parseInt(parts[2]);\n        \n        // Convert 2-digit year to 4-digit\n        if (year < 100) {\n          year += year < 50 ? 2000 : 1900;\n        }\n        \n        return new Date(year, month, day);\n      }\n    }\n    \n    return new Date(dateStr);\n  } catch (error) {\n    console.warn('Error parsing date:', dateStr, error);\n    return undefined;\n  }\n}\n\nfunction parseDecimal(value: string | undefined): string | null {\n  if (!value) return null;\n  \n  try {\n    // Remove currency symbols and extra text\n    const cleanValue = value.toString()\n      .replace(/[^\\d.-]/g, '')\n      .trim();\n    \n    if (cleanValue === '') return null;\n    \n    const parsed = parseFloat(cleanValue);\n    return isNaN(parsed) ? null : parsed.toString();\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction extractBrandFromName(articleName: string): string {\n  // Extract brand from article name (first word typically)\n  if (!articleName) return 'Unknown';\n  \n  const words = articleName.trim().split(' ');\n  if (words.length > 0) {\n    return words[0];\n  }\n  return 'Unknown';\n}\n\ninterface ParsedZeptoPO {\n  header: InsertZeptoPoHeader;\n  lines: InsertZeptoPoLines[];\n}\n\nexport function parseZeptoPO(csvContent: string, uploadedBy: string): ParsedZeptoPO {\n  // Clean the CSV content to remove any BOM or extra whitespace\n  const cleanContent = csvContent.replace(/^\\uFEFF/, '').trim();\n  \n  // First, let's check if there are multiple header rows\n  const csvLines = cleanContent.split('\\n');\n  console.log('First 3 lines of CSV:');\n  csvLines.slice(0, 3).forEach((line, idx) => {\n    console.log(`Line ${idx + 1}: ${line}`);\n  });\n  \n  const records = parse(cleanContent, {\n    columns: true,\n    skip_empty_lines: true,\n    trim: true,\n    skip_records_with_empty_values: false,\n    from_line: 1  // Start from first line (header)\n  });\n\n  if (records.length === 0) {\n    throw new Error('CSV file is empty or invalid');\n  }\n\n  // Get PO number from first record\n  const firstRecord = records[0] as Record<string, string>;\n  const poNumber = firstRecord['PO No.'];\n  if (!poNumber) {\n    throw new Error('PO Number not found in CSV');\n  }\n\n  const lines: InsertZeptoPoLines[] = [];\n  const brands = new Set<string>();\n  let totalQuantity = 0;\n  let totalCostValue = 0;\n  let totalTaxAmount = 0;\n  let totalAmount = 0;\n\n  // Process each line item\n  records.forEach((record: any, index: number) => {\n    try {\n      // Debug logging for first record\n      if (index === 0) {\n        console.log('Zepto CSV columns:', Object.keys(record));\n        console.log('SAP Id value:', record['SAP Id']);\n        console.log('All column variations:');\n        Object.keys(record).forEach(key => {\n          if (key.toLowerCase().includes('sap')) {\n            console.log(`  \"${key}\": \"${record[key]}\"`);\n          }\n        });\n        console.log('First record full data:', record);\n      }\n      \n      const line: InsertZeptoPoLines = {\n        line_number: index + 1,\n        po_number: record['PO No.'] || poNumber,\n        sku: record['SKU'] || '',\n        brand: record['Brand'] || '',\n        sku_id: record['SKU Id'] || '',\n        sap_id: record['SAP Id'] || '',\n        hsn_code: record['HSN Code'] || '',\n        ean_no: record['EAN No.'] || '',\n        po_qty: parseInt(record['PO Qty']) || 0,\n        asn_qty: parseInt(record['ASN Qty']) || 0,\n        grn_qty: parseInt(record['GRN Qty']) || 0,\n        remaining_qty: parseInt(record['Remaining']) || 0,\n        cost_price: parseDecimal(record['Cost Price']),\n        cgst: parseDecimal(record['CGST']),\n        sgst: parseDecimal(record['SGST']),\n        igst: parseDecimal(record['IGST']),\n        cess: parseDecimal(record['CESS']),\n        mrp: parseDecimal(record['MRP']),\n        total_value: parseDecimal(record['Total Value']),\n        status: 'Pending',\n        created_by: uploadedBy\n      };\n\n      lines.push(line);\n\n      // Add brand to set\n      if (line.brand) {\n        brands.add(line.brand);\n      }\n\n      // Update totals\n      totalQuantity += line.po_qty || 0;\n      totalCostValue += Number(line.cost_price || 0) * (line.po_qty || 0);\n      totalTaxAmount += (Number(line.cgst || 0) + Number(line.sgst || 0) + Number(line.igst || 0) + Number(line.cess || 0)) * (line.po_qty || 0);\n      totalAmount += Number(line.total_value) || 0;\n\n    } catch (error) {\n      console.warn(`Error parsing Zepto PO line ${index + 1}:`, error);\n    }\n  });\n\n  const header: InsertZeptoPoHeader = {\n    po_number: poNumber,\n    status: 'Open',\n    total_quantity: totalQuantity,\n    total_cost_value: totalCostValue.toString(),\n    total_tax_amount: totalTaxAmount.toString(),\n    total_amount: totalAmount.toString(),\n    unique_brands: Array.from(brands),\n    created_by: uploadedBy,\n    uploaded_by: uploadedBy\n  };\n\n  return { header, lines };\n}\n\ninterface ParsedCityMallPO {\n  header: InsertCityMallPoHeader;\n  lines: InsertCityMallPoLines[];\n}\n\nexport function parseCityMallPO(csvContent: string, uploadedBy: string, filename?: string): ParsedCityMallPO {\n  const records = parse(csvContent, {\n    columns: true,\n    skip_empty_lines: true,\n    trim: true\n  });\n\n  if (records.length === 0) {\n    throw new Error('CSV file is empty or invalid');\n  }\n\n  // Extract PO number from filename or use a generated one\n  let poNumber = `CM${Date.now()}`;\n  \n  if (filename) {\n    // Try to extract PO number from filename like \"PO-1346338_timestamp.csv\"\n    const poMatch = filename.match(/PO-(\\d+)/i);\n    if (poMatch) {\n      poNumber = poMatch[1]; // Use just the number part\n    }\n  }\n  \n  const lines: InsertCityMallPoLines[] = [];\n  const hsnCodes = new Set<string>();\n  let totalQuantity = 0;\n  let totalBaseAmount = 0;\n  let totalIgstAmount = 0;\n  let totalCessAmount = 0;\n  let totalAmount = 0;\n\n  // Process each line item\n  records.forEach((record: Record<string, string>, index: number) => {\n    try {\n      // Skip total row\n      if (record['S.No'] === '' && record['Article Id'] === 'Total') {\n        return;\n      }\n\n      // Parse IGST and CESS percentages from combined field\n      const igstCessField = record['IGST (%) cess (%)'] || '';\n      const igstCessLines = igstCessField.split('\\n');\n      const igstPercent = parseFloat(igstCessLines[0] || '0');\n      const cessPercent = parseFloat(igstCessLines[1] || '0');\n\n      // Parse IGST and CESS amounts from combined field\n      const igstCessAmountField = record['IGST (₹) cess'] || '';\n      const igstCessAmountLines = igstCessAmountField.split('\\n');\n      const igstAmount = parseFloat(igstCessAmountLines[0] || '0');\n      const cessAmount = parseFloat(igstCessAmountLines[1] || '0');\n\n      const line: InsertCityMallPoLines = {\n        line_number: parseInt(record['S.No']) || index + 1,\n        article_id: record['Article Id'] || '',\n        article_name: record['Article Name'] || '',\n        hsn_code: record['HSN Code'] || '',\n        mrp: parseDecimal(record['MRP (₹)']),\n        base_cost_price: parseDecimal(record['Base Cost Price (₹)']),\n        quantity: parseInt(record['Quantity']) || 0,\n        base_amount: parseDecimal(record['Base Amount (₹)']),\n        igst_percent: igstPercent.toString(),\n        cess_percent: cessPercent.toString(),\n        igst_amount: igstAmount.toString(),\n        cess_amount: cessAmount.toString(),\n        total_amount: parseDecimal(record['Total Amount (₹)']),\n        status: 'Pending',\n        created_by: uploadedBy\n      };\n\n\n\n      lines.push(line);\n\n      // Add HSN code to set\n      if (line.hsn_code) {\n        hsnCodes.add(line.hsn_code);\n      }\n\n      // Update totals\n      totalQuantity += line.quantity || 0;\n      totalBaseAmount += Number(line.base_amount || 0);\n      totalIgstAmount += igstAmount;\n      totalCessAmount += cessAmount;\n      totalAmount += Number(line.total_amount || 0);\n\n    } catch (error) {\n      console.warn(`Error parsing City Mall PO line ${index + 1}:`, error);\n    }\n  });\n\n  const header: InsertCityMallPoHeader = {\n    po_number: poNumber,\n    status: 'Open',\n    total_quantity: totalQuantity,\n    total_base_amount: totalBaseAmount.toString(),\n    total_igst_amount: totalIgstAmount.toString(),\n    total_cess_amount: totalCessAmount.toString(),\n    total_amount: totalAmount.toString(),\n    unique_hsn_codes: Array.from(hsnCodes),\n    created_by: uploadedBy,\n    uploaded_by: uploadedBy\n  };\n\n  return { header, lines };\n}\n\nexport function parseBlinkitPO(fileContent: Buffer, uploadedBy: string): {\n  poList: Array<{\n    header: InsertBlinkitPoHeader;\n    lines: InsertBlinkitPoLines[];\n  }>;\n} {\n  let rows: any[];\n  \n  try {\n    // Try to parse as Excel file first\n    const workbook = XLSX.read(fileContent, { type: 'buffer' });\n    const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n    \n    // Convert to JSON - try different approaches for Blinkit files\n    let jsonData: any[];\n    \n    // First try: Get all data as arrays to understand structure\n    const rawData = XLSX.utils.sheet_to_json(worksheet, {\n      header: 1,\n      defval: '',\n      blankrows: false,\n      range: undefined  // Get all data\n    });\n    \n    if (rawData.length === 0) {\n      throw new Error('Excel file appears to be empty');\n    }\n    \n    // Look for actual data rows - skip title/header rows that might be merged\n    let dataStartRow = 0;\n    let headers: string[] = [];\n    \n    // Find the row with actual column headers\n    for (let i = 0; i < Math.min(10, rawData.length); i++) {\n      const row = rawData[i] as any[];\n      if (row && row.length > 1) {\n        // Check if this looks like a header row with multiple meaningful columns\n        const nonEmptyColumns = row.filter(cell => cell && cell.toString().trim() !== '').length;\n        if (nonEmptyColumns >= 4) { // At least 4 columns with data\n          headers = row.map(cell => (cell || '').toString().trim());\n          dataStartRow = i + 1;\n          break;\n        }\n      }\n    }\n    \n    if (headers.length === 0) {\n      throw new Error('Could not find column headers in the Excel file. Please ensure the file has proper column headers.');\n    }\n    \n    // Get data rows\n    const dataRows = rawData.slice(dataStartRow);\n    if (dataRows.length === 0) {\n      throw new Error('No data rows found in the Excel file');\n    }\n    \n    // Convert to object format with headers\n    rows = dataRows.map((row: any[]) => {\n      const obj: any = {};\n      headers.forEach((header, index) => {\n        obj[header] = (row[index] || '').toString().trim();\n      });\n      return obj;\n    }).filter(row => {\n      // Filter out completely empty rows\n      return Object.values(row).some(value => value !== '');\n    });\n  } catch (xlsxError) {\n    // Fallback to CSV parsing if Excel parsing fails\n    try {\n      const csvContent = fileContent.toString('utf-8');\n      const parsedData = Papa.parse(csvContent, {\n        header: true,\n        skipEmptyLines: true,\n        transformHeader: (header: string) => header.trim()\n      });\n\n      if (parsedData.errors.length > 0) {\n        throw new Error(`CSV parsing errors: ${parsedData.errors.map(e => e.message).join(', ')}`);\n      }\n\n      rows = parsedData.data as any[];\n    } catch (csvError) {\n      throw new Error(`Failed to parse file as both Excel and CSV: ${xlsxError instanceof Error ? xlsxError.message : 'Excel error'}, ${csvError instanceof Error ? csvError.message : 'CSV error'}`);\n    }\n  }\n\n  if (rows.length === 0) {\n    throw new Error('File appears to be empty');\n  }\n\n  // Check for required headers with flexible matching\n  const headers = Object.keys(rows[0]);\n  console.log('Blinkit file headers found:', headers);\n  const headerMap: { [key: string]: string } = {};\n  \n  // Map common header variations to standard field names (case-insensitive)\n  const headerMappings = {\n    po_number: ['po_number', 'po number', 'ponumber', 'po_no', 'po no', 'purchase order number', 'purchase order', 'po #', 'po#', 'order number', 'order no'],\n    item_id: ['item_id', 'item id', 'itemid', 'product_id', 'product id', 'sku', 'item code', 'item_code', 'product code', 'product_code', 'barcode', 'article id'],\n    name: ['name', 'product_name', 'product name', 'item_name', 'item name', 'description', 'product_description', 'product description', 'item description', 'title', 'product title'],\n    remaining_quantity: ['remaining_quantity', 'remaining quantity', 'quantity', 'qty', 'ordered_quantity', 'ordered quantity', 'order qty', 'order quantity', 'req qty', 'required quantity']\n  };\n  \n  // Find matching headers (case-insensitive)\n  for (const [standardField, variations] of Object.entries(headerMappings)) {\n    const matchedHeader = headers.find(header => \n      variations.some(variation => \n        header.toLowerCase().trim() === variation.toLowerCase()\n      )\n    );\n    if (matchedHeader) {\n      headerMap[standardField] = matchedHeader;\n    }\n  }\n  \n  // Check if we found all required headers\n  const requiredFields = ['po_number', 'item_id', 'name', 'remaining_quantity'];\n  const missingFields = requiredFields.filter(field => !headerMap[field]);\n  \n  console.log('Header mapping result:', headerMap);\n  console.log('Missing fields:', missingFields);\n  \n  if (missingFields.length > 0) {\n    // If we're missing critical fields, provide more helpful error message\n    const suggestions = missingFields.map(field => {\n      const variations = headerMappings[field as keyof typeof headerMappings];\n      return `${field} (expected one of: ${variations.join(', ')})`;\n    });\n    \n    throw new Error(`Missing required fields: ${suggestions.join(' | ')}. Available headers: ${headers.join(', ')}. Please check if your file has the correct column names.`);\n  }\n\n  // Group rows by PO number\n  const poGroups: { [poNumber: string]: any[] } = {};\n  \n  rows.forEach(row => {\n    const poNumber = row[headerMap.po_number]?.toString().trim();\n    if (!poNumber) {\n      throw new Error('PO number is not available, please check your uploaded file');\n    }\n    \n    if (!poGroups[poNumber]) {\n      poGroups[poNumber] = [];\n    }\n    poGroups[poNumber].push(row);\n  });\n\n  // Process each PO separately\n  const poList = Object.entries(poGroups).map(([poNumber, poRows]) => {\n    let totalQuantity = 0;\n    let totalAmount = 0;\n\n    const blinkitLines: InsertBlinkitPoLines[] = poRows.map((row: any, index: number) => {\n      // Use the flexible field mappings\n      const quantity = Number(row[headerMap.remaining_quantity] || row['remaining_quantity'] || row['quantity'] || row['qty'] || 0);\n      const lineTotal = Number(row['total_amount'] || row['line_total'] || row['amount'] || 0);\n      \n      totalQuantity += quantity;\n      totalAmount += lineTotal;\n\n      return {\n        line_number: index + 1,\n        item_code: String(row[headerMap.item_id] || row['item_id'] || row['sku'] || ''),\n        hsn_code: String(row['hsn_code'] || row['hsn'] || ''),\n        product_upc: String(row['upc'] || row['barcode'] || ''),\n        product_description: String(row[headerMap.name] || row['name'] || row['description'] || ''),\n        grammage: String(row['uom_text'] || row['uom'] || row['unit'] || ''),\n        basic_cost_price: (Number(row['cost_price'] || row['base_price'] || 0)).toString(),\n        cgst_percent: (Number(row['cgst_value'] || row['cgst'] || 0)).toString(),\n        sgst_percent: (Number(row['sgst_value'] || row['sgst'] || 0)).toString(),\n        igst_percent: (Number(row['igst_value'] || row['igst'] || 0)).toString(),\n        cess_percent: (Number(row['cess_value'] || row['cess'] || 0)).toString(),\n        additional_cess: '0',\n        tax_amount: (Number(row['tax_value'] || row['tax_amount'] || row['tax'] || 0)).toString(),\n        landing_rate: (Number(row['landing_rate'] || row['unit_price'] || row['price'] || 0)).toString(),\n        quantity: quantity,\n        mrp: (Number(row['mrp'] || row['max_retail_price'] || 0)).toString(),\n        margin_percent: (Number(row['margin_percentage'] || row['margin'] || 0)).toString(),\n        total_amount: lineTotal.toString(),\n        status: String(row['po_state'] || row['status'] || \"Active\"),\n        created_by: uploadedBy\n      };\n    });\n\n    const blinkitHeader: InsertBlinkitPoHeader = {\n      po_number: poNumber,\n      status: \"Open\",\n      total_quantity: totalQuantity,\n      total_tax_amount: blinkitLines.reduce((sum, line) => sum + Number(line.tax_amount), 0).toString(),\n      created_by: uploadedBy\n    };\n\n    return { header: blinkitHeader, lines: blinkitLines };\n  });\n\n  return { poList };\n}\n\ninterface ParsedSwiggyPO {\n  header: InsertSwiggyPo;\n  lines: InsertSwiggyPoLine[];\n}\n\nexport async function parseSwiggyPO(fileBuffer: Buffer, uploadedBy: string): Promise<ParsedSwiggyPO> {\n  // Read the Excel file\n  const workbook = XLSX.read(fileBuffer, { type: 'buffer' });\n  const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n  \n  // Convert worksheet to CSV format first to get tabular data\n  const csvData = XLSX.utils.sheet_to_csv(worksheet);\n  \n  // Parse CSV to get structured rows\n  const records = parse(csvData, {\n    skip_empty_lines: true,\n    relax_column_count: true\n  });\n  \n  // Initialize variables for header\n  let poNumber = '';\n  let poDate = '';\n  let supplierName = '';\n  let totalAmount = 0;\n  let totalQuantity = 0;\n  \n  // Extract header information from CSV rows\n  for (const row of records) {\n    if (!row || row.length === 0) continue;\n    \n    for (const value of row) {\n      if (!value) continue;\n      \n      // Look for PO number pattern\n      if (typeof value === 'string' && value.includes('SOTY-')) {\n        poNumber = value.trim();\n      }\n      \n      // Look for date patterns\n      if (typeof value === 'string' && value.match(/\\d{2}\\/\\d{2}\\/\\d{4}/)) {\n        poDate = value;\n      }\n      \n      // Look for supplier information\n      if (typeof value === 'string' && value.toLowerCase().includes('supplier')) {\n        supplierName = value;\n      }\n    }\n  }\n  \n  // Parse line items from the data rows\n  const lines: InsertSwiggyPoLine[] = [];\n  let lineNumber = 1;\n  \n  // Look for tabular data starting after header rows\n  let dataStartRow = -1;\n  for (let i = 0; i < records.length; i++) {\n    const row = records[i];\n    if (!row) continue;\n    \n    // Check if this row contains item data headers\n    const cellValues = row.map((val: any) => (val || '').toString().toLowerCase());\n    if (cellValues.some((val: string) => val.includes('item') || val.includes('product') || val.includes('description'))) {\n      dataStartRow = i + 1;\n      break;\n    }\n  }\n  \n  // Extract line items\n  if (dataStartRow > 0) {\n    for (let i = dataStartRow; i < records.length; i++) {\n      const row = records[i];\n      if (!row || row.length < 3) continue;\n      \n      // Skip empty rows\n      if (row.every((val: any) => !val)) continue;\n      \n      const itemCode = row[0]?.toString() || '';\n      const itemName = row[1]?.toString() || '';\n      const quantity = Number(row[2]) || 0;\n      const unitPrice = Number(row[3]) || 0;\n      const totalPrice = Number(row[4]) || (quantity * unitPrice);\n      \n      if (itemCode && quantity > 0) {\n        lines.push({\n          line_number: lineNumber++,\n          item_code: itemCode,\n          quantity: quantity,\n          unit_price: unitPrice.toString(),\n          total_amount: totalPrice.toString(),\n          uom: 'PCS',\n          status: 'Active',\n          created_by: uploadedBy\n        });\n        \n        totalQuantity += quantity;\n        totalAmount += totalPrice;\n      }\n    }\n  }\n  \n  // Generate PO number if not found\n  if (!poNumber) {\n    const timestamp = new Date().toISOString().slice(0, 19).replace(/[-:]/g, '').replace('T', '_');\n    poNumber = `SW_${timestamp}`;\n  }\n  \n  const header: InsertSwiggyPo = {\n    po_number: poNumber,\n    po_date: poDate ? new Date(poDate) : new Date(),\n    total_amount: totalAmount.toString(),\n    total_quantity: totalQuantity,\n    total_items: lines.length,\n    status: 'Open',\n    created_by: uploadedBy,\n    uploaded_by: uploadedBy\n  };\n  \n  return {\n    header,\n    lines\n  };\n}","size_bytes":29028},"client/src/components/po/unified-upload-component.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { FileText, Upload, ArrowRight, Check, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\n\ntype Step = \"platform\" | \"upload\" | \"preview\";\n\ninterface Platform {\n  id: string;\n  name: string;\n  description: string;\n  endpoint: string;\n  queryKey: string;\n}\n\nconst PLATFORMS: Platform[] = [\n  {\n    id: \"flipkart\",\n    name: \"Flipkart Grocery\",\n    description: \"Upload Flipkart Grocery PO files\",\n    endpoint: \"/api/flipkart-grocery-pos\",\n    queryKey: \"/api/flipkart-grocery-pos\"\n  },\n  {\n    id: \"zepto\",\n    name: \"Zepto\",\n    description: \"Upload Zepto PO files\",\n    endpoint: \"/api/zepto-pos\",\n    queryKey: \"/api/zepto-pos\"\n  },\n  {\n    id: \"citymall\",\n    name: \"City Mall\",\n    description: \"Upload City Mall PO files\",\n    endpoint: \"/api/city-mall-pos\",\n    queryKey: \"/api/city-mall-pos\"\n  },\n  {\n    id: \"blinkit\",\n    name: \"Blinkit\",\n    description: \"Upload Blinkit PO files\",\n    endpoint: \"/api/blinkit-pos\",\n    queryKey: \"/api/blinkit-pos\"\n  },\n  {\n    id: \"swiggy\",\n    name: \"Swiggy Instamart\",\n    description: \"Upload Swiggy PO files\",\n    endpoint: \"/api/swiggy-pos\",\n    queryKey: \"/api/swiggy-pos\"\n  },\n  {\n    id: \"bigbasket\",\n    name: \"BigBasket\",\n    description: \"Upload BigBasket PO files\",\n    endpoint: \"/api/bigbasket-pos\",\n    queryKey: \"/api/bigbasket-pos\"\n  },\n  {\n    id: \"zomato\",\n    name: \"Zomato\",\n    description: \"Upload Zomato PO files\",\n    endpoint: \"/api/zomato-pos\",\n    queryKey: \"/api/zomato-pos\"\n  },\n  {\n    id: \"dealshare\",\n    name: \"Dealshare\",\n    description: \"Upload Dealshare PO files\",\n    endpoint: \"/api/dealshare-pos\",\n    queryKey: \"/api/dealshare-pos\"\n  }\n];\n\ninterface UnifiedUploadComponentProps {\n  onComplete?: () => void;\n}\n\nexport function UnifiedUploadComponent({ onComplete }: UnifiedUploadComponentProps) {\n  const [currentStep, setCurrentStep] = useState<Step>(\"platform\");\n  const [selectedPlatform, setSelectedPlatform] = useState<string>(\"\");\n  const [file, setFile] = useState<File | null>(null);\n  const [parsedData, setParsedData] = useState<any>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const selectedPlatformData = PLATFORMS.find(p => p.id === selectedPlatform);\n\n  const resetForm = () => {\n    setCurrentStep(\"platform\");\n    setSelectedPlatform(\"\");\n    setFile(null);\n    setParsedData(null);\n    setDragActive(false);\n  };\n\n  const previewMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"platform\", selectedPlatform);\n\n      const response = await fetch(\"/api/po/preview\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to preview file\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setParsedData(data);\n      setCurrentStep(\"preview\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Preview failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async (data: { header?: any; lines?: any[]; poList?: any[] }) => {\n      const response = await fetch(`/api/po/import/${selectedPlatform}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        if (response.status === 409 && error.type === 'duplicate_po') {\n          throw new Error(error.error);\n        }\n        throw new Error(error.error || \"Failed to import PO\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Handle both single PO response and multi-PO response\n      if (data.results && Array.isArray(data.results)) {\n        // Multi-PO response (Blinkit)\n        const successfulImports = data.results.filter((r: any) => r.status === 'success');\n        const failedImports = data.results.filter((r: any) => r.status === 'failed');\n        \n        toast({\n          title: \"PO import completed\",\n          description: `Successfully imported ${successfulImports.length} of ${data.results.length} POs${failedImports.length > 0 ? `. ${failedImports.length} failed.` : ''}`,\n        });\n      } else {\n        // Single PO response\n        toast({\n          title: \"PO imported successfully\",\n          description: `PO ${data.po_number} has been created`,\n        });\n      }\n      \n      resetForm();\n      queryClient.invalidateQueries({\n        queryKey: [selectedPlatformData!.queryKey],\n      });\n      onComplete?.();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Import failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    const files = e.dataTransfer.files;\n    if (files && files[0]) {\n      handleFileSelection(files[0]);\n    }\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files[0]) {\n      handleFileSelection(files[0]);\n    }\n  };\n\n  const handleFileSelection = (selectedFile: File) => {\n    const validTypes = [\n      \"text/csv\",\n      \"application/vnd.ms-excel\",\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    ];\n\n    const isValidFile =\n      validTypes.includes(selectedFile.type) ||\n      selectedFile.name.endsWith(\".csv\") ||\n      selectedFile.name.endsWith(\".xls\") ||\n      selectedFile.name.endsWith(\".xlsx\");\n\n    if (isValidFile) {\n      setFile(selectedFile);\n      setParsedData(null);\n    } else {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload a CSV or Excel file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePlatformSelect = (platform: string) => {\n    setSelectedPlatform(platform);\n    setCurrentStep(\"upload\");\n  };\n\n  const handlePreview = () => {\n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a file to preview\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    previewMutation.mutate(file);\n  };\n\n  const handleImport = () => {\n    if (!parsedData) return;\n    \n    // Send the entire parsed data - backend will handle single vs multi-PO structure\n    importMutation.mutate(parsedData);\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case \"platform\":\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Upload className=\"h-5 w-5\" />\n                Select Platform\n              </CardTitle>\n              <CardDescription>\n                Choose the e-commerce platform for your purchase order\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {PLATFORMS.map((platform) => (\n                  <Button\n                    key={platform.id}\n                    variant=\"outline\"\n                    className=\"h-20 text-left justify-start p-4 hover:bg-blue-50 hover:border-blue-300\"\n                    onClick={() => handlePlatformSelect(platform.id)}\n                  >\n                    <div>\n                      <div className=\"font-medium text-base\">\n                        {platform.name}\n                      </div>\n                      <div className=\"text-sm text-gray-500 mt-1\">\n                        Upload {platform.name} PO files\n                      </div>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case \"upload\":\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Upload {selectedPlatformData?.name} PO File\n              </CardTitle>\n              <CardDescription>\n                Upload CSV or Excel files containing{\" \"}\n                {selectedPlatformData?.name} purchase order data\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div\n                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                  dragActive\n                    ? \"border-blue-500 bg-blue-50\"\n                    : \"border-gray-300 hover:border-gray-400\"\n                }`}\n                onDragEnter={handleDrag}\n                onDragLeave={handleDrag}\n                onDragOver={handleDrag}\n                onDrop={handleDrop}\n              >\n                <FileText className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <div className=\"space-y-2\">\n                  <p className=\"text-lg font-medium\">\n                    {file\n                      ? \"File Selected\"\n                      : `Drop your ${selectedPlatformData?.name} CSV/Excel file here`}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    or{\" \"}\n                    <Label\n                      htmlFor=\"file-upload\"\n                      className=\"text-blue-600 hover:underline cursor-pointer\"\n                    >\n                      browse to choose a file\n                    </Label>\n                  </p>\n                  <p className=\"text-xs text-gray-400\">\n                    Supports .csv, .xls, and .xlsx files\n                  </p>\n                </div>\n                <Input\n                  id=\"file-upload\"\n                  type=\"file\"\n                  accept=\".csv,.xls,.xlsx\"\n                  className=\"hidden\"\n                  onChange={handleFileChange}\n                />\n              </div>\n\n              {file && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-green-50 border border-green-200 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Check className=\"h-5 w-5 text-green-600\" />\n                      <div>\n                        <p className=\"font-medium text-green-800\">{file.name}</p>\n                        <p className=\"text-sm text-green-600\">\n                          {(file.size / 1024).toFixed(1)} KB\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setFile(null)}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n\n                  <div className=\"flex space-x-3\">\n                    <Button\n                      onClick={handlePreview}\n                      disabled={previewMutation.isPending}\n                      className=\"flex-1\"\n                    >\n                      {previewMutation.isPending ? \"Processing...\" : \"Preview File\"}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setCurrentStep(\"platform\")}\n                    >\n                      Back\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        );\n\n      case \"preview\":\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Check className=\"h-5 w-5\" />\n                Preview & Import\n              </CardTitle>\n              <CardDescription>\n                Review the parsed data before importing to database\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {parsedData && (\n                <div className=\"space-y-6\">\n                  {/* Handle Multi-PO Display (Blinkit) */}\n                  {parsedData.poList && Array.isArray(parsedData.poList) ? (\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <h3 className=\"text-lg font-semibold\">Multiple POs Found</h3>\n                        <Badge variant=\"secondary\">\n                          {parsedData.poList.length} POs detected\n                        </Badge>\n                      </div>\n                      \n                      {parsedData.poList.map((po: any, index: number) => (\n                        <Card key={index} className=\"border-l-4 border-l-blue-500\">\n                          <CardHeader className=\"pb-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <CardTitle className=\"text-base\">\n                                PO #{po.header?.po_number || `Unknown ${index + 1}`}\n                              </CardTitle>\n                              <Badge variant=\"outline\">\n                                {po.lines?.length || 0} items\n                              </Badge>\n                            </div>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"space-y-4\">\n                              {/* Summary Grid */}\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                                <div className=\"bg-blue-50 p-3 rounded-lg\">\n                                  <span className=\"font-medium text-blue-800\">Total Items</span>\n                                  <p className=\"text-lg font-bold text-blue-900\">{po.lines?.length || 0}</p>\n                                </div>\n                                <div className=\"bg-green-50 p-3 rounded-lg\">\n                                  <span className=\"font-medium text-green-800\">Total Quantity</span>\n                                  <p className=\"text-lg font-bold text-green-900\">{po.totalQuantity || 0}</p>\n                                </div>\n                                <div className=\"bg-purple-50 p-3 rounded-lg\">\n                                  <span className=\"font-medium text-purple-800\">Total Amount</span>\n                                  <p className=\"text-lg font-bold text-purple-900\">₹{po.totalAmount || '0'}</p>\n                                </div>\n                                {po.header?.order_date && (\n                                  <div className=\"bg-orange-50 p-3 rounded-lg\">\n                                    <span className=\"font-medium text-orange-800\">Order Date</span>\n                                    <p className=\"text-sm font-medium text-orange-900\">{po.header.order_date}</p>\n                                  </div>\n                                )}\n                              </div>\n\n                              {/* Line Items Table */}\n                              {po.lines && po.lines.length > 0 && (\n                                <div className=\"mt-4\">\n                                  <h5 className=\"font-medium text-gray-700 mb-2\">Line Items Preview</h5>\n                                  <div className=\"overflow-x-auto border rounded-lg\">\n                                    <table className=\"w-full text-sm\">\n                                      <thead className=\"bg-gray-50\">\n                                        <tr>\n                                          <th className=\"text-left p-3 font-medium\">Item Code</th>\n                                          <th className=\"text-left p-3 font-medium\">Description</th>\n                                          <th className=\"text-left p-3 font-medium\">UOM</th>\n                                          <th className=\"text-left p-3 font-medium\">Quantity</th>\n                                          <th className=\"text-left p-3 font-medium\">Landing Rate</th>\n                                          <th className=\"text-left p-3 font-medium\">Total</th>\n                                        </tr>\n                                      </thead>\n                                      <tbody>\n                                        {po.lines.map((line: any, lineIndex: number) => (\n                                          <tr key={lineIndex} className=\"border-t\">\n                                            <td className=\"p-3 font-medium\">{line.item_code || 'N/A'}</td>\n                                            <td className=\"p-3\">{line.product_description || 'N/A'}</td>\n                                            <td className=\"p-3\">{line.grammage || 'N/A'}</td>\n                                            <td className=\"p-3\">{line.quantity || 0}</td>\n                                            <td className=\"p-3\">₹{line.landing_rate || '0'}</td>\n                                            <td className=\"p-3\">₹{line.total_amount || '0'}</td>\n                                          </tr>\n                                        ))}\n                                      </tbody>\n                                    </table>\n\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    /* Handle Single PO Display */\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-semibold\">PO Details</h3>\n                      \n                      {/* Header Information */}\n                      {parsedData.header && (\n                        <Card>\n                          <CardHeader>\n                            <CardTitle className=\"text-base\">Header Information</CardTitle>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm\">\n                              {Object.entries(parsedData.header).map(([key, value]) => (\n                                <div key={key}>\n                                  <span className=\"font-medium text-gray-600 capitalize\">\n                                    {key.replace(/_/g, \" \")}:\n                                  </span>\n                                  <p className=\"mt-1\">{value as string}</p>\n                                </div>\n                              ))}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      )}\n\n                      {/* Summary */}\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                        <div className=\"bg-blue-50 p-4 rounded-lg\">\n                          <div className=\"text-2xl font-bold text-blue-600\">\n                            {parsedData.totalItems || parsedData.lines?.length || 0}\n                          </div>\n                          <div className=\"text-sm text-blue-600\">Total Items</div>\n                        </div>\n                        {parsedData.totalQuantity && (\n                          <div className=\"bg-green-50 p-4 rounded-lg\">\n                            <div className=\"text-2xl font-bold text-green-600\">\n                              {parsedData.totalQuantity}\n                            </div>\n                            <div className=\"text-sm text-green-600\">Total Quantity</div>\n                          </div>\n                        )}\n                        <div className=\"bg-purple-50 p-4 rounded-lg\">\n                          <div className=\"text-2xl font-bold text-purple-600\">\n                            ₹{parsedData.totalAmount || parsedData.header?.grand_total || '0.00'}\n                          </div>\n                          <div className=\"text-sm text-purple-600\">Total Amount</div>\n                        </div>\n                      </div>\n\n                      {/* Line Items Preview */}\n                      {parsedData.lines && parsedData.lines.length > 0 && (\n                        <Card>\n                          <CardHeader>\n                            <CardTitle className=\"text-base\">Line Items Preview</CardTitle>\n                            <CardDescription>\n                              Showing all {parsedData.lines.length} items\n                            </CardDescription>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"overflow-x-auto\">\n                              <table className=\"w-full text-sm\">\n                                <thead>\n                                  <tr className=\"border-b\">\n                                    {selectedPlatformData?.id === 'zepto' ? (\n                                      <>\n                                        <th className=\"text-left p-2 font-medium\">SKU</th>\n                                        <th className=\"text-left p-2 font-medium\">Brand</th>\n                                        <th className=\"text-left p-2 font-medium\">SAP ID</th>\n                                        <th className=\"text-left p-2 font-medium\">HSN Code</th>\n                                        <th className=\"text-left p-2 font-medium\">PO Qty</th>\n                                        <th className=\"text-left p-2 font-medium\">Remaining</th>\n                                        <th className=\"text-left p-2 font-medium\">Cost Price</th>\n                                        <th className=\"text-left p-2 font-medium\">MRP</th>\n                                        <th className=\"text-left p-2 font-medium\">Total Value</th>\n                                      </>\n                                    ) : selectedPlatformData?.id === 'citymall' ? (\n                                      <>\n                                        <th className=\"text-left p-2 font-medium\">Item</th>\n                                        <th className=\"text-left p-2 font-medium\">Code</th>\n                                        <th className=\"text-left p-2 font-medium\">Quantity</th>\n                                        <th className=\"text-left p-2 font-medium\">Price</th>\n                                        <th className=\"text-left p-2 font-medium\">Total</th>\n                                      </>\n                                    ) : selectedPlatformData?.id === 'flipkart' ? (\n                                      <>\n                                        <th className=\"text-left p-2 font-medium\">Title</th>\n                                        <th className=\"text-left p-2 font-medium\">FSN/ISBN</th>\n                                        <th className=\"text-left p-2 font-medium\">Brand</th>\n                                        <th className=\"text-left p-2 font-medium\">Quantity</th>\n                                        <th className=\"text-left p-2 font-medium\">Supplier Price</th>\n                                        <th className=\"text-left p-2 font-medium\">Total</th>\n                                      </>\n                                    ) : selectedPlatformData?.id === 'swiggy' ? (\n                                      <>\n                                        <th className=\"text-left p-2 font-medium\">Item Description</th>\n                                        <th className=\"text-left p-2 font-medium\">Item Code</th>\n                                        <th className=\"text-left p-2 font-medium\">HSN Code</th>\n                                        <th className=\"text-left p-2 font-medium\">Quantity</th>\n                                        <th className=\"text-left p-2 font-medium\">MRP</th>\n                                        <th className=\"text-left p-2 font-medium\">Line Total</th>\n                                      </>\n                                    ) : selectedPlatformData?.id === 'bigbasket' ? (\n                                      <>\n                                        <th className=\"text-left p-2 font-medium\">Description</th>\n                                        <th className=\"text-left p-2 font-medium\">SKU Code</th>\n                                        <th className=\"text-left p-2 font-medium\">HSN Code</th>\n                                        <th className=\"text-left p-2 font-medium\">Quantity</th>\n                                        <th className=\"text-left p-2 font-medium\">MRP</th>\n                                        <th className=\"text-left p-2 font-medium\">Total Value</th>\n                                      </>\n                                    ) : selectedPlatformData?.id === 'zomato' ? (\n                                      <>\n                                        <th className=\"text-left p-2 font-medium\">Product Name</th>\n                                        <th className=\"text-left p-2 font-medium\">Product Number</th>\n                                        <th className=\"text-left p-2 font-medium\">HSN Code</th>\n                                        <th className=\"text-left p-2 font-medium\">Quantity</th>\n                                        <th className=\"text-left p-2 font-medium\">Price Per Unit</th>\n                                        <th className=\"text-left p-2 font-medium\">UoM</th>\n                                        <th className=\"text-left p-2 font-medium\">GST Rate</th>\n                                        <th className=\"text-left p-2 font-medium\">Line Total</th>\n                                      </>\n                                    ) : selectedPlatformData?.id === 'dealshare' ? (\n                                      <>\n                                        <th className=\"text-left p-2 font-medium\">SKU</th>\n                                        <th className=\"text-left p-2 font-medium\">Product Name</th>\n                                        <th className=\"text-left p-2 font-medium\">HSN Code</th>\n                                        <th className=\"text-left p-2 font-medium\">Quantity</th>\n                                        <th className=\"text-left p-2 font-medium\">MRP</th>\n                                        <th className=\"text-left p-2 font-medium\">Buying Price</th>\n                                        <th className=\"text-left p-2 font-medium\">GST %</th>\n                                        <th className=\"text-left p-2 font-medium\">Gross Amount</th>\n                                      </>\n                                    ) : (\n                                      <>\n                                        <th className=\"text-left p-2 font-medium\">Item</th>\n                                        <th className=\"text-left p-2 font-medium\">Code</th>\n                                        <th className=\"text-left p-2 font-medium\">Quantity</th>\n                                        <th className=\"text-left p-2 font-medium\">Price</th>\n                                        <th className=\"text-left p-2 font-medium\">Total</th>\n                                      </>\n                                    )}\n                                  </tr>\n                                </thead>\n                                <tbody>\n                                  {parsedData.lines.map((line: any, index: number) => (\n                                    <tr key={index} className=\"border-b last:border-b-0\">\n                                      {selectedPlatformData?.id === 'zepto' ? (\n                                        <>\n                                          <td className=\"p-2\">{line.sku || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.brand || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.sap_id || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.hsn_code || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.po_qty || 0}</td>\n                                          <td className=\"p-2\">{line.remaining_qty || 0}</td>\n                                          <td className=\"p-2\">₹{line.cost_price || '0.00'}</td>\n                                          <td className=\"p-2\">₹{line.mrp || '0.00'}</td>\n                                          <td className=\"p-2\">₹{line.total_value || '0.00'}</td>\n                                        </>\n                                      ) : selectedPlatformData?.id === 'citymall' ? (\n                                        <>\n                                          <td className=\"p-2\">{line.article_name || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.article_id || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.quantity || 0}</td>\n                                          <td className=\"p-2\">₹{line.base_cost_price || '0.00'}</td>\n                                          <td className=\"p-2\">₹{line.total_amount || '0.00'}</td>\n                                        </>\n                                      ) : selectedPlatformData?.id === 'flipkart' ? (\n                                        <>\n                                          <td className=\"p-2\">{line.title || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.fsn_isbn || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.brand || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.quantity || 0}</td>\n                                          <td className=\"p-2\">₹{line.supplier_price || '0.00'}</td>\n                                          <td className=\"p-2\">₹{line.total_amount || '0.00'}</td>\n                                        </>\n                                      ) : selectedPlatformData?.id === 'swiggy' ? (\n                                        <>\n                                          <td className=\"p-2\">{line.item_description || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.item_code || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.hsn_code || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.quantity || 0}</td>\n                                          <td className=\"p-2\">₹{line.mrp || '0.00'}</td>\n                                          <td className=\"p-2\">₹{line.line_total || '0.00'}</td>\n                                        </>\n                                      ) : selectedPlatformData?.id === 'bigbasket' ? (\n                                        <>\n                                          <td className=\"p-2\">{line.description || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.sku_code || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.hsn_code || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.quantity || 0}</td>\n                                          <td className=\"p-2\">₹{line.mrp || '0.00'}</td>\n                                          <td className=\"p-2\">₹{line.total_value || '0.00'}</td>\n                                        </>\n                                      ) : selectedPlatformData?.id === 'zomato' ? (\n                                        <>\n                                          <td className=\"p-2\">{line.product_name || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.product_number || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.hsn_code || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.quantity_ordered || 0}</td>\n                                          <td className=\"p-2\">₹{line.price_per_unit || '0.00'}</td>\n                                          <td className=\"p-2\">{line.uom || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.gst_rate || '0.00'}%</td>\n                                          <td className=\"p-2\">₹{line.line_total || '0.00'}</td>\n                                        </>\n                                      ) : selectedPlatformData?.id === 'dealshare' ? (\n                                        <>\n                                          <td className=\"p-2\">{line.sku || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.product_name || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.hsn_code || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.quantity || 0}</td>\n                                          <td className=\"p-2\">₹{line.mrp_tax_inclusive || '0.00'}</td>\n                                          <td className=\"p-2\">₹{line.buying_price || '0.00'}</td>\n                                          <td className=\"p-2\">{line.gst_percent || '0.00'}%</td>\n                                          <td className=\"p-2\">₹{line.gross_amount || '0.00'}</td>\n                                        </>\n                                      ) : (\n                                        <>\n                                          <td className=\"p-2\">{line.item_name || line.sku || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.item_code || line.sku || 'N/A'}</td>\n                                          <td className=\"p-2\">{line.quantity || line.po_qty || 0}</td>\n                                          <td className=\"p-2\">₹{line.cost_price || line.mrp || '0.00'}</td>\n                                          <td className=\"p-2\">₹{line.total_value || line.total_amount || '0.00'}</td>\n                                        </>\n                                      )}\n                                    </tr>\n                                  ))}\n                                </tbody>\n                              </table>\n\n                            </div>\n                          </CardContent>\n                        </Card>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Action Buttons */}\n                  <div className=\"flex space-x-3 pt-4 border-t\">\n                    <Button\n                      onClick={handleImport}\n                      disabled={importMutation.isPending}\n                      className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                    >\n                      {importMutation.isPending ? \"Importing...\" : \"Import to Database\"}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setCurrentStep(\"upload\")}\n                      disabled={importMutation.isPending}\n                    >\n                      Back\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Progress Steps */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center justify-center space-x-8\">\n            <div\n              className={`flex items-center gap-2 ${currentStep === \"platform\" ? \"text-blue-600\" : currentStep === \"upload\" || currentStep === \"preview\" ? \"text-green-600\" : \"text-gray-400\"}`}\n            >\n              <div\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${currentStep === \"platform\" ? \"bg-blue-100 text-blue-600\" : currentStep === \"upload\" || currentStep === \"preview\" ? \"bg-green-100 text-green-600\" : \"bg-gray-100 text-gray-400\"}`}\n              >\n                1\n              </div>\n              <span className=\"font-medium\">Select Platform</span>\n            </div>\n\n            <ArrowRight className=\"h-5 w-5 text-gray-400\" />\n\n            <div\n              className={`flex items-center gap-2 ${currentStep === \"upload\" ? \"text-blue-600\" : currentStep === \"preview\" ? \"text-green-600\" : \"text-gray-400\"}`}\n            >\n              <div\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${currentStep === \"upload\" ? \"bg-blue-100 text-blue-600\" : currentStep === \"preview\" ? \"bg-green-100 text-green-600\" : \"bg-gray-100 text-gray-400\"}`}\n              >\n                2\n              </div>\n              <span className=\"font-medium\">Upload File</span>\n            </div>\n\n            <ArrowRight className=\"h-5 w-5 text-gray-400\" />\n\n            <div\n              className={`flex items-center gap-2 ${currentStep === \"preview\" ? \"text-blue-600\" : \"text-gray-400\"}`}\n            >\n              <div\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${currentStep === \"preview\" ? \"bg-blue-100 text-blue-600\" : \"bg-gray-100 text-gray-400\"}`}\n              >\n                3\n              </div>\n              <span className=\"font-medium\">Preview & Import</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Step Content */}\n      {renderStepContent()}\n    </div>\n  );\n}","size_bytes":38414},"client/src/pages/zepto-po-details.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Package, Calendar, User, Hash, Banknote, Eye, CheckCircle, AlertCircle } from \"lucide-react\";\n\ninterface ZeptoPoDetails {\n  id: number;\n  po_number: string;\n  status: string;\n  total_quantity: number;\n  total_cost_value: string;\n  total_tax_amount: string;\n  total_amount: string;\n  unique_brands: string[];\n  created_by: string;\n  uploaded_by: string;\n  created_at: string;\n  updated_at: string;\n  poLines: Array<{\n    id: number;\n    po_header_id: number;\n    line_number: number;\n    po_number: string;\n    sku: string;\n    brand: string;\n    sku_id: string;\n    sap_id: string;\n    hsn_code: string;\n    ean_no: string;\n    po_qty: number;\n    asn_qty: number;\n    grn_qty: number;\n    remaining_qty: number;\n    cost_price: string;\n    cgst: string;\n    sgst: string;\n    igst: string;\n    cess: string;\n    mrp: string;\n    total_value: string;\n    status: string;\n    created_by: string;\n    created_at: string;\n  }>;\n}\n\nexport default function ZeptoPoDetails() {\n  const [match, params] = useRoute(\"/zepto-pos/:id\");\n  const poId = params?.id ? parseInt(params.id) : 0;\n\n  const { data: po, isLoading, error } = useQuery<ZeptoPoDetails>({\n    queryKey: [`/api/zepto-pos/${poId}`],\n    enabled: !!poId,\n  });\n\n  // Debug logging\n  console.log('ZeptoPoDetails component:', { poId, queryKey: `/api/zepto-pos/${poId}` });\n  if (po) {\n    console.log('Zepto PO data loaded:', { id: po.id, po_number: po.po_number });\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <Package className=\"mx-auto h-12 w-12 text-muted-foreground animate-pulse\" />\n            <h3 className=\"mt-4 text-lg font-semibold\">Loading PO Details...</h3>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !po) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"mx-auto h-12 w-12 text-red-500\" />\n            <h3 className=\"mt-4 text-lg font-semibold\">PO Not Found</h3>\n            <p className=\"text-muted-foreground\">The purchase order you're looking for doesn't exist.</p>\n            <Link href=\"/zepto-pos\">\n              <Button className=\"mt-4\">\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Back to POs\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusColors = {\n      'Open': 'bg-green-100 text-green-800 border-green-200',\n      'Closed': 'bg-gray-100 text-gray-800 border-gray-200',\n      'Cancelled': 'bg-red-100 text-red-800 border-red-200',\n      'Pending': 'bg-yellow-100 text-yellow-800 border-yellow-200',\n    };\n\n    return (\n      <Badge \n        variant=\"outline\" \n        className={statusColors[status as keyof typeof statusColors] || 'bg-blue-100 text-blue-800 border-blue-200'}\n      >\n        {status}\n      </Badge>\n    );\n  };\n\n  const getLineStatusBadge = (status: string) => {\n    const statusColors = {\n      'Pending': 'bg-yellow-100 text-yellow-800 border-yellow-200',\n      'Received': 'bg-green-100 text-green-800 border-green-200',\n      'Cancelled': 'bg-red-100 text-red-800 border-red-200',\n    };\n\n    return (\n      <Badge \n        variant=\"outline\" \n        className={statusColors[status as keyof typeof statusColors] || 'bg-blue-100 text-blue-800 border-blue-200'}\n      >\n        {status}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <div className=\"flex-shrink-0 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/zepto-pos\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                </Button>\n              </Link>\n              <div>\n                <h1 className=\"text-3xl font-bold\">{po.po_number}</h1>\n                <p className=\"text-muted-foreground\">\n                  <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm font-medium\">Zepto</span> Purchase Order Details\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              {getStatusBadge(po.status)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"container mx-auto p-6 space-y-6\">\n          {/* PO Summary */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Quantity</CardTitle>\n                <Package className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{po.total_quantity.toLocaleString()}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Items ordered\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Cost Value</CardTitle>\n                <Banknote className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">₹{Number(po.total_cost_value).toLocaleString()}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Cost price total\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Tax Amount</CardTitle>\n                <Hash className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">₹{Number(po.total_tax_amount).toLocaleString()}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Total taxes\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Amount</CardTitle>\n                <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">₹{Number(po.total_amount).toLocaleString()}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Final amount\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* PO Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Purchase Order Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">PO Number</label>\n                  <p className=\"text-lg font-semibold\">{po.po_number}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                  <div className=\"mt-1\">\n                    {getStatusBadge(po.status)}\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Number of Brands</label>\n                  <p className=\"text-lg\">{po.unique_brands.length}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Line Items</label>\n                  <p className=\"text-lg\">{po.poLines.length}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Created By</label>\n                  <p className=\"text-lg\">{po.created_by || 'System'}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Created Date</label>\n                  <div className=\"flex items-center gap-1\">\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                    <p>{new Date(po.created_at).toLocaleDateString()}</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Brands */}\n              <div className=\"mt-6\">\n                <label className=\"text-sm font-medium text-muted-foreground\">Brands</label>\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {po.unique_brands.map((brand, index) => (\n                    <Badge key={index} variant=\"outline\">{brand}</Badge>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Line Items */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Line Items ({po.poLines.length})</CardTitle>\n              <CardDescription>\n                Detailed breakdown of all items in this purchase order\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {po.poLines.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Package className=\"mx-auto h-8 w-8 text-muted-foreground\" />\n                  <p className=\"mt-2 text-sm text-muted-foreground\">No line items found</p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Line #</TableHead>\n                        <TableHead>SKU</TableHead>\n                        <TableHead>Brand</TableHead>\n                        <TableHead>HSN Code</TableHead>\n                        <TableHead>PO Qty</TableHead>\n                        <TableHead>Cost Price</TableHead>\n                        <TableHead>CGST</TableHead>\n                        <TableHead>SGST</TableHead>\n                        <TableHead>IGST</TableHead>\n                        <TableHead>MRP</TableHead>\n                        <TableHead>Total Value</TableHead>\n                        <TableHead>Status</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {po.poLines.map((line) => (\n                        <TableRow key={line.id}>\n                          <TableCell className=\"font-medium\">{line.line_number}</TableCell>\n                          <TableCell>\n                            <div className=\"max-w-xs\">\n                              <p className=\"font-medium truncate\" title={line.sku}>{line.sku}</p>\n                              <p className=\"text-xs text-muted-foreground\">{line.sku_id}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>{line.brand}</TableCell>\n                          <TableCell>{line.hsn_code}</TableCell>\n                          <TableCell className=\"text-right\">{line.po_qty.toLocaleString()}</TableCell>\n                          <TableCell className=\"text-right\">₹{Number(line.cost_price).toFixed(2)}</TableCell>\n                          <TableCell className=\"text-right\">₹{Number(line.cgst).toFixed(2)}</TableCell>\n                          <TableCell className=\"text-right\">₹{Number(line.sgst).toFixed(2)}</TableCell>\n                          <TableCell className=\"text-right\">₹{Number(line.igst).toFixed(2)}</TableCell>\n                          <TableCell className=\"text-right\">₹{Number(line.mrp).toFixed(2)}</TableCell>\n                          <TableCell className=\"text-right font-medium\">₹{Number(line.total_value).toFixed(2)}</TableCell>\n                          <TableCell>{getLineStatusBadge(line.status)}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13315},"client/src/pages/zepto-pos.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Link } from \"wouter\";\nimport { Search, Package, Calendar, MapPin, Truck, Eye } from \"lucide-react\";\n\ninterface ZeptoPoHeader {\n  id: number;\n  po_number: string;\n  status: string;\n  total_quantity: number;\n  total_cost_value: string;\n  total_tax_amount: string;\n  total_amount: string;\n  unique_brands: string[];\n  created_by: string;\n  uploaded_by: string;\n  created_at: string;\n  updated_at: string;\n  poLines: Array<{\n    id: number;\n    po_header_id: number;\n    line_number: number;\n    po_number: string;\n    sku: string;\n    brand: string;\n    sku_id: string;\n    sap_id: string;\n    hsn_code: string;\n    ean_no: string;\n    po_qty: number;\n    asn_qty: number;\n    grn_qty: number;\n    remaining_qty: number;\n    cost_price: string;\n    cgst: string;\n    sgst: string;\n    igst: string;\n    cess: string;\n    mrp: string;\n    total_value: string;\n    status: string;\n    created_by: string;\n    created_at: string;\n  }>;\n}\n\nexport default function ZeptoPOs() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: pos = [], isLoading } = useQuery<ZeptoPoHeader[]>({\n    queryKey: [\"/api/zepto-pos\"],\n  });\n\n  const filteredPOs = pos.filter((po) =>\n    po.po_number.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    po.unique_brands.some(brand => brand.toLowerCase().includes(searchQuery.toLowerCase())) ||\n    po.status.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const getStatusBadge = (status: string) => {\n    const statusColors = {\n      'Open': 'bg-green-100 text-green-800 border-green-200',\n      'Closed': 'bg-gray-100 text-gray-800 border-gray-200',\n      'Cancelled': 'bg-red-100 text-red-800 border-red-200',\n      'Pending': 'bg-yellow-100 text-yellow-800 border-yellow-200',\n    };\n\n    return (\n      <Badge \n        variant=\"outline\" \n        className={statusColors[status as keyof typeof statusColors] || 'bg-blue-100 text-blue-800 border-blue-200'}\n      >\n        {status}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <div className=\"flex-shrink-0 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\">Zepto POs</h1>\n              <p className=\"text-muted-foreground\">\n                View and manage imported Zepto purchase orders\n              </p>\n            </div>\n            <Link href=\"/zepto-upload\">\n              <Button>\n                <Package className=\"mr-2 h-4 w-4\" />\n                Import New PO\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"container mx-auto p-6 space-y-6\">\n          {/* Search and Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Search & Filter</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search by PO number, brand, or status...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* PO List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Purchase Orders ({filteredPOs.length})</CardTitle>\n              <CardDescription>\n                {isLoading ? \"Loading purchase orders...\" : \"Click on any PO to view details\"}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-3\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <div key={i} className=\"h-16 bg-muted animate-pulse rounded\" />\n                  ))}\n                </div>\n              ) : filteredPOs.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Package className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                  <h3 className=\"mt-4 text-lg font-semibold\">No purchase orders found</h3>\n                  <p className=\"text-muted-foreground\">\n                    {searchQuery ? \"No POs match your search criteria.\" : \"Import your first Zepto PO to get started.\"}\n                  </p>\n                  {!searchQuery && (\n                    <Link href=\"/zepto-upload\">\n                      <Button className=\"mt-4\">\n                        <Package className=\"mr-2 h-4 w-4\" />\n                        Import New PO\n                      </Button>\n                    </Link>\n                  )}\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>PO Number</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Brands</TableHead>\n                        <TableHead>Total Quantity</TableHead>\n                        <TableHead>Total Amount</TableHead>\n                        <TableHead>Line Items</TableHead>\n                        <TableHead>Created</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredPOs.map((po) => (\n                        <TableRow key={po.id} className=\"cursor-pointer hover:bg-muted/50\">\n                          <TableCell>\n                            <div className=\"font-medium\">{po.po_number}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              Created by: {po.created_by || 'System'}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {getStatusBadge(po.status)}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex flex-wrap gap-1 max-w-xs\">\n                              {po.unique_brands.slice(0, 3).map((brand, index) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                  {brand}\n                                </Badge>\n                              ))}\n                              {po.unique_brands.length > 3 && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  +{po.unique_brands.length - 3} more\n                                </Badge>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"font-medium\">{po.total_quantity.toLocaleString()}</div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"font-medium\">₹{Number(po.total_amount).toLocaleString()}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              Tax: ₹{Number(po.total_tax_amount).toLocaleString()}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"font-medium\">{po.poLines.length} items</div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center gap-1 text-sm\">\n                              <Calendar className=\"h-3 w-3\" />\n                              {new Date(po.created_at).toLocaleDateString()}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {new Date(po.created_at).toLocaleTimeString()}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Link href={`/zepto-pos/${po.id}`}>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                className=\"bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-200\" \n                                title={`View Zepto PO ${po.po_number}`}\n                                onClick={() => console.log(`Navigating to /zepto-pos/${po.id} for PO ${po.po_number}`)}\n                              >\n                                <Eye className=\"h-4 w-4 mr-1\" />\n                                View Zepto PO\n                              </Button>\n                            </Link>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9843},"client/src/pages/item-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport type { ItemMaster, InsertItemMaster } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertItemMasterSchema } from \"@shared/schema\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Plus, Search, Edit, Trash } from \"lucide-react\";\n\nexport default function ItemManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [editingItem, setEditingItem] = useState<ItemMaster | null>(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Query for items with search\n  const { data: items = [], isLoading, error } = useQuery({\n    queryKey: [\"/api/items\", searchTerm],\n    queryFn: () => api.items.getAll(searchTerm || undefined),\n  });\n\n  // Create form\n  const createForm = useForm<InsertItemMaster>({\n    resolver: zodResolver(insertItemMasterSchema),\n    defaultValues: {\n      itemCode: \"\",\n      itemName: \"\",\n      itmsGrpNam: \"\",\n      uType: \"\",\n      variety: \"\",\n      subGroup: \"\",\n      uBrand: \"\",\n      uom: \"\",\n      unitSize: \"\",\n      uIsLitre: \"\",\n      uTaxRate: \"\",\n    },\n  });\n\n  // Edit form\n  const editForm = useForm<InsertItemMaster>({\n    resolver: zodResolver(insertItemMasterSchema),\n  });\n\n  // Mutations\n  const createMutation = useMutation({\n    mutationFn: (data: InsertItemMaster) => api.items.create(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/items\"] });\n      toast({ title: \"Success\", description: \"Item created successfully\" });\n      setShowCreateDialog(false);\n      createForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to create item\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: Partial<InsertItemMaster> }) => \n      api.items.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/items\"] });\n      toast({ title: \"Success\", description: \"Item updated successfully\" });\n      setShowEditDialog(false);\n      setEditingItem(null);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to update item\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => api.items.delete(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/items\"] });\n      toast({ title: \"Success\", description: \"Item deleted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to delete item\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleEdit = (item: ItemMaster) => {\n    setEditingItem(item);\n    editForm.reset({\n      itemCode: item.itemCode,\n      itemName: item.itemName,\n      itmsGrpNam: item.itmsGrpNam || \"\",\n      uType: item.uType || \"\",\n      variety: item.variety || \"\",\n      subGroup: item.subGroup || \"\",\n      uBrand: item.uBrand || \"\",\n      uom: item.uom || \"\",\n      unitSize: item.unitSize?.toString() || \"\",\n      uIsLitre: item.uIsLitre || \"\",\n      uTaxRate: item.uTaxRate?.toString() || \"\",\n    });\n    setShowEditDialog(true);\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Are you sure you want to delete this item?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const onCreateSubmit = (data: InsertItemMaster) => {\n    createMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: InsertItemMaster) => {\n    if (!editingItem) return;\n    updateMutation.mutate({ id: editingItem.id, data });\n  };\n\n  return (\n    <div className=\"container mx-auto py-6 px-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Item Management</span>\n            <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Item\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Create New Item</DialogTitle>\n                  <DialogDescription>\n                    Add a new item to the master inventory.\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...createForm}>\n                  <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={createForm.control}\n                      name=\"itemCode\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Item Code</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"FG0000087\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={createForm.control}\n                      name=\"itemName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Item Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"COLD PRESS 5 LTR + 500 MLS EXTRA LIGHT OLIVE\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={createForm.control}\n                        name=\"itmsGrpNam\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Group</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"5 PCS\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={createForm.control}\n                        name=\"uType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Type</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"FINISHED\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={createForm.control}\n                        name=\"variety\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Variety</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"LEGACY\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={createForm.control}\n                        name=\"subGroup\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Sub Group</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"CANOLA COLD PRESS\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={createForm.control}\n                        name=\"uBrand\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Brand</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"JIVO\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={createForm.control}\n                        name=\"uom\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>UOM</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"PCS\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <FormField\n                        control={createForm.control}\n                        name=\"unitSize\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Unit Size</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"5.000000\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={createForm.control}\n                        name=\"uIsLitre\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Is Litre</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Y\" maxLength={1} {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={createForm.control}\n                        name=\"uTaxRate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Tax Rate</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"5\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <DialogFooter>\n                      <Button \n                        type=\"submit\" \n                        disabled={createMutation.isPending}\n                      >\n                        {createMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Create Item\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </CardTitle>\n          <CardDescription>\n            Manage your item master database with full CRUD operations\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          {/* Search */}\n          <div className=\"mb-6\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search items by code, name, or brand...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n\n          {/* Items Table */}\n          {error ? (\n            <div className=\"text-center text-red-600 py-4\">\n              Error loading items: {error.message}\n            </div>\n          ) : isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n            </div>\n          ) : (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Item Code</TableHead>\n                    <TableHead>Item Name</TableHead>\n                    <TableHead>Brand</TableHead>\n                    <TableHead>UOM</TableHead>\n                    <TableHead>Unit Size</TableHead>\n                    <TableHead>Tax Rate</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {items.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\">\n                        No items found. {searchTerm && \"Try a different search term or\"} Add your first item to get started.\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    items.map((item) => (\n                      <TableRow key={item.id}>\n                        <TableCell className=\"font-medium\">{item.itemCode}</TableCell>\n                        <TableCell className=\"max-w-xs truncate\">{item.itemName}</TableCell>\n                        <TableCell>{item.uBrand || \"-\"}</TableCell>\n                        <TableCell>{item.uom || \"-\"}</TableCell>\n                        <TableCell>{item.unitSize || \"-\"}</TableCell>\n                        <TableCell>{item.uTaxRate || \"-\"}</TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex justify-end gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(item)}\n                            >\n                              <Edit className=\"h-3 w-3\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(item.id)}\n                              disabled={deleteMutation.isPending}\n                            >\n                              <Trash className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Dialog */}\n      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Item</DialogTitle>\n            <DialogDescription>\n              Update item information.\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n              <FormField\n                control={editForm.control}\n                name=\"itemCode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Item Code</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={editForm.control}\n                name=\"itemName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Item Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"uBrand\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Brand</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={editForm.control}\n                  name=\"uom\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>UOM</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"unitSize\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Unit Size</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={editForm.control}\n                  name=\"uTaxRate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Tax Rate</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"submit\" \n                  disabled={updateMutation.isPending}\n                >\n                  {updateMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Update Item\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20077},"server/sql-client.ts":{"content":"import sql from \"mssql\";\n\nconst sqlConfig: sql.config = {\n  server: process.env.SQLSERVER_HOST ?? \"103.89.44.240\",\n  port: parseInt(process.env.SQLSERVER_PORT ?? \"5000\", 10),\n  user: process.env.SQLSERVER_USER ?? \"webm2\",\n  password: process.env.SQLSERVER_PASSWORD ?? \"foxpro@7\",\n  database: process.env.SQLSERVER_DATABASE ?? \"jsap\",\n  options: {\n    encrypt: (process.env.SQLSERVER_ENCRYPT ?? \"false\") === \"true\",\n    trustServerCertificate: (process.env.SQLSERVER_TRUST_SERVER_CERT ?? \"true\") === \"true\",\n  },\n  pool: { max: 5, min: 0, idleTimeoutMillis: 30000 },\n};\n\nlet poolPromise: Promise<sql.ConnectionPool> | null = null;\nasync function getPool() {\n  if (!poolPromise) poolPromise = new sql.ConnectionPool(sqlConfig).connect();\n  return poolPromise;\n}\n\nexport async function callSpGetItemDetails(): Promise<any[]> {\n  const pool = await getPool();\n  const result = await pool.request().execute(\"dbo.SP_GET_ITEM_DETAILS\");\n  return result.recordset ?? [];\n}","size_bytes":964},"client/src/pages/items-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, RefreshCw, Database, RotateCw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface SapItem {\n  id: number;\n  itemcode: string;\n  itemname: string;\n  itmsgrpnam: string;\n  u_type: string;\n  variety: string;\n  subgroup: string;\n  u_brand: string;\n  uom: string;\n  unitsize: string;\n  u_is_litre: string;\n  u_tax_rate: string;\n  created_at: string;\n  updated_at: string;\n  last_synced: string;\n}\n\nexport default function ItemsDashboard() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch items with search\n  const { data: items = [], isLoading, error } = useQuery({\n    queryKey: [\"/api/items\", searchTerm],\n    queryParams: searchTerm ? { search: searchTerm, limit: \"100\" } : undefined,\n  });\n\n  // Manual sync mutation\n  const syncMutation = useMutation({\n    mutationFn: () => apiRequest(\"/api/items/sync\", { method: \"POST\" }),\n    onSuccess: (data) => {\n      toast({\n        title: \"Sync Completed\",\n        description: `${data.synced} items synced from SQL Server`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/items\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Sync Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Auto sync mutation\n  const autoSyncMutation = useMutation({\n    mutationFn: () => apiRequest(\"/api/items/auto-sync\", { method: \"POST\" }),\n    onSuccess: (data) => {\n      if (data.syncTriggered) {\n        toast({\n          title: \"Auto-sync Completed\",\n          description: \"Items synchronized automatically\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/items\"] });\n      } else {\n        toast({\n          title: \"No Sync Needed\",\n          description: \"Items are up to date\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Auto-sync Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSearch = (value: string) => {\n    setSearchTerm(value);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  if (error) {\n    return (\n      <div className=\"p-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center text-red-600\">\n              <p>Error loading items: {error.message}</p>\n              <Button \n                onClick={() => queryClient.invalidateQueries({ queryKey: [\"/api/items\"] })}\n                className=\"mt-4\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Retry\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Item Master</h1>\n          <p className=\"text-muted-foreground\">\n            SAP item master data synced from SQL Server SP_GET_ITEM_DETAILS\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={() => autoSyncMutation.mutate()}\n            disabled={autoSyncMutation.isPending}\n            variant=\"outline\"\n          >\n            <Database className=\"w-4 h-4 mr-2\" />\n            {autoSyncMutation.isPending ? \"Checking...\" : \"Auto Sync\"}\n          </Button>\n          <Button\n            onClick={() => syncMutation.mutate()}\n            disabled={syncMutation.isPending}\n          >\n            <RotateCw className=\"w-4 h-4 mr-2\" />\n            {syncMutation.isPending ? \"Syncing...\" : \"Manual Sync\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Items</CardTitle>\n            <Database className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{items.length}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Brands</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {new Set(items.map((item: SapItem) => item.u_brand).filter(Boolean)).size}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Item Groups</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {new Set(items.map((item: SapItem) => item.itmsgrpnam).filter(Boolean)).size}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Last Sync</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-sm\">\n              {items.length > 0 && items[0]?.last_synced \n                ? formatDate(items[0].last_synced)\n                : \"Never\"\n              }\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Search Items</CardTitle>\n          <CardDescription>\n            Search by item code or item name\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-2\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search items...\"\n                value={searchTerm}\n                onChange={(e) => handleSearch(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            {searchTerm && (\n              <Button \n                variant=\"outline\" \n                onClick={() => handleSearch(\"\")}\n              >\n                Clear\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Items Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Item Details</CardTitle>\n          <CardDescription>\n            {searchTerm ? `Search results for \"${searchTerm}\"` : \"All items from SAP item master\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <RefreshCw className=\"h-6 w-6 animate-spin\" />\n            </div>\n          ) : items.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              {searchTerm ? \"No items found matching your search\" : \"No items available\"}\n            </div>\n          ) : (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Item Code</TableHead>\n                    <TableHead>Item Name</TableHead>\n                    <TableHead>Brand</TableHead>\n                    <TableHead>Group</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>UOM</TableHead>\n                    <TableHead>Unit Size</TableHead>\n                    <TableHead>Tax Rate</TableHead>\n                    <TableHead>Is Litre</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {items.map((item: SapItem) => (\n                    <TableRow key={item.id}>\n                      <TableCell className=\"font-medium\">{item.itemcode}</TableCell>\n                      <TableCell className=\"max-w-xs truncate\" title={item.itemname}>\n                        {item.itemname}\n                      </TableCell>\n                      <TableCell>\n                        {item.u_brand && (\n                          <Badge variant=\"secondary\">{item.u_brand}</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>{item.itmsgrpnam}</TableCell>\n                      <TableCell>{item.u_type}</TableCell>\n                      <TableCell>{item.uom}</TableCell>\n                      <TableCell>{item.unitsize}</TableCell>\n                      <TableCell>{item.u_tax_rate}%</TableCell>\n                      <TableCell>\n                        <Badge variant={item.u_is_litre === \"Y\" ? \"default\" : \"outline\"}>\n                          {item.u_is_litre === \"Y\" ? \"Yes\" : \"No\"}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9778},"server/itemSyncService.ts":{"content":"import { callSpGetItemDetails, type ItemDetail } from './sqlServerService';\nimport { db } from './db';\nimport { sapItemMst } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\nexport class ItemSyncService {\n  \n  // Sync items from SQL Server stored procedure to local database\n  async syncItemsFromSqlServer(): Promise<{ synced: number, errors: string[] }> {\n    const errors: string[] = [];\n    let syncedCount = 0;\n\n    try {\n      console.log('Starting sync from SQL Server SP_GET_ITEM_DETAILS...');\n      const sqlServerItems = await callSpGetItemDetails();\n      \n      console.log(`Retrieved ${sqlServerItems.length} items from SQL Server`);\n\n      for (const sqlItem of sqlServerItems) {\n        try {\n          await this.upsertSqlServerItem(sqlItem);\n          syncedCount++;\n        } catch (error) {\n          const errorMsg = `Failed to sync item ${sqlItem.ItemCode}: ${error instanceof Error ? error.message : 'Unknown error'}`;\n          console.error(errorMsg);\n          errors.push(errorMsg);\n        }\n      }\n\n      console.log(`Sync completed: ${syncedCount} items synced, ${errors.length} errors`);\n      return { synced: syncedCount, errors };\n\n    } catch (error) {\n      const errorMsg = `Failed to sync items from SQL Server: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      console.error(errorMsg);\n      errors.push(errorMsg);\n      return { synced: syncedCount, errors };\n    }\n  }\n\n  // Upsert a single item from SQL Server data\n  private async upsertSqlServerItem(sqlItem: ItemDetail): Promise<void> {\n    const itemData = {\n      itemcode: sqlItem.ItemCode,\n      itemname: sqlItem.ItemName,\n      itmsgrpnam: sqlItem.ItmsGrpNam,\n      u_type: sqlItem.U_TYPE,\n      variety: sqlItem.Variety,\n      subgroup: sqlItem.SubGroup,\n      u_brand: sqlItem.U_Brand,\n      uom: sqlItem.Uom,\n      unitsize: sqlItem.UnitSize.toString(),\n      u_is_litre: sqlItem.U_IsLitre,\n      u_tax_rate: sqlItem.U_Tax_Rate.toString(),\n      updated_at: new Date(),\n      last_synced: new Date()\n    };\n\n    // Check if item exists\n    const existingItem = await db\n      .select()\n      .from(sapItemMst)\n      .where(eq(sapItemMst.itemcode, sqlItem.ItemCode))\n      .limit(1);\n\n    if (existingItem.length > 0) {\n      // Update existing item\n      await db\n        .update(sapItemMst)\n        .set(itemData)\n        .where(eq(sapItemMst.itemcode, sqlItem.ItemCode));\n    } else {\n      // Insert new item\n      await db\n        .insert(sapItemMst)\n        .values({\n          ...itemData,\n          created_at: new Date()\n        });\n    }\n  }\n\n  // Get all items from local database\n  async getAllItems() {\n    return await db.select().from(sapItemMst).orderBy(sapItemMst.itemcode);\n  }\n\n  // Get item by code\n  async getItemByCode(itemCode: string) {\n    const result = await db\n      .select()\n      .from(sapItemMst)\n      .where(eq(sapItemMst.itemcode, itemCode))\n      .limit(1);\n    \n    return result[0] || null;\n  }\n\n  // Search items by name or code\n  async searchItems(searchTerm: string, limit: number = 50) {\n    return await db\n      .select()\n      .from(sapItemMst)\n      .where(\n        // Using SQL LIKE for better search capability\n        sql`${sapItemMst.itemcode} ILIKE ${'%' + searchTerm + '%'} OR ${sapItemMst.itemname} ILIKE ${'%' + searchTerm + '%'}`\n      )\n      .limit(limit)\n      .orderBy(sapItemMst.itemcode);\n  }\n\n  // Trigger automatic sync when new item is detected (like a trigger)\n  async triggerSyncIfNeeded(): Promise<boolean> {\n    try {\n      // Check if we need to sync based on some criteria\n      // For example, sync once per hour or when manually triggered\n      const lastSyncTime = await this.getLastSyncTime();\n      const hoursSinceLastSync = lastSyncTime ? \n        (Date.now() - lastSyncTime.getTime()) / (1000 * 60 * 60) : 999;\n\n      // Auto-sync if more than 1 hour since last sync\n      if (hoursSinceLastSync > 1) {\n        console.log('Auto-triggering item sync...');\n        const result = await this.syncItemsFromSqlServer();\n        return result.synced > 0;\n      }\n\n      return false;\n    } catch (error) {\n      console.error('Error in trigger sync:', error);\n      return false;\n    }\n  }\n\n  // Get the last sync timestamp\n  private async getLastSyncTime(): Promise<Date | null> {\n    const result = await db\n      .select({ last_synced: sapItemMst.last_synced })\n      .from(sapItemMst)\n      .orderBy(sql`${sapItemMst.last_synced} DESC NULLS LAST`)\n      .limit(1);\n\n    return result[0]?.last_synced || null;\n  }\n}\n\n// Import sql for search functionality\nimport { sql } from 'drizzle-orm';\n\n// Export singleton instance\nexport const itemSyncService = new ItemSyncService();","size_bytes":4679},"server/sqlServerService.ts":{"content":"import * as sql from \"mssql\";\n\nconst sqlConfig: sql.config = {\n  server: process.env.SQLSERVER_HOST ?? \"103.89.44.240\",\n  port: parseInt(process.env.SQLSERVER_PORT ?? \"5000\", 10),\n  user: process.env.SQLSERVER_USER ?? \"webm2\",\n  password: process.env.SQLSERVER_PASSWORD ?? \"foxpro@7\",\n  database: process.env.SQLSERVER_DATABASE ?? \"jsap\",\n  options: {\n    encrypt: (process.env.SQLSERVER_ENCRYPT ?? \"false\") === \"true\",\n    trustServerCertificate: (process.env.SQLSERVER_TRUST_SERVER_CERT ?? \"true\") === \"true\",\n  },\n  pool: { max: 5, min: 0, idleTimeoutMillis: 30000 },\n};\n\nlet poolPromise: Promise<sql.ConnectionPool> | null = null;\n\nasync function getPool() {\n  if (!poolPromise) {\n    poolPromise = new sql.ConnectionPool(sqlConfig).connect();\n  }\n  return poolPromise;\n}\n\nexport interface ItemDetail {\n  ItemCode: string;\n  ItemName: string;\n  ItmsGrpNam: string;\n  U_TYPE: string;\n  Variety: string;\n  SubGroup: string;\n  U_Brand: string;\n  Uom: string;\n  UnitSize: number;\n  U_IsLitre: string;\n  U_Tax_Rate: number;\n}\n\nexport async function callSpGetItemDetails(): Promise<ItemDetail[]> {\n  try {\n    const pool = await getPool();\n    const result = await pool.request().execute(\"dbo.SP_GET_ITEM_DETAILS\");\n    return result.recordset ?? [];\n  } catch (error) {\n    console.error(\"Error calling SP_GET_ITEM_DETAILS:\", error);\n    throw error;\n  }\n}\n\nexport async function closeConnection() {\n  if (poolPromise) {\n    const pool = await poolPromise;\n    await pool.close();\n    poolPromise = null;\n  }\n}","size_bytes":1509},"client/src/pages/city-mall-pos.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Package, Eye, Calendar, Hash, DollarSign, TrendingUp } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { CityMallPoHeader, CityMallPoLines } from \"@shared/schema\";\n\ninterface CityMallPoWithLines extends CityMallPoHeader {\n  poLines: CityMallPoLines[];\n}\n\nexport default function CityMallPOs() {\n  const { data: cityMallPos = [], isLoading, error } = useQuery<CityMallPoWithLines[]>({\n    queryKey: [\"/api/city-mall-pos\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n            <Package className=\"text-green-600\" size={20} />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">City Mall Purchase Orders</h1>\n            <p className=\"text-gray-600\">Loading purchase orders...</p>\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-gray-200 rounded\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-5/6\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n            <Package className=\"text-red-600\" size={20} />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">City Mall Purchase Orders</h1>\n            <p className=\"text-red-600\">Error loading purchase orders</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(Number(amount));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getStatusVariant = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'open':\n        return 'default';\n      case 'closed':\n        return 'secondary';\n      case 'cancelled':\n        return 'destructive';\n      default:\n        return 'outline';\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n            <Package className=\"text-green-600\" size={20} />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">City Mall Purchase Orders</h1>\n            <p className=\"text-gray-600\">Manage and track City Mall purchase orders</p>\n          </div>\n        </div>\n        \n        <Link href=\"/unified-po-upload\">\n          <Button>\n            <Package className=\"mr-2 h-4 w-4\" />\n            Upload New PO\n          </Button>\n        </Link>\n      </div>\n\n      {/* Summary Cards */}\n      {cityMallPos.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Hash className=\"h-4 w-4 text-blue-600\" />\n                <span className=\"text-sm text-gray-600\">Total POs</span>\n              </div>\n              <p className=\"text-2xl font-bold text-gray-900\">{cityMallPos.length}</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Package className=\"h-4 w-4 text-green-600\" />\n                <span className=\"text-sm text-gray-600\">Total Items</span>\n              </div>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {cityMallPos.reduce((sum, po) => sum + (po.total_quantity || 0), 0).toLocaleString()}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <DollarSign className=\"h-4 w-4 text-purple-600\" />\n                <span className=\"text-sm text-gray-600\">Total Value</span>\n              </div>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(cityMallPos.reduce((sum, po) => sum + Number(po.total_amount || 0), 0))}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"h-4 w-4 text-orange-600\" />\n                <span className=\"text-sm text-gray-600\">Avg. PO Value</span>\n              </div>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(cityMallPos.reduce((sum, po) => sum + Number(po.total_amount || 0), 0) / cityMallPos.length)}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* PO List */}\n      {cityMallPos.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Package size={48} className=\"mx-auto mb-4 text-gray-400\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Purchase Orders Found</h3>\n            <p className=\"text-gray-600 mb-4\">Upload a CSV file to get started with City Mall purchase orders.</p>\n            <Link href=\"/unified-po-upload\">\n              <Button>\n                <Package className=\"mr-2 h-4 w-4\" />\n                Upload First PO\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {cityMallPos.map((po) => (\n            <Card key={po.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg flex items-center space-x-2\">\n                      <span>{po.po_number}</span>\n                    </CardTitle>\n                    <CardDescription className=\"flex items-center space-x-1 mt-1\">\n                      <Calendar className=\"h-3 w-3\" />\n                      <span>{formatDate(po.created_at || '')}</span>\n                    </CardDescription>\n                  </div>\n                  <Badge variant={getStatusVariant(po.status || '')}>\n                    {po.status}\n                  </Badge>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">Items:</span>\n                    <p className=\"font-semibold\">{(po.total_quantity || 0).toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Value:</span>\n                    <p className=\"font-semibold\">{formatCurrency(po.total_amount || 0)}</p>\n                  </div>\n                </div>\n\n                <div className=\"text-sm\">\n                  <span className=\"text-gray-600\">HSN Codes:</span>\n                  <div className=\"flex flex-wrap gap-1 mt-1\">\n                    {po.unique_hsn_codes?.slice(0, 3).map((hsn, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                        {hsn}\n                      </Badge>\n                    ))}\n                    {(po.unique_hsn_codes?.length || 0) > 3 && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        +{(po.unique_hsn_codes?.length || 0) - 3}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"pt-2\">\n                  <Link href={`/city-mall-pos/${po.id}`}>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                      <Eye className=\"mr-2 h-4 w-4\" />\n                      View Details\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9376},"server/sqlserver.ts":{"content":"import sql from \"mssql\";\n\nconst sqlConfig: sql.config = {\n  server: process.env.SQLSERVER_HOST ?? \"103.89.44.240\",\n  port: parseInt(process.env.SQLSERVER_PORT ?? \"1433\", 10),\n  user: process.env.SQLSERVER_USER ?? \"webm2\",\n  password: process.env.SQLSERVER_PASSWORD ?? \"foxpro@7\",\n  database: process.env.SQLSERVER_DATABASE ?? \"jsap\",\n  options: {\n    encrypt: (process.env.SQLSERVER_ENCRYPT ?? \"false\") === \"true\",\n    trustServerCertificate: (process.env.SQLSERVER_TRUST_SERVER_CERT ?? \"true\") === \"true\",\n  },\n  pool: { max: 5, min: 0, idleTimeoutMillis: 30000 },\n};\n\nlet poolPromise: Promise<sql.ConnectionPool> | null = null;\n\nasync function getPool() {\n  if (!poolPromise) poolPromise = new sql.ConnectionPool(sqlConfig).connect();\n  return poolPromise;\n}\n\nexport async function callSpGetItemDetails(): Promise<any[]> {\n  try {\n    const pool = await getPool();\n    const result = await pool.request().execute(\"dbo.SP_GET_ITEM_DETAILS\");\n    return result.recordset ?? [];\n  } catch (error) {\n    console.error(\"Error calling SP_GET_ITEM_DETAILS:\", error);\n    throw error;\n  }\n}\n\n// Close the connection pool when the process exits\nprocess.on('SIGINT', async () => {\n  if (poolPromise) {\n    const pool = await poolPromise;\n    await pool.close();\n  }\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  if (poolPromise) {\n    const pool = await poolPromise;\n    await pool.close();\n  }\n  process.exit(0);\n});","size_bytes":1425},"client/src/pages/sap-sync.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Loader2, Database, RefreshCw, Download, CheckCircle } from \"lucide-react\";\n\ninterface SapItem {\n  id: number;\n  itemcode: string;\n  itemname: string;\n  type?: string;\n  itemgroup?: string;\n  brand?: string;\n  uom?: string;\n  last_synced?: string;\n  created_at: string;\n}\n\ninterface SyncResponse {\n  success: boolean;\n  message: string;\n  count: number;\n}\n\nexport default function SapSync() {\n  const { toast } = useToast();\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Fetch SAP items from API table\n  const { data: sapItems = [], isLoading } = useQuery<SapItem[]>({\n    queryKey: ['/api/sap-items-api'],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Sync mutation\n  const syncMutation = useMutation({\n    mutationFn: async (): Promise<SyncResponse> => {\n      const response = await apiRequest('POST', '/api/sap-items-api/sync');\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Sync completed successfully\",\n        description: data.message,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/sap-items-api'] });\n    },\n    onError: (error: Error) => {\n      let title = \"Sync failed\";\n      let description = \"Failed to sync SAP items\";\n      \n      if (error.message.includes('503:')) {\n        title = \"SQL Server Connection Failed\";\n        description = \"Unable to connect to SQL Server database. Please check VPN connection and server accessibility.\";\n      } else if (error.message.includes('500:')) {\n        description = error.message.split(': ')[1] || \"Internal server error occurred\";\n      }\n      \n      toast({\n        title,\n        description,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSync = () => {\n    syncMutation.mutate();\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  const latestSync = sapItems.length > 0 \n    ? new Date(Math.max(...sapItems.map(item => new Date(item.last_synced || item.created_at).getTime())))\n    : null;\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">SAP Item Master Sync</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Synchronize item master data from SQL Server database\n          </p>\n        </div>\n        <Button\n          onClick={handleSync}\n          disabled={syncMutation.isPending}\n          className=\"flex items-center gap-2\"\n        >\n          {syncMutation.isPending ? (\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n          ) : (\n            <RefreshCw className=\"h-4 w-4\" />\n          )}\n          {syncMutation.isPending ? \"Syncing...\" : \"Sync Now\"}\n        </Button>\n      </div>\n\n      {/* Status Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Items</CardTitle>\n            <Database className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {isLoading ? <Loader2 className=\"h-6 w-6 animate-spin\" /> : sapItems.length.toLocaleString()}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">In SAP API table</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Last Sync</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {latestSync ? formatDate(latestSync.toISOString()).split(',')[0] : 'Never'}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {latestSync ? formatDate(latestSync.toISOString()).split(',')[1] : 'No sync performed yet'}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Sync Status</CardTitle>\n            <Badge variant={syncMutation.isPending ? \"secondary\" : \"default\"}>\n              {syncMutation.isPending ? \"Running\" : \"Ready\"}\n            </Badge>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {syncMutation.isPending ? (\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n              ) : (\n                \"Idle\"\n              )}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {syncMutation.isPending ? \"Fetching from SQL Server...\" : \"Click sync to update\"}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Items List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>SAP Items</CardTitle>\n              <CardDescription>\n                Latest items synchronized from SAP B1 Hanna ERP\n              </CardDescription>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsExpanded(!isExpanded)}\n            >\n              {isExpanded ? \"Show Less\" : `View All (${sapItems.length})`}\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n              <span className=\"ml-2\">Loading SAP items...</span>\n            </div>\n          ) : sapItems.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Database className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n              <p className=\"text-lg font-medium\">No SAP items found</p>\n              <p className=\"text-sm\">Click \"Sync Now\" to fetch items from SQL Server database</p>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              {sapItems.slice(0, isExpanded ? sapItems.length : 10).map((item) => (\n                <div\n                  key={item.id}\n                  className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50\"\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">{item.itemcode}</span>\n                      {item.brand && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {item.brand}\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">{item.itemname}</p>\n                    <div className=\"flex items-center gap-4 mt-1 text-xs text-gray-500\">\n                      {item.type && <span>Type: {item.type}</span>}\n                      {item.itemgroup && <span>Group: {item.itemgroup}</span>}\n                      {item.uom && <span>UOM: {item.uom}</span>}\n                    </div>\n                  </div>\n                  <div className=\"text-right text-xs text-gray-500\">\n                    <p>Synced: {formatDate(item.last_synced || item.created_at)}</p>\n                  </div>\n                </div>\n              ))}\n              \n              {!isExpanded && sapItems.length > 10 && (\n                <div className=\"text-center py-4\">\n                  <Button variant=\"outline\" onClick={() => setIsExpanded(true)}>\n                    Show {sapItems.length - 10} more items\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8518},"export_database.sh":{"content":"#!/bin/bash\n\n# Create export directory\nmkdir -p database_exports\n\necho \"Exporting database...\"\n\n# Export full database as SQL dump\necho \"Creating SQL dump...\"\npg_dump $DATABASE_URL > database_exports/full_database.sql\n\n# Export individual tables as CSV\necho \"Exporting tables as CSV...\"\n\n# Platform Master\npsql $DATABASE_URL -c \"COPY (SELECT * FROM pf_mst) TO STDOUT WITH CSV HEADER;\" > database_exports/platforms.csv\n\n# SAP Item Master\npsql $DATABASE_URL -c \"COPY (SELECT * FROM sap_item_mst) TO STDOUT WITH CSV HEADER;\" > database_exports/sap_items.csv\n\n# Platform Item Master\npsql $DATABASE_URL -c \"COPY (SELECT * FROM pf_item_mst) TO STDOUT WITH CSV HEADER;\" > database_exports/platform_items.csv\n\n# Platform PO\npsql $DATABASE_URL -c \"COPY (SELECT * FROM pf_po) TO STDOUT WITH CSV HEADER;\" > database_exports/platform_pos.csv\n\n# Platform Order Items\npsql $DATABASE_URL -c \"COPY (SELECT * FROM pf_order_items) TO STDOUT WITH CSV HEADER;\" > database_exports/platform_order_items.csv\n\n# Flipkart Grocery POs\npsql $DATABASE_URL -c \"COPY (SELECT * FROM flipkart_grocery_po_header) TO STDOUT WITH CSV HEADER;\" > database_exports/flipkart_po_headers.csv\npsql $DATABASE_URL -c \"COPY (SELECT * FROM flipkart_grocery_po_lines) TO STDOUT WITH CSV HEADER;\" > database_exports/flipkart_po_lines.csv\n\n# Zepto POs\npsql $DATABASE_URL -c \"COPY (SELECT * FROM zepto_po_header) TO STDOUT WITH CSV HEADER;\" > database_exports/zepto_po_headers.csv\npsql $DATABASE_URL -c \"COPY (SELECT * FROM zepto_po_lines) TO STDOUT WITH CSV HEADER;\" > database_exports/zepto_po_lines.csv\n\n# City Mall POs\npsql $DATABASE_URL -c \"COPY (SELECT * FROM city_mall_po_header) TO STDOUT WITH CSV HEADER;\" > database_exports/city_mall_po_headers.csv\npsql $DATABASE_URL -c \"COPY (SELECT * FROM city_mall_po_lines) TO STDOUT WITH CSV HEADER;\" > database_exports/city_mall_po_lines.csv\n\n# Blinkit POs\npsql $DATABASE_URL -c \"COPY (SELECT * FROM blinkit_po_header) TO STDOUT WITH CSV HEADER;\" > database_exports/blinkit_po_headers.csv\npsql $DATABASE_URL -c \"COPY (SELECT * FROM blinkit_po_lines) TO STDOUT WITH CSV HEADER;\" > database_exports/blinkit_po_lines.csv\n\n# Swiggy POs\npsql $DATABASE_URL -c \"COPY (SELECT * FROM swiggy_pos) TO STDOUT WITH CSV HEADER;\" > database_exports/swiggy_po_headers.csv\npsql $DATABASE_URL -c \"COPY (SELECT * FROM swiggy_po_lines) TO STDOUT WITH CSV HEADER;\" > database_exports/swiggy_po_lines.csv\n\n# Users table\npsql $DATABASE_URL -c \"COPY (SELECT * FROM users) TO STDOUT WITH CSV HEADER;\" > database_exports/users.csv\n\necho \"Export completed! Files available in database_exports/ directory:\"\nls -la database_exports/\n\necho \"\"\necho \"Files created:\"\necho \"1. full_database.sql - Complete database dump (can be restored with psql)\"\necho \"2. Individual CSV files for each table\"\necho \"\"\necho \"To download these files:\"\necho \"1. You can download them from the Files panel in Replit\"\necho \"2. Or use the shell to zip them: tar -czf database_backup.tar.gz database_exports/\"","size_bytes":2954},"scripts/analyze-blinkit.js":{"content":"import XLSX from 'xlsx';\nimport fs from 'fs';\n\n// Read the Blinkit Excel file\nconst workbook = XLSX.readFile('attached_assets/3226110030173_20250806_061135_1754481114525.xlsx');\n\nconsole.log('Sheet names:', workbook.SheetNames);\n\n// Process each sheet\nworkbook.SheetNames.forEach(sheetName => {\n    console.log(`\\n=== Sheet: ${sheetName} ===`);\n    const worksheet = workbook.Sheets[sheetName];\n    \n    // Convert to JSON to see the data structure\n    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n    \n    console.log('Number of rows:', jsonData.length);\n    if (jsonData.length > 0) {\n        console.log('Headers (first row):', jsonData[0]);\n        if (jsonData.length > 1) {\n            console.log('Sample data (second row):', jsonData[1]);\n        }\n        if (jsonData.length > 2) {\n            console.log('Sample data (third row):', jsonData[2]);\n        }\n    }\n    \n    // Show first 10 rows for analysis\n    console.log('\\nFirst 10 rows:');\n    jsonData.slice(0, 10).forEach((row, index) => {\n        console.log(`Row ${index}:`, row);\n    });\n});","size_bytes":1085},"client/src/pages/SwiggyUpload.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, FileSpreadsheet, CheckCircle } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\nexport default function SwiggyUpload() {\n  const [file, setFile] = useState<File | null>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await fetch('/api/swiggy-pos/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to upload file');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: `Swiggy PO uploaded successfully! PO Number: ${data.po_number}`,\n      });\n      setFile(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/swiggy-pos\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    const files = e.dataTransfer.files;\n    if (files && files[0]) {\n      const selectedFile = files[0];\n      if (selectedFile.type === \"application/vnd.ms-excel\" || \n          selectedFile.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" ||\n          selectedFile.name.endsWith('.xls') || selectedFile.name.endsWith('.xlsx')) {\n        setFile(selectedFile);\n      } else {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please upload an Excel file (.xls or .xlsx)\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files[0]) {\n      const selectedFile = files[0];\n      if (selectedFile.type === \"application/vnd.ms-excel\" || \n          selectedFile.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" ||\n          selectedFile.name.endsWith('.xls') || selectedFile.name.endsWith('.xlsx')) {\n        setFile(selectedFile);\n      } else {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please upload an Excel file (.xls or .xlsx)\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleUpload = () => {\n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select an Excel file to upload\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    uploadMutation.mutate(file);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Swiggy PO Upload</h1>\n          <p className=\"text-gray-600\">Upload and process Swiggy purchase order Excel files</p>\n        </div>\n      </div>\n\n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileSpreadsheet className=\"h-5 w-5\" />\n              Upload Swiggy PO File\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div\n              className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                dragActive\n                  ? \"border-blue-500 bg-blue-50\"\n                  : \"border-gray-300 hover:border-gray-400\"\n              }`}\n              onDragEnter={handleDrag}\n              onDragLeave={handleDrag}\n              onDragOver={handleDrag}\n              onDrop={handleDrop}\n            >\n              <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <div className=\"space-y-2\">\n                <p className=\"text-lg font-medium\">\n                  {file ? \"File Selected\" : \"Drop your Excel file here\"}\n                </p>\n                <p className=\"text-sm text-gray-500\">\n                  or{\" \"}\n                  <Label htmlFor=\"file-upload\" className=\"text-blue-600 hover:underline cursor-pointer\">\n                    browse to choose a file\n                  </Label>\n                </p>\n                <p className=\"text-xs text-gray-400\">\n                  Supports .xls and .xlsx files\n                </p>\n              </div>\n              <Input\n                id=\"file-upload\"\n                type=\"file\"\n                accept=\".xls,.xlsx,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                onChange={handleFileChange}\n                className=\"hidden\"\n              />\n            </div>\n\n            {file && (\n              <div className=\"flex items-center gap-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-green-800\">{file.name}</p>\n                  <p className=\"text-sm text-green-600\">\n                    {(file.size / 1024 / 1024).toFixed(2)} MB\n                  </p>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setFile(null)}\n                >\n                  Remove\n                </Button>\n              </div>\n            )}\n\n            <div className=\"flex gap-3\">\n              <Button\n                onClick={handleUpload}\n                disabled={!file || uploadMutation.isPending}\n                className=\"flex-1\"\n              >\n                {uploadMutation.isPending ? \"Uploading...\" : \"Upload & Process\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>File Format Guidelines</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 text-sm\">\n              <div>\n                <h4 className=\"font-medium mb-2\">Supported Format:</h4>\n                <ul className=\"list-disc list-inside space-y-1 text-gray-600\">\n                  <li>Excel files (.xls, .xlsx)</li>\n                  <li>XML-based Excel format from Swiggy</li>\n                  <li>Files should contain PO header and line item details</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h4 className=\"font-medium mb-2\">Expected Data:</h4>\n                <ul className=\"list-disc list-inside space-y-1 text-gray-600\">\n                  <li>PO Number (should contain \"SOTY-\" pattern)</li>\n                  <li>PO Date</li>\n                  <li>Item codes and descriptions</li>\n                  <li>Quantities and pricing information</li>\n                </ul>\n              </div>\n\n              <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                <p className=\"text-blue-800 text-sm\">\n                  <strong>Note:</strong> The system will automatically extract PO details from the Excel structure.\n                  Make sure your file follows the standard Swiggy PO format.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8185},"client/src/pages/UnifiedPOUpload.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, FileSpreadsheet, CheckCircle, Eye, Database, AlertCircle } from \"lucide-react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n\ninterface UploadedFile {\n  id: string;\n  filename: string;\n  size: number;\n  uploadedAt: string;\n  status: 'uploaded' | 'reviewed' | 'imported';\n  vendor?: string;\n  previewData?: any;\n}\n\ninterface PreviewData {\n  header: any;\n  lines: any[];\n  detectedVendor: string;\n  totalItems: number;\n  totalQuantity: number;\n  totalAmount: string;\n}\n\nexport default function UnifiedPOUpload() {\n  const [file, setFile] = useState<File | null>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const [selectedVendor, setSelectedVendor] = useState<string>(\"\");\n  const [previewData, setPreviewData] = useState<PreviewData | null>(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const vendors = [\n    { value: \"flipkart\", label: \"Flipkart Grocery\" },\n    { value: \"zepto\", label: \"Zepto\" },\n    { value: \"citymall\", label: \"City Mall\" },\n    { value: \"blinkit\", label: \"Blinkit\" },\n    { value: \"swiggy\", label: \"Swiggy\" }\n  ];\n\n  const previewMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await fetch('/api/po/preview', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to preview file');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setPreviewData(data);\n      setShowPreview(true);\n      if (data.detectedVendor) {\n        setSelectedVendor(data.detectedVendor);\n      }\n      toast({\n        title: \"File previewed successfully\",\n        description: `Detected ${data.totalItems} items from ${data.detectedVendor || 'unknown vendor'}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Preview failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async ({ vendor, previewData }: { vendor: string; previewData: PreviewData }) => {\n      const response = await fetch(`/api/po/import/${vendor}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          header: previewData.header,\n          lines: previewData.lines\n        }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to import data');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Data imported successfully\",\n        description: `PO ${data.po_number} has been created`,\n      });\n      setFile(null);\n      setPreviewData(null);\n      setShowPreview(false);\n      setSelectedVendor(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/po\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Import failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    const files = e.dataTransfer.files;\n    if (files && files[0]) {\n      handleFileSelection(files[0]);\n    }\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files[0]) {\n      handleFileSelection(files[0]);\n    }\n  };\n\n  const handleFileSelection = (selectedFile: File) => {\n    const validTypes = [\n      \"text/csv\",\n      \"application/vnd.ms-excel\",\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    ];\n    \n    const isValidFile = validTypes.includes(selectedFile.type) || \n                       selectedFile.name.endsWith('.csv') || \n                       selectedFile.name.endsWith('.xls') || \n                       selectedFile.name.endsWith('.xlsx');\n\n    if (isValidFile) {\n      setFile(selectedFile);\n      setPreviewData(null);\n      setShowPreview(false);\n    } else {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload a CSV or Excel file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePreview = () => {\n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a file to preview\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    previewMutation.mutate(file);\n  };\n\n  const handleImport = () => {\n    if (!previewData || !selectedVendor) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please preview the file and select a vendor\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    importMutation.mutate({ vendor: selectedVendor, previewData });\n  };\n\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      <div className=\"container mx-auto p-6 space-y-6 max-w-6xl\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Purchase Order Upload</h1>\n            <p className=\"text-gray-600\">Upload, review, and import PO files from any vendor</p>\n          </div>\n        </div>\n\n        <div className=\"grid gap-6\">\n          {/* File Upload Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Upload className=\"h-5 w-5\" />\n              Upload PO File\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div\n              className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                dragActive\n                  ? \"border-blue-500 bg-blue-50\"\n                  : \"border-gray-300 hover:border-gray-400\"\n              }`}\n              onDragEnter={handleDrag}\n              onDragLeave={handleDrag}\n              onDragOver={handleDrag}\n              onDrop={handleDrop}\n            >\n              <FileSpreadsheet className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <div className=\"space-y-2\">\n                <p className=\"text-lg font-medium\">\n                  {file ? \"File Selected\" : \"Drop your CSV or Excel file here\"}\n                </p>\n                <p className=\"text-sm text-gray-500\">\n                  or{\" \"}\n                  <Label htmlFor=\"file-upload\" className=\"text-blue-600 hover:underline cursor-pointer\">\n                    browse to choose a file\n                  </Label>\n                </p>\n                <p className=\"text-xs text-gray-400\">\n                  Supports .csv, .xls, and .xlsx files\n                </p>\n              </div>\n              <Input\n                id=\"file-upload\"\n                type=\"file\"\n                accept=\".csv,.xls,.xlsx,text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                onChange={handleFileChange}\n                className=\"hidden\"\n              />\n            </div>\n\n            {file && (\n              <div className=\"flex items-center gap-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-green-800\">{file.name}</p>\n                  <p className=\"text-sm text-green-600\">\n                    {(file.size / 1024 / 1024).toFixed(2)} MB\n                  </p>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setFile(null);\n                    setPreviewData(null);\n                    setShowPreview(false);\n                  }}\n                >\n                  Remove\n                </Button>\n              </div>\n            )}\n\n            <div className=\"flex gap-3\">\n              <Button\n                onClick={handlePreview}\n                disabled={!file || previewMutation.isPending}\n                className=\"flex-1\"\n                variant=\"outline\"\n              >\n                <Eye className=\"h-4 w-4 mr-2\" />\n                {previewMutation.isPending ? \"Analyzing...\" : \"Preview & Analyze\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Preview Section */}\n        {showPreview && previewData && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Eye className=\"h-5 w-5\" />\n                File Preview & Review\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Header Information */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"p-3 bg-blue-50 rounded-lg\">\n                  <p className=\"text-sm font-medium text-blue-800\">Detected Vendor</p>\n                  <p className=\"text-lg font-bold text-blue-900\">\n                    {previewData.detectedVendor || \"Unknown\"}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-green-50 rounded-lg\">\n                  <p className=\"text-sm font-medium text-green-800\">Total Items</p>\n                  <p className=\"text-lg font-bold text-green-900\">{previewData.totalItems}</p>\n                </div>\n                <div className=\"p-3 bg-purple-50 rounded-lg\">\n                  <p className=\"text-sm font-medium text-purple-800\">Total Quantity</p>\n                  <p className=\"text-lg font-bold text-purple-900\">{previewData.totalQuantity}</p>\n                </div>\n                <div className=\"p-3 bg-yellow-50 rounded-lg\">\n                  <p className=\"text-sm font-medium text-yellow-800\">Total Amount</p>\n                  <p className=\"text-lg font-bold text-yellow-900\">₹{previewData.totalAmount}</p>\n                </div>\n              </div>\n\n              {/* Vendor Selection */}\n              <div className=\"space-y-2\">\n                <Label>Confirm Vendor</Label>\n                <Select value={selectedVendor} onValueChange={setSelectedVendor}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select vendor\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {vendors.map((vendor) => (\n                      <SelectItem key={vendor.value} value={vendor.value}>\n                        {vendor.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* PO Header Preview */}\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium\">PO Header Information</h4>\n                <div className=\"bg-gray-50 p-3 rounded-lg\">\n                  <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                    <div><strong>PO Number:</strong> {previewData.header.po_number || \"N/A\"}</div>\n                    <div><strong>PO Date:</strong> {previewData.header.po_date || \"N/A\"}</div>\n                    <div><strong>Status:</strong> <Badge variant=\"outline\">{previewData.header.status || \"Open\"}</Badge></div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Line Items Preview */}\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium\">Line Items Preview</h4>\n                <div className=\"border rounded-lg overflow-hidden\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Item Code</TableHead>\n                        <TableHead>Description</TableHead>\n                        <TableHead>Quantity</TableHead>\n                        <TableHead>Unit Price</TableHead>\n                        <TableHead>Total</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {previewData.lines.map((line, index) => (\n                        <TableRow key={index}>\n                          <TableCell className=\"font-medium\">{line.item_code || \"N/A\"}</TableCell>\n                          <TableCell>{line.item_name || line.product_description || \"N/A\"}</TableCell>\n                          <TableCell>{line.quantity || \"N/A\"}</TableCell>\n                          <TableCell>₹{line.unit_price || line.basic_cost_price || \"N/A\"}</TableCell>\n                          <TableCell>₹{line.total_amount || line.line_total || \"N/A\"}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n\n              </div>\n\n              {/* Import Action */}\n              <div className=\"flex gap-3 pt-4 border-t\">\n                <Button\n                  onClick={handleImport}\n                  disabled={!selectedVendor || importMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  <Database className=\"h-4 w-4 mr-2\" />\n                  {importMutation.isPending ? \"Importing...\" : \"Import to Database\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Instructions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>How It Works</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold\">1</div>\n                <div>\n                  <h4 className=\"font-medium mb-1\">Upload File</h4>\n                  <p className=\"text-gray-600\">Upload any CSV or Excel file containing PO data</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold\">2</div>\n                <div>\n                  <h4 className=\"font-medium mb-1\">Preview & Review</h4>\n                  <p className=\"text-gray-600\">System analyzes the file and shows a preview of the data</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold\">3</div>\n                <div>\n                  <h4 className=\"font-medium mb-1\">Confirm & Import</h4>\n                  <p className=\"text-gray-600\">Verify the vendor and import the data into the database</p>\n                </div>\n              </div>\n\n              <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg mt-4\">\n                <div className=\"flex items-start gap-2\">\n                  <AlertCircle className=\"h-4 w-4 text-blue-600 mt-0.5\" />\n                  <div>\n                    <p className=\"text-blue-800 text-sm\">\n                      <strong>Universal Format Support:</strong> The system automatically detects and parses different vendor file formats.\n                      Review the data before importing to ensure accuracy.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16668},"client/src/pages/ViewBlinkitPos.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Eye, FileText, Package, Calendar, DollarSign, Hash } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { BlinkitPoHeader, BlinkitPoLines } from \"@shared/schema\";\n\ntype BlinkitPoWithLines = BlinkitPoHeader & { poLines: BlinkitPoLines[] };\n\nexport default function ViewBlinkitPos() {\n  const [selectedPo, setSelectedPo] = useState<BlinkitPoWithLines | null>(null);\n\n  const { data: pos, isLoading } = useQuery<BlinkitPoWithLines[]>({\n    queryKey: [\"/api/blinkit-pos\"],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'open':\n        return 'bg-green-100 text-green-800';\n      case 'closed':\n        return 'bg-gray-100 text-gray-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-blue-100 text-blue-800';\n    }\n  };\n\n  const formatCurrency = (amount: string | number | null) => {\n    if (amount === null || amount === undefined) return '₹0.00';\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `₹${num.toLocaleString('en-IN', { minimumFractionDigits: 2 })}`;\n  };\n\n  const formatDate = (dateString: string | Date | null) => {\n    if (!dateString) return 'N/A';\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\n    return date.toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  if (selectedPo) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Blinkit Purchase Order Details</h1>\n            <p className=\"text-muted-foreground\">PO Number: {selectedPo.po_number}</p>\n          </div>\n          <Button variant=\"outline\" onClick={() => setSelectedPo(null)}>\n            ← Back to List\n          </Button>\n        </div>\n\n        {/* Header Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5\" />\n              Purchase Order Summary\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Status</p>\n                <Badge className={getStatusColor(selectedPo.status)}>{selectedPo.status}</Badge>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Items</p>\n                <div className=\"flex items-center gap-2\">\n                  <Package className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-semibold\">{selectedPo.total_items}</span>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Quantity</p>\n                <div className=\"flex items-center gap-2\">\n                  <Hash className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-semibold\">{selectedPo.total_quantity}</span>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Basic Cost</p>\n                <div className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-semibold\">{formatCurrency(selectedPo.total_basic_cost)}</span>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Tax Amount</p>\n                <div className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-semibold\">{formatCurrency(selectedPo.total_tax_amount)}</span>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Net Amount</p>\n                <div className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-semibold text-green-600\">{formatCurrency(selectedPo.net_amount)}</span>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Cart Discount</p>\n                <span className=\"font-semibold\">{formatCurrency(selectedPo.cart_discount)}</span>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Created Date</p>\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>{formatDate(selectedPo.created_at)}</span>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Created By</p>\n                <span>{selectedPo.created_by || 'N/A'}</span>\n              </div>\n            </div>\n            \n            {selectedPo.unique_hsn_codes && selectedPo.unique_hsn_codes.length > 0 && (\n              <div className=\"mt-4\">\n                <p className=\"text-sm font-medium text-muted-foreground mb-2\">HSN Codes</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedPo.unique_hsn_codes.map((hsn, index) => (\n                    <Badge key={index} variant=\"outline\">{hsn || 'N/A'}</Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Line Items */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Line Items ({selectedPo.poLines.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-16\">#</TableHead>\n                    <TableHead>Item Code</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>HSN Code</TableHead>\n                    <TableHead>UPC</TableHead>\n                    <TableHead>Grammage</TableHead>\n                    <TableHead className=\"text-right\">Qty</TableHead>\n                    <TableHead className=\"text-right\">Basic Cost</TableHead>\n                    <TableHead className=\"text-right\">CGST%</TableHead>\n                    <TableHead className=\"text-right\">SGST%</TableHead>\n                    <TableHead className=\"text-right\">IGST%</TableHead>\n                    <TableHead className=\"text-right\">Tax Amount</TableHead>\n                    <TableHead className=\"text-right\">Landing Rate</TableHead>\n                    <TableHead className=\"text-right\">MRP</TableHead>\n                    <TableHead className=\"text-right\">Total Amount</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {selectedPo.poLines.map((line) => (\n                    <TableRow key={line.id}>\n                      <TableCell className=\"font-medium\">{line.line_number}</TableCell>\n                      <TableCell className=\"font-mono text-sm\">{line.item_code}</TableCell>\n                      <TableCell className=\"max-w-xs truncate\" title={line.product_description || ''}>\n                        {line.product_description || 'N/A'}\n                      </TableCell>\n                      <TableCell>{line.hsn_code || 'N/A'}</TableCell>\n                      <TableCell className=\"font-mono text-sm\">{line.product_upc || 'N/A'}</TableCell>\n                      <TableCell>{line.grammage || 'N/A'}</TableCell>\n                      <TableCell className=\"text-right\">{line.quantity}</TableCell>\n                      <TableCell className=\"text-right\">{formatCurrency(line.basic_cost_price)}</TableCell>\n                      <TableCell className=\"text-right\">{line.cgst_percent || '0'}%</TableCell>\n                      <TableCell className=\"text-right\">{line.sgst_percent || '0'}%</TableCell>\n                      <TableCell className=\"text-right\">{line.igst_percent || '0'}%</TableCell>\n                      <TableCell className=\"text-right\">{formatCurrency(line.tax_amount)}</TableCell>\n                      <TableCell className=\"text-right\">{formatCurrency(line.landing_rate)}</TableCell>\n                      <TableCell className=\"text-right\">{formatCurrency(line.mrp)}</TableCell>\n                      <TableCell className=\"text-right font-semibold\">{formatCurrency(line.total_amount)}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Blinkit Purchase Orders</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          View and manage Blinkit purchase orders uploaded from Excel files\n        </p>\n      </div>\n\n      {!pos || pos.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <FileText className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <p className=\"text-lg font-medium mb-2\">No Blinkit POs Found</p>\n            <p className=\"text-muted-foreground text-center\">\n              Upload Excel files from Blinkit to see purchase orders here\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {pos.map((po) => (\n            <Card key={po.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <h3 className=\"text-lg font-semibold\">{po.po_number}</h3>\n                      <Badge className={getStatusColor(po.status)}>{po.status}</Badge>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-6 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <Package className=\"h-4 w-4\" />\n                        <span>{po.total_items} items</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Hash className=\"h-4 w-4\" />\n                        <span>{po.total_quantity} qty</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <DollarSign className=\"h-4 w-4\" />\n                        <span>{formatCurrency(po.net_amount)}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>{formatDate(po.created_at)}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setSelectedPo(po)}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                    View Details\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12714},"client/src/pages/city-mall-po-details.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Package, ArrowLeft, Calendar, Hash, DollarSign, TrendingUp, FileText } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { CityMallPoHeader, CityMallPoLines } from \"@shared/schema\";\n\ninterface CityMallPoWithLines extends CityMallPoHeader {\n  poLines: CityMallPoLines[];\n}\n\nexport default function CityMallPoDetails() {\n  const [, params] = useRoute(\"/city-mall-pos/:id\");\n  const poId = params?.id ? parseInt(params.id) : undefined;\n\n  const { data: po, isLoading, error } = useQuery<CityMallPoWithLines>({\n    queryKey: [\"/api/city-mall-pos\", poId],\n    enabled: !!poId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !po) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n            <Package className=\"text-red-600\" size={20} />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">City Mall PO Details</h1>\n            <p className=\"text-red-600\">Purchase order not found</p>\n          </div>\n        </div>\n        <Link href=\"/city-mall-pos\">\n          <Button variant=\"outline\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to POs\n          </Button>\n        </Link>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(Number(amount));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getStatusVariant = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'open':\n        return 'default';\n      case 'closed':\n        return 'secondary';\n      case 'cancelled':\n        return 'destructive';\n      default:\n        return 'outline';\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n            <Package className=\"text-green-600\" size={20} />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">City Mall PO: {po.po_number}</h1>\n            <p className=\"text-gray-600\">Purchase order details and line items</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Badge variant={getStatusVariant(po.status || '')}>\n            {po.status}\n          </Badge>\n          <Link href=\"/city-mall-pos\">\n            <Button variant=\"outline\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to POs\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Hash className=\"h-4 w-4 text-blue-600\" />\n              <span className=\"text-sm text-gray-600\">PO Number</span>\n            </div>\n            <p className=\"text-lg font-bold text-gray-900\">{po.po_number}</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"h-4 w-4 text-green-600\" />\n              <span className=\"text-sm text-gray-600\">Total Items</span>\n            </div>\n            <p className=\"text-lg font-bold text-gray-900\">{(po.total_quantity || 0).toLocaleString()}</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <DollarSign className=\"h-4 w-4 text-purple-600\" />\n              <span className=\"text-sm text-gray-600\">Total Value</span>\n            </div>\n            <p className=\"text-lg font-bold text-gray-900\">{formatCurrency(po.total_amount || 0)}</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-4 w-4 text-orange-600\" />\n              <span className=\"text-sm text-gray-600\">Created</span>\n            </div>\n            <p className=\"text-lg font-bold text-gray-900\">{formatDate(po.created_at || '')}</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* PO Information */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <FileText size={20} />\n              <span>Purchase Order Information</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-gray-600\">PO Number</label>\n                <p className=\"font-semibold\">{po.po_number}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-600\">Status</label>\n                <div className=\"mt-1\">\n                  <Badge variant={getStatusVariant(po.status || '')}>{po.status}</Badge>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-gray-600\">Created By</label>\n                <p className=\"font-semibold\">{po.created_by || 'System'}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-600\">Uploaded By</label>\n                <p className=\"font-semibold\">{po.uploaded_by || 'System'}</p>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-gray-600\">Created Date</label>\n                <p className=\"font-semibold\">{formatDate(po.created_at || '')}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-600\">Last Updated</label>\n                <p className=\"font-semibold\">{formatDate(po.updated_at || '')}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <TrendingUp size={20} />\n              <span>Summary</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-600\">Total Quantity</label>\n              <p className=\"text-xl font-bold\">{(po.total_quantity || 0).toLocaleString()}</p>\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium text-gray-600\">Base Amount</label>\n              <p className=\"text-lg font-semibold\">{formatCurrency(po.total_base_amount || 0)}</p>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-gray-600\">IGST Amount</label>\n              <p className=\"text-lg font-semibold\">{formatCurrency(po.total_igst_amount || 0)}</p>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-gray-600\">CESS Amount</label>\n              <p className=\"text-lg font-semibold\">{formatCurrency(po.total_cess_amount || 0)}</p>\n            </div>\n\n            <div className=\"pt-2 border-t\">\n              <label className=\"text-sm font-medium text-gray-600\">Total Amount</label>\n              <p className=\"text-xl font-bold text-green-600\">{formatCurrency(po.total_amount || 0)}</p>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-gray-600\">Unique HSN Codes</label>\n              <div className=\"flex flex-wrap gap-1 mt-1\">\n                {po.unique_hsn_codes?.map((hsn, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                    {hsn}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Line Items Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Package size={20} />\n            <span>Line Items ({po.poLines?.length || 0})</span>\n          </CardTitle>\n          <CardDescription>\n            Detailed breakdown of all items in this purchase order\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>#</TableHead>\n                  <TableHead>Article ID</TableHead>\n                  <TableHead>Article Name</TableHead>\n                  <TableHead>HSN Code</TableHead>\n                  <TableHead className=\"text-right\">Qty</TableHead>\n                  <TableHead className=\"text-right\">MRP</TableHead>\n                  <TableHead className=\"text-right\">Cost Price</TableHead>\n                  <TableHead className=\"text-right\">Base Amount</TableHead>\n                  <TableHead className=\"text-right\">IGST %</TableHead>\n                  <TableHead className=\"text-right\">IGST ₹</TableHead>\n                  <TableHead className=\"text-right\">Total Amount</TableHead>\n                  <TableHead>Status</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {po.poLines?.map((line) => (\n                  <TableRow key={line.id}>\n                    <TableCell className=\"font-medium\">{line.line_number}</TableCell>\n                    <TableCell className=\"font-mono text-sm\">{line.article_id}</TableCell>\n                    <TableCell className=\"max-w-xs truncate\" title={line.article_name || ''}>\n                      {line.article_name}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {line.hsn_code}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right font-semibold\">\n                      {(line.quantity || 0).toLocaleString()}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      {formatCurrency(line.mrp || 0)}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      {formatCurrency(line.base_cost_price || 0)}\n                    </TableCell>\n                    <TableCell className=\"text-right font-semibold\">\n                      {formatCurrency(line.base_amount || 0)}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      {Number(line.igst_percent || 0).toFixed(1)}%\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      {formatCurrency(line.igst_amount || 0)}\n                    </TableCell>\n                    <TableCell className=\"text-right font-bold text-green-600\">\n                      {formatCurrency(line.total_amount || 0)}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {line.status}\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13008},"client/src/pages/city-mall-po-upload.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Upload, CheckCircle, AlertCircle, Package } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport type { CityMallPoHeader, CityMallPoLines } from \"@shared/schema\";\n\ninterface ParsedCityMallPO {\n  header: CityMallPoHeader;\n  lines: CityMallPoLines[];\n}\n\nexport default function CityMallPoUpload() {\n  const [file, setFile] = useState<File | null>(null);\n  const [parsedData, setParsedData] = useState<ParsedCityMallPO | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const { toast } = useToast();\n\n  const parseFileMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('csvFile', file);\n      \n      const response = await fetch('/api/parse-city-mall-csv', {\n        method: 'POST',\n        body: formData\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to parse CSV');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setParsedData(data);\n      toast({\n        title: \"File parsed successfully\",\n        description: `Found ${data.lines.length} line items`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to parse file\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const savePoMutation = useMutation({\n    mutationFn: async (data: ParsedCityMallPO) => {\n      return await apiRequest('/api/city-mall-pos', {\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"City Mall PO saved successfully\",\n        description: \"Purchase order has been imported to the system\",\n      });\n      // Reset form\n      setFile(null);\n      setParsedData(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to save PO\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) {\n      setFile(selectedFile);\n      setParsedData(null);\n    }\n  };\n\n  const handleParseFile = () => {\n    if (!file) return;\n    parseFileMutation.mutate(file);\n  };\n\n  const handleSavePO = () => {\n    if (!parsedData) return;\n    savePoMutation.mutate(parsedData);\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n          <Package className=\"text-green-600\" size={20} />\n        </div>\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">City Mall PO Upload</h1>\n          <p className=\"text-gray-600\">Import City Mall purchase orders from CSV files</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Upload Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Upload size={20} />\n              <span>Upload CSV File</span>\n            </CardTitle>\n            <CardDescription>\n              Select a City Mall CSV file to import purchase order data\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"csvFile\">CSV File</Label>\n              <Input\n                id=\"csvFile\"\n                type=\"file\"\n                accept=\".csv\"\n                onChange={handleFileChange}\n                className=\"mt-1\"\n              />\n            </div>\n\n            {file && (\n              <Alert>\n                <CheckCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  File selected: <strong>{file.name}</strong> ({(file.size / 1024).toFixed(1)} KB)\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <Button \n              onClick={handleParseFile}\n              disabled={!file || parseFileMutation.isPending}\n              className=\"w-full\"\n            >\n              {parseFileMutation.isPending ? (\n                \"Parsing...\"\n              ) : (\n                <>\n                  <Upload className=\"mr-2 h-4 w-4\" />\n                  Parse CSV File\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Preview Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle>File Preview</CardTitle>\n            <CardDescription>\n              Review the parsed data before saving\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {!parsedData ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Package size={48} className=\"mx-auto mb-4 opacity-50\" />\n                <p>Upload a CSV file to see preview</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">PO Number</Label>\n                    <p className=\"font-semibold\">{parsedData.header.po_number}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Status</Label>\n                    <Badge variant=\"outline\">{parsedData.header.status}</Badge>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Total Items</Label>\n                    <p className=\"font-semibold\">{parsedData.header.total_quantity}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Total Amount</Label>\n                    <p className=\"font-semibold\">₹{Number(parsedData.header.total_amount).toLocaleString()}</p>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Line Items</Label>\n                  <p className=\"text-sm text-gray-500\">{parsedData.lines.length} items found</p>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">HSN Codes</Label>\n                  <div className=\"flex flex-wrap gap-1 mt-1\">\n                    {parsedData.header.unique_hsn_codes?.map((hsn, index) => (\n                      <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                        {hsn}\n                      </Badge>\n                    ))}\n\n                  </div>\n                </div>\n\n                <Button \n                  onClick={handleSavePO}\n                  disabled={savePoMutation.isPending}\n                  className=\"w-full\"\n                >\n                  {savePoMutation.isPending ? (\n                    \"Saving...\"\n                  ) : (\n                    <>\n                      <CheckCircle className=\"mr-2 h-4 w-4\" />\n                      Save Purchase Order\n                    </>\n                  )}\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Error Display */}\n      {parseFileMutation.error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            {parseFileMutation.error.message}\n          </AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n}","size_bytes":8225},"client/src/pages/flipkart-grocery-po-details.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  ArrowLeft,\n  Package,\n  User,\n  MapPin,\n  Calendar,\n  CreditCard,\n  FileText,\n  ShoppingCart\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function FlipkartGroceryPODetails() {\n  const { id } = useParams();\n\n  const { data: po, isLoading, error } = useQuery({\n    queryKey: [`/api/flipkart-grocery-pos/${id}`],\n  });\n\n  const { data: lines, isLoading: linesLoading } = useQuery({\n    queryKey: [`/api/flipkart-grocery-pos/${id}/lines`],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"space-y-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"h-32 bg-muted animate-pulse rounded\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !po) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <Package className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n              <h3 className=\"mt-2 text-sm font-semibold\">PO Not Found</h3>\n              <p className=\"mt-1 text-sm text-muted-foreground\">\n                The requested purchase order could not be found.\n              </p>\n              <div className=\"mt-6\">\n                <Link href=\"/flipkart-grocery-pos\">\n                  <Button>\n                    <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                    Back to POs\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      'Open': 'default',\n      'Closed': 'secondary',\n      'Cancelled': 'destructive',\n      'Pending': 'outline'\n    };\n    \n    return (\n      <Badge variant={variants[status] || 'outline'}>\n        {status}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <div className=\"flex-shrink-0 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/flipkart-grocery-pos\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                </Button>\n              </Link>\n              <div>\n                <h1 className=\"text-3xl font-bold\">PO #{po.po_number}</h1>\n                <p className=\"text-muted-foreground\">\n                  Flipkart Grocery Purchase Order Details\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              {getStatusBadge(po.status)}\n              <Badge variant=\"outline\">{po.category}</Badge>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"container mx-auto p-6 space-y-6\">\n          {/* PO Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <ShoppingCart className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm font-medium\">Total Items</p>\n                <p className=\"text-2xl font-bold\">{po.total_quantity}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <Package className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm font-medium\">Taxable Value</p>\n                <p className=\"text-2xl font-bold\">₹{parseFloat(po.total_taxable_value || '0').toLocaleString()}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm font-medium\">Tax Amount</p>\n                <p className=\"text-2xl font-bold\">₹{parseFloat(po.total_tax_amount || '0').toLocaleString()}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm font-medium\">Total Amount</p>\n                <p className=\"text-2xl font-bold\">₹{parseFloat(po.total_amount || '0').toLocaleString()}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* PO Details */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Supplier Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Supplier Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Name</p>\n              <p className=\"font-medium\">{po.supplier_name}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Contact</p>\n              <p>{po.supplier_contact || '-'}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Email</p>\n              <p>{po.supplier_email || '-'}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">GSTIN</p>\n              <p className=\"font-mono text-sm\">{po.supplier_gstin || '-'}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Address</p>\n              <p className=\"text-sm leading-relaxed\">{po.supplier_address || '-'}</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              Order Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Order Date</p>\n              <p className=\"font-medium\">{new Date(po.order_date).toLocaleDateString()}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">PO Expiry</p>\n              <p>{po.po_expiry_date ? new Date(po.po_expiry_date).toLocaleDateString() : '-'}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Mode of Payment</p>\n              <p>{po.mode_of_payment || '-'}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Credit Term</p>\n              <p>{po.credit_term || '-'}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Contract Ref ID</p>\n              <p className=\"font-mono text-sm\">{po.contract_ref_id || '-'}</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Billing Address */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MapPin className=\"h-5 w-5\" />\n              Billing Address\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Address</p>\n              <p className=\"text-sm leading-relaxed\">{po.billed_to_address || '-'}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">GSTIN</p>\n              <p className=\"font-mono text-sm\">{po.billed_to_gstin || '-'}</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Shipping Address */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MapPin className=\"h-5 w-5\" />\n              Shipping Address\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Address</p>\n              <p className=\"text-sm leading-relaxed\">{po.shipped_to_address || '-'}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">GSTIN</p>\n              <p className=\"font-mono text-sm\">{po.shipped_to_gstin || '-'}</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Line Items */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Line Items</CardTitle>\n          <CardDescription>\n            {linesLoading ? \"Loading line items...\" : `${lines?.length || 0} items in this purchase order`}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {linesLoading ? (\n            <div className=\"space-y-3\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} className=\"h-16 bg-muted animate-pulse rounded\" />\n              ))}\n            </div>\n          ) : lines && lines.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Item</TableHead>\n                    <TableHead>Brand</TableHead>\n                    <TableHead>HSN Code</TableHead>\n                    <TableHead>Quantity</TableHead>\n                    <TableHead>Unit Price</TableHead>\n                    <TableHead>Tax</TableHead>\n                    <TableHead>Total</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {lines.map((line: any) => (\n                    <TableRow key={line.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{line.title}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {line.fsn_isbn ? `FSN: ${line.fsn_isbn}` : ''}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{line.brand || '-'}</TableCell>\n                      <TableCell className=\"font-mono text-sm\">{line.hsn_code || '-'}</TableCell>\n                      <TableCell>\n                        <div>\n                          <div>{line.quantity} {line.uom}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Pending: {line.pending_quantity}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>₹{parseFloat(line.supplier_price || '0').toFixed(2)}</TableCell>\n                      <TableCell>₹{parseFloat(line.tax_amount || '0').toFixed(2)}</TableCell>\n                      <TableCell className=\"font-medium\">₹{parseFloat(line.total_amount || '0').toFixed(2)}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Package className=\"mx-auto h-8 w-8 text-muted-foreground\" />\n              <p className=\"mt-2 text-sm text-muted-foreground\">No line items found</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12722},"client/src/pages/flipkart-grocery-po-upload.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Upload,\n  FileText,\n  CheckCircle,\n  AlertCircle,\n  Eye,\n  Database,\n} from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface ParsedPOData {\n  header: any;\n  lines: any[];\n  totalItems?: number;\n  totalQuantity?: number;\n  totalAmount?: string;\n}\n\nexport default function FlipkartGroceryPOUpload() {\n  const [file, setFile] = useState<File | null>(null);\n  const [parsedData, setParsedData] = useState<ParsedPOData | null>(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [dragActive, setDragActive] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const previewMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      const response = await fetch(\"/api/po/preview\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to preview file\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setParsedData(data);\n      setShowPreview(true);\n      toast({\n        title: \"File previewed successfully\",\n        description: `Found ${data.totalItems} items`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Preview failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async (data: { header: any; lines: any[] }) => {\n      const response = await fetch(\"/api/po/import/flipkart\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to import PO\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"PO imported successfully\",\n        description: `PO ${data.po_number} has been created`,\n      });\n      setFile(null);\n      setParsedData(null);\n      setShowPreview(false);\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/flipkart-grocery-pos\"],\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Import failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    const files = e.dataTransfer.files;\n    if (files && files[0]) {\n      handleFileSelection(files[0]);\n    }\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files[0]) {\n      handleFileSelection(files[0]);\n    }\n  };\n\n  const handleFileSelection = (selectedFile: File) => {\n    const validTypes = [\n      \"text/csv\",\n      \"application/vnd.ms-excel\",\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    ];\n\n    const isValidFile =\n      validTypes.includes(selectedFile.type) ||\n      selectedFile.name.endsWith(\".csv\") ||\n      selectedFile.name.endsWith(\".xls\") ||\n      selectedFile.name.endsWith(\".xlsx\");\n\n    if (isValidFile) {\n      setFile(selectedFile);\n      setParsedData(null);\n      setShowPreview(false);\n    } else {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload a CSV or Excel file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePreview = () => {\n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a file to preview\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    previewMutation.mutate(file);\n  };\n\n  const handleImport = () => {\n    if (!parsedData) {\n      toast({\n        title: \"No data to import\",\n        description: \"Please preview the file first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    importMutation.mutate({\n      header: parsedData.header,\n      lines: parsedData.lines,\n    });\n  };\n\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      <div className=\"container mx-auto p-6 space-y-6 max-w-6xl\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Flipkart Grocery PO Upload</h1>\n            <p className=\"text-gray-600\">\n              Upload, review, and import Flipkart grocery purchase orders\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid gap-6\">\n          {/* File Upload Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Upload className=\"h-5 w-5\" />\n                Upload Flipkart Grocery PO File\n              </CardTitle>\n              <CardDescription>\n                Upload CSV or Excel files containing Flipkart grocery purchase\n                order data\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div\n                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                  dragActive\n                    ? \"border-blue-500 bg-blue-50\"\n                    : \"border-gray-300 hover:border-gray-400\"\n                }`}\n                onDragEnter={handleDrag}\n                onDragLeave={handleDrag}\n                onDragOver={handleDrag}\n                onDrop={handleDrop}\n              >\n                <FileText className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <div className=\"space-y-2\">\n                  <p className=\"text-lg font-medium\">\n                    {file\n                      ? \"File Selected\"\n                      : \"Drop your Flipkart CSV/Excel file here\"}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    or{\" \"}\n                    <Label\n                      htmlFor=\"file-upload\"\n                      className=\"text-blue-600 hover:underline cursor-pointer\"\n                    >\n                      browse to choose a file\n                    </Label>\n                  </p>\n                  <p className=\"text-xs text-gray-400\">\n                    Supports .csv, .xls, and .xlsx files\n                  </p>\n                </div>\n                <Input\n                  id=\"file-upload\"\n                  type=\"file\"\n                  accept=\".csv,.xls,.xlsx,text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                  onChange={handleFileChange}\n                  className=\"hidden\"\n                />\n              </div>\n\n              {file && (\n                <div className=\"flex items-center gap-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-green-800\">{file.name}</p>\n                    <p className=\"text-sm text-green-600\">\n                      {(file.size / 1024 / 1024).toFixed(2)} MB\n                    </p>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setFile(null);\n                      setParsedData(null);\n                      setShowPreview(false);\n                    }}\n                  >\n                    Remove\n                  </Button>\n                </div>\n              )}\n\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={handlePreview}\n                  disabled={!file || previewMutation.isPending}\n                  className=\"flex-1\"\n                  variant=\"outline\"\n                >\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  {previewMutation.isPending\n                    ? \"Analyzing...\"\n                    : \"Preview & Review\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Preview Section */}\n          {showPreview && parsedData && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Eye className=\"h-5 w-5\" />\n                  File Preview & Review\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Summary Information */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-blue-800\">\n                      PO Number\n                    </p>\n                    <p className=\"text-lg font-bold text-blue-900\">\n                      {parsedData.header?.po_number || \"N/A\"}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-green-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-green-800\">\n                      Total Items\n                    </p>\n                    <p className=\"text-lg font-bold text-green-900\">\n                      {parsedData.totalItems || 0}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-purple-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-purple-800\">\n                      Total Quantity\n                    </p>\n                    <p className=\"text-lg font-bold text-purple-900\">\n                      {parsedData.totalQuantity || 0}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-yellow-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-yellow-800\">\n                      Total Amount\n                    </p>\n                    <p className=\"text-lg font-bold text-yellow-900\">\n                      ₹{parsedData.totalAmount || \"0\"}\n                    </p>\n                  </div>\n                </div>\n\n                {/* PO Header Preview */}\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">PO Header Information</h4>\n                  <div className=\"bg-gray-50 p-3 rounded-lg\">\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <div>\n                        <strong>PO Number:</strong>{\" \"}\n                        {parsedData.header?.po_number || \"N/A\"}\n                      </div>\n                      <div>\n                        <strong>PO Date:</strong>{\" \"}\n                        {parsedData.header?.po_date || \"N/A\"}\n                      </div>\n                      <div>\n                        <strong>Status:</strong>{\" \"}\n                        <Badge variant=\"outline\">\n                          {parsedData.header?.status || \"Open\"}\n                        </Badge>\n                      </div>\n                      <div>\n                        <strong>Vendor:</strong> Flipkart Grocery\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Line Items Preview */}\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">\n                    Line Items Preview\n                  </h4>\n                  <div className=\"border rounded-lg overflow-hidden\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Item Code</TableHead>\n                          <TableHead>Description</TableHead>\n                          <TableHead>Quantity</TableHead>\n                          <TableHead>Unit Price</TableHead>\n                          <TableHead>Total</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {parsedData.lines.map((line, index) => (\n                          <TableRow key={index}>\n                            <TableCell className=\"font-medium\">\n                              {line.item_code || \"N/A\"}\n                            </TableCell>\n                            <TableCell>\n                              {line.item_name ||\n                                line.product_description ||\n                                \"N/A\"}\n                            </TableCell>\n                            <TableCell>{line.quantity || \"N/A\"}</TableCell>\n                            <TableCell>\n                              ₹\n                              {line.unit_price ||\n                                line.basic_cost_price ||\n                                \"N/A\"}\n                            </TableCell>\n                            <TableCell>\n                              ₹{line.total_amount || line.line_total || \"N/A\"}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n\n                </div>\n\n                {/* Import Action */}\n                <div className=\"flex gap-3 pt-4 border-t\">\n                  <Button\n                    onClick={handleImport}\n                    disabled={importMutation.isPending}\n                    className=\"flex-1\"\n                  >\n                    <Database className=\"h-4 w-4 mr-2\" />\n                    {importMutation.isPending\n                      ? \"Importing...\"\n                      : \"Import to Database\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Instructions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Instructions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 text-sm\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold\">\n                    1\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium mb-1\">Upload File</h4>\n                    <p className=\"text-gray-600\">\n                      Upload your Flipkart grocery CSV or Excel file\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold\">\n                    2\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium mb-1\">Preview & Review</h4>\n                    <p className=\"text-gray-600\">\n                      Review the parsed data to ensure accuracy\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold\">\n                    3\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium mb-1\">Import to Database</h4>\n                    <p className=\"text-gray-600\">\n                      Import the validated data into the system\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg mt-4\">\n                  <div className=\"flex items-start gap-2\">\n                    <AlertCircle className=\"h-4 w-4 text-blue-600 mt-0.5\" />\n                    <div>\n                      <p className=\"text-blue-800 text-sm\">\n                        <strong>Note:</strong> Please ensure your CSV file\n                        follows the standard Flipkart grocery format. Review all\n                        data before importing to maintain data integrity.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17237},"client/src/pages/flipkart-grocery-pos.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  Eye, \n  Search, \n  Package, \n  Calendar,\n  User,\n  DollarSign\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function FlipkartGroceryPOs() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: pos, isLoading } = useQuery({\n    queryKey: ['/api/flipkart-grocery-pos'],\n  });\n\n  const filteredPOs = pos?.filter((po: any) => \n    po.po_number?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    po.supplier_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    po.category?.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      'Open': 'default',\n      'Closed': 'secondary',\n      'Cancelled': 'destructive',\n      'Pending': 'outline'\n    };\n    \n    return (\n      <Badge variant={variants[status] || 'outline'}>\n        {status}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <div className=\"flex-shrink-0 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\">Flipkart Grocery POs</h1>\n              <p className=\"text-muted-foreground\">\n                View and manage imported Flipkart grocery purchase orders\n              </p>\n            </div>\n            <Link href=\"/flipkart-grocery-upload\">\n              <Button>\n                <Package className=\"mr-2 h-4 w-4\" />\n                Import New PO\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"container mx-auto p-6 space-y-6\">\n          {/* Search and Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Search & Filter</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n              <Input\n                placeholder=\"Search by PO number, supplier, or category...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* PO List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Purchase Orders ({filteredPOs.length})</CardTitle>\n          <CardDescription>\n            {isLoading ? \"Loading purchase orders...\" : \"Click on any PO to view details\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-3\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} className=\"h-16 bg-muted animate-pulse rounded\" />\n              ))}\n            </div>\n          ) : filteredPOs.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Package className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n              <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">No purchase orders</h3>\n              <p className=\"mt-1 text-sm text-muted-foreground\">\n                {searchQuery ? \"No POs match your search criteria.\" : \"Get started by importing a Flipkart grocery PO.\"}\n              </p>\n              {!searchQuery && (\n                <div className=\"mt-6\">\n                  <Link href=\"/flipkart-grocery-upload\">\n                    <Button>\n                      <Package className=\"mr-2 h-4 w-4\" />\n                      Import First PO\n                    </Button>\n                  </Link>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>PO Number</TableHead>\n                    <TableHead>Supplier</TableHead>\n                    <TableHead>Category</TableHead>\n                    <TableHead>Order Date</TableHead>\n                    <TableHead>Total Amount</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Created By</TableHead>\n                    <TableHead className=\"w-24\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredPOs.map((po: any) => (\n                    <TableRow key={po.id} className=\"hover:bg-muted/50\">\n                      <TableCell className=\"font-medium\">\n                        <div className=\"flex items-center gap-2\">\n                          <Package className=\"h-4 w-4 text-muted-foreground\" />\n                          {po.po_number}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <User className=\"h-4 w-4 text-muted-foreground\" />\n                          <div>\n                            <div className=\"font-medium\">{po.supplier_name}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {po.supplier_email}\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{po.category}</Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                          {new Date(po.order_date).toLocaleDateString()}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"font-medium\">₹{parseFloat(po.total_amount || '0').toLocaleString()}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(po.status)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          <div>{po.created_by}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {new Date(po.created_at).toLocaleDateString()}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Link href={`/flipkart-grocery-po/${po.id}`}>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7961},"client/src/pages/zepto-po-edit.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { ArrowLeft, Save, Trash2, Plus, Minus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ZeptoPoHeader {\n  id: number;\n  po_number: string;\n  status: string;\n  total_quantity: number;\n  total_cost_value: number;\n  total_tax_amount: number;\n  total_amount: number;\n  unique_brands: string[];\n  created_by: string;\n  uploaded_by: string;\n  created_at: Date;\n  updated_at: Date;\n}\n\ninterface ZeptoPoLine {\n  id: number;\n  po_header_id: number;\n  line_number: number;\n  po_number: string;\n  sku: string;\n  brand: string;\n  sku_id: string;\n  sap_id: string;\n  hsn_code: string;\n  ean_no: string;\n  po_qty: number;\n  asn_qty: number;\n  grn_qty: number;\n  remaining_qty: number;\n  cost_price: string;\n  cgst: string;\n  sgst: string;\n  igst: string;\n  cess: string;\n  mrp: string;\n  total_value: string;\n  status: string;\n  created_by: string;\n  created_at: Date;\n}\n\ninterface ZeptoPoWithLines extends ZeptoPoHeader {\n  poLines: ZeptoPoLine[];\n}\n\nconst zeptoHeaderSchema = z.object({\n  po_number: z.string().min(1, \"PO number is required\"),\n  status: z.string().min(1, \"Status is required\"),\n  total_quantity: z.coerce.number().min(0, \"Total quantity must be non-negative\"),\n  total_cost_value: z.coerce.number().min(0, \"Total cost value must be non-negative\"),\n  total_tax_amount: z.coerce.number().min(0, \"Total tax amount must be non-negative\"),\n  total_amount: z.coerce.number().min(0, \"Total amount must be non-negative\"),\n  unique_brands: z.array(z.string()).default([]),\n});\n\nconst zeptoLineSchema = z.object({\n  line_number: z.coerce.number().min(1, \"Line number is required\"),\n  sku: z.string().min(1, \"SKU is required\"),\n  brand: z.string().min(1, \"Brand is required\"),\n  sku_id: z.string().optional(),\n  sap_id: z.string().optional(),\n  hsn_code: z.string().optional(),\n  ean_no: z.string().optional(),\n  po_qty: z.coerce.number().min(0, \"PO quantity must be non-negative\"),\n  asn_qty: z.coerce.number().min(0, \"ASN quantity must be non-negative\"),\n  grn_qty: z.coerce.number().min(0, \"GRN quantity must be non-negative\"),\n  remaining_qty: z.coerce.number().min(0, \"Remaining quantity must be non-negative\"),\n  cost_price: z.string().min(1, \"Cost price is required\"),\n  cgst: z.string().optional(),\n  sgst: z.string().optional(),\n  igst: z.string().optional(),\n  cess: z.string().optional(),\n  mrp: z.string().min(1, \"MRP is required\"),\n  total_value: z.string().min(1, \"Total value is required\"),\n  status: z.string().min(1, \"Status is required\"),\n});\n\ntype ZeptoHeaderFormData = z.infer<typeof zeptoHeaderSchema>;\ntype ZeptoLineFormData = z.infer<typeof zeptoLineSchema>;\n\ninterface ZeptoPoEditProps {\n  poId: string;\n}\n\nfunction ZeptoPoEdit({ poId }: ZeptoPoEditProps) {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [lines, setLines] = useState<ZeptoLineFormData[]>([]);\n\n  const { data: zeptoPo, isLoading } = useQuery<ZeptoPoWithLines>({\n    queryKey: [`/api/zepto-pos/${poId}`],\n    enabled: !!poId,\n  });\n\n  const form = useForm<ZeptoHeaderFormData>({\n    resolver: zodResolver(zeptoHeaderSchema),\n    defaultValues: {\n      po_number: \"\",\n      status: \"Open\",\n      total_quantity: 0,\n      total_cost_value: 0,\n      total_tax_amount: 0,\n      total_amount: 0,\n      unique_brands: [],\n    },\n  });\n\n  // Populate form when data is loaded\n  useEffect(() => {\n    if (zeptoPo) {\n      form.reset({\n        po_number: zeptoPo.po_number,\n        status: zeptoPo.status,\n        total_quantity: zeptoPo.total_quantity,\n        total_cost_value: zeptoPo.total_cost_value,\n        total_tax_amount: zeptoPo.total_tax_amount,\n        total_amount: zeptoPo.total_amount,\n        unique_brands: zeptoPo.unique_brands || [],\n      });\n\n      setLines(zeptoPo.poLines.map(line => ({\n        line_number: line.line_number,\n        sku: line.sku,\n        brand: line.brand,\n        sku_id: line.sku_id || \"\",\n        sap_id: line.sap_id || \"\",\n        hsn_code: line.hsn_code || \"\",\n        ean_no: line.ean_no || \"\",\n        po_qty: line.po_qty,\n        asn_qty: line.asn_qty,\n        grn_qty: line.grn_qty,\n        remaining_qty: line.remaining_qty,\n        cost_price: line.cost_price,\n        cgst: line.cgst || \"\",\n        sgst: line.sgst || \"\",\n        igst: line.igst || \"\",\n        cess: line.cess || \"\",\n        mrp: line.mrp,\n        total_value: line.total_value,\n        status: line.status,\n      })));\n    }\n  }, [zeptoPo, form]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: { header: ZeptoHeaderFormData; lines: ZeptoLineFormData[] }) => {\n      return apiRequest(\"PUT\", `/api/zepto-pos/${poId}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/zepto-pos\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pos\"] });\n      toast({\n        title: \"Success\",\n        description: \"Zepto PO updated successfully\",\n      });\n      setLocation(\"/platform-po\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update PO\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", `/api/zepto-pos/${poId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/zepto-pos\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pos\"] });\n      toast({\n        title: \"Success\",\n        description: \"Zepto PO deleted successfully\",\n      });\n      setLocation(\"/platform-po\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete PO\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (headerData: ZeptoHeaderFormData) => {\n    // Calculate totals from lines\n    const totalQuantity = lines.reduce((sum, line) => sum + line.po_qty, 0);\n    const totalCostValue = lines.reduce((sum, line) => sum + parseFloat(line.cost_price || \"0\") * line.po_qty, 0);\n    const totalTaxAmount = lines.reduce((sum, line) => {\n      const cgst = parseFloat(line.cgst || \"0\");\n      const sgst = parseFloat(line.sgst || \"0\");\n      const igst = parseFloat(line.igst || \"0\");\n      const cess = parseFloat(line.cess || \"0\");\n      return sum + (cgst + sgst + igst + cess) * line.po_qty;\n    }, 0);\n    const totalAmount = lines.reduce((sum, line) => sum + parseFloat(line.total_value || \"0\"), 0);\n\n    const updatedHeaderData = {\n      ...headerData,\n      total_quantity: totalQuantity,\n      total_cost_value: totalCostValue,\n      total_tax_amount: totalTaxAmount,\n      total_amount: totalAmount,\n      unique_brands: Array.from(new Set(lines.map(line => line.brand))),\n    };\n\n    updateMutation.mutate({\n      header: updatedHeaderData,\n      lines: lines,\n    });\n  };\n\n  const handleDelete = () => {\n    if (confirm(`Are you sure you want to delete PO ${zeptoPo?.po_number}? This action cannot be undone.`)) {\n      deleteMutation.mutate();\n    }\n  };\n\n  const addLine = () => {\n    const newLine: ZeptoLineFormData = {\n      line_number: lines.length + 1,\n      sku: \"\",\n      brand: \"\",\n      sku_id: \"\",\n      sap_id: \"\",\n      hsn_code: \"\",\n      ean_no: \"\",\n      po_qty: 0,\n      asn_qty: 0,\n      grn_qty: 0,\n      remaining_qty: 0,\n      cost_price: \"0.00\",\n      cgst: \"0.00\",\n      sgst: \"0.00\",\n      igst: \"0.00\",\n      cess: \"0.00\",\n      mrp: \"0.00\",\n      total_value: \"0.00\",\n      status: \"Pending\",\n    };\n    setLines([...lines, newLine]);\n  };\n\n  const removeLine = (index: number) => {\n    const updatedLines = lines.filter((_, i) => i !== index);\n    // Renumber the lines\n    const renumberedLines = updatedLines.map((line, i) => ({\n      ...line,\n      line_number: i + 1,\n    }));\n    setLines(renumberedLines);\n  };\n\n  const updateLine = (index: number, field: keyof ZeptoLineFormData, value: string | number) => {\n    const updatedLines = [...lines];\n    updatedLines[index] = { ...updatedLines[index], [field]: value };\n    setLines(updatedLines);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!zeptoPo) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-96\">\n        <h2 className=\"text-2xl font-bold mb-4\">PO Not Found</h2>\n        <p className=\"text-muted-foreground mb-4\">The requested Zepto PO could not be found.</p>\n        <Button onClick={() => setLocation(\"/platform-po\")}>Back to PO List</Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 overflow-y-auto h-full p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/platform-po\")}\n            className=\"flex items-center space-x-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            <span>Back to PO List</span>\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold\">Edit Zepto PO</h1>\n            <p className=\"text-muted-foreground\">Modify PO {zeptoPo.po_number}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge variant={zeptoPo.status === \"Open\" ? \"default\" : \"secondary\"}>\n            {zeptoPo.status}\n          </Badge>\n          <Button\n            variant=\"destructive\"\n            onClick={handleDelete}\n            disabled={deleteMutation.isPending}\n            className=\"flex items-center space-x-2\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n            <span>Delete PO</span>\n          </Button>\n        </div>\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>PO Header Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"po_number\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>PO Number</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"text-sm\">\n                <Label>Created Date</Label>\n                <p className=\"mt-1 text-muted-foreground\">\n                  {format(new Date(zeptoPo.created_at), \"PPP\")}\n                </p>\n              </div>\n              <div className=\"text-sm\">\n                <Label>Updated Date</Label>\n                <p className=\"mt-1 text-muted-foreground\">\n                  {format(new Date(zeptoPo.updated_at), \"PPP\")}\n                </p>\n              </div>\n              <div className=\"text-sm\">\n                <Label>Created By</Label>\n                <p className=\"mt-1 text-muted-foreground\">{zeptoPo.created_by}</p>\n              </div>\n              <div className=\"text-sm\">\n                <Label>Uploaded By</Label>\n                <p className=\"mt-1 text-muted-foreground\">{zeptoPo.uploaded_by}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Line Items ({lines.length})\n                <Button\n                  type=\"button\"\n                  onClick={addLine}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex items-center space-x-2\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Add Line</span>\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {lines.map((line, index) => (\n                  <div key={index} className=\"border rounded-lg p-4 space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium\">Line {line.line_number}</h4>\n                      <Button\n                        type=\"button\"\n                        onClick={() => removeLine(index)}\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        className=\"flex items-center space-x-2\"\n                      >\n                        <Minus className=\"h-4 w-4\" />\n                        <span>Remove</span>\n                      </Button>\n                    </div>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                      <div>\n                        <Label>SKU</Label>\n                        <Input\n                          value={line.sku}\n                          onChange={(e) => updateLine(index, \"sku\", e.target.value)}\n                          placeholder=\"Enter SKU\"\n                        />\n                      </div>\n                      <div>\n                        <Label>Brand</Label>\n                        <Input\n                          value={line.brand}\n                          onChange={(e) => updateLine(index, \"brand\", e.target.value)}\n                          placeholder=\"Enter brand\"\n                        />\n                      </div>\n                      <div>\n                        <Label>SAP ID</Label>\n                        <Input\n                          value={line.sap_id}\n                          onChange={(e) => updateLine(index, \"sap_id\", e.target.value)}\n                          placeholder=\"Enter SAP ID\"\n                        />\n                      </div>\n                      <div>\n                        <Label>HSN Code</Label>\n                        <Input\n                          value={line.hsn_code}\n                          onChange={(e) => updateLine(index, \"hsn_code\", e.target.value)}\n                          placeholder=\"Enter HSN code\"\n                        />\n                      </div>\n                      <div>\n                        <Label>PO Quantity</Label>\n                        <Input\n                          type=\"number\"\n                          value={line.po_qty}\n                          onChange={(e) => updateLine(index, \"po_qty\", parseInt(e.target.value) || 0)}\n                          min=\"0\"\n                        />\n                      </div>\n                      <div>\n                        <Label>Cost Price</Label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          value={line.cost_price}\n                          onChange={(e) => updateLine(index, \"cost_price\", e.target.value)}\n                          min=\"0\"\n                        />\n                      </div>\n                      <div>\n                        <Label>MRP</Label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          value={line.mrp}\n                          onChange={(e) => updateLine(index, \"mrp\", e.target.value)}\n                          min=\"0\"\n                        />\n                      </div>\n                      <div>\n                        <Label>Total Value</Label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          value={line.total_value}\n                          onChange={(e) => updateLine(index, \"total_value\", e.target.value)}\n                          min=\"0\"\n                        />\n                      </div>\n                      <div>\n                        <Label>Status</Label>\n                        <Input\n                          value={line.status}\n                          onChange={(e) => updateLine(index, \"status\", e.target.value)}\n                          placeholder=\"Enter status\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-end space-x-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setLocation(\"/platform-po\")}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateMutation.isPending}\n              className=\"flex items-center space-x-2\"\n            >\n              <Save className=\"h-4 w-4\" />\n              <span>Save Changes</span>\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}\n\nexport default ZeptoPoEdit;","size_bytes":18307},"client/src/pages/zepto-po-upload.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, FileText, CheckCircle, AlertCircle, Eye, Database } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface ParsedPOData {\n  header: any;\n  lines: any[];\n  totalItems?: number;\n  totalQuantity?: number;\n  totalAmount?: string;\n}\n\nexport default function ZeptoPoUpload() {\n  const [file, setFile] = useState<File | null>(null);\n  const [parsedData, setParsedData] = useState<ParsedPOData | null>(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [dragActive, setDragActive] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const previewMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await fetch('/api/po/preview', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to preview file');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setParsedData(data);\n      setShowPreview(true);\n      toast({\n        title: \"File previewed successfully\",\n        description: `Found ${data.totalItems} items`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Preview failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async (data: { header: any; lines: any[] }) => {\n      const response = await fetch('/api/po/import/zepto', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to import PO');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"PO imported successfully\",\n        description: `PO ${data.po_number} has been created`,\n      });\n      setFile(null);\n      setParsedData(null);\n      setShowPreview(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/zepto-pos\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Import failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    const files = e.dataTransfer.files;\n    if (files && files[0]) {\n      handleFileSelection(files[0]);\n    }\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files[0]) {\n      handleFileSelection(files[0]);\n    }\n  };\n\n  const handleFileSelection = (selectedFile: File) => {\n    const validTypes = [\n      \"text/csv\",\n      \"application/vnd.ms-excel\",\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    ];\n    \n    const isValidFile = validTypes.includes(selectedFile.type) || \n                       selectedFile.name.endsWith('.csv') || \n                       selectedFile.name.endsWith('.xls') || \n                       selectedFile.name.endsWith('.xlsx');\n\n    if (isValidFile) {\n      setFile(selectedFile);\n      setParsedData(null);\n      setShowPreview(false);\n    } else {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload a CSV or Excel file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePreview = () => {\n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a file to preview\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    previewMutation.mutate(file);\n  };\n\n  const handleImport = () => {\n    if (!parsedData) {\n      toast({\n        title: \"No data to import\",\n        description: \"Please preview the file first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    importMutation.mutate({ \n      header: parsedData.header, \n      lines: parsedData.lines \n    });\n  };\n\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      <div className=\"container mx-auto p-6 space-y-6 max-w-6xl\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Zepto PO Upload</h1>\n            <p className=\"text-gray-600\">Upload, review, and import Zepto purchase orders</p>\n          </div>\n        </div>\n\n        <div className=\"grid gap-6\">\n          {/* File Upload Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Upload className=\"h-5 w-5\" />\n                Upload Zepto PO File\n              </CardTitle>\n              <CardDescription>\n                Upload CSV or Excel files containing Zepto purchase order data\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div\n                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                  dragActive\n                    ? \"border-blue-500 bg-blue-50\"\n                    : \"border-gray-300 hover:border-gray-400\"\n                }`}\n                onDragEnter={handleDrag}\n                onDragLeave={handleDrag}\n                onDragOver={handleDrag}\n                onDrop={handleDrop}\n              >\n                <FileText className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <div className=\"space-y-2\">\n                  <p className=\"text-lg font-medium\">\n                    {file ? \"File Selected\" : \"Drop your Zepto CSV/Excel file here\"}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    or{\" \"}\n                    <Label htmlFor=\"file-upload\" className=\"text-blue-600 hover:underline cursor-pointer\">\n                      browse to choose a file\n                    </Label>\n                  </p>\n                  <p className=\"text-xs text-gray-400\">\n                    Supports .csv, .xls, and .xlsx files\n                  </p>\n                </div>\n                <Input\n                  id=\"file-upload\"\n                  type=\"file\"\n                  accept=\".csv,.xls,.xlsx,text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                  onChange={handleFileChange}\n                  className=\"hidden\"\n                />\n              </div>\n\n              {file && (\n                <div className=\"flex items-center gap-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-green-800\">{file.name}</p>\n                    <p className=\"text-sm text-green-600\">\n                      {(file.size / 1024 / 1024).toFixed(2)} MB\n                    </p>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setFile(null);\n                      setParsedData(null);\n                      setShowPreview(false);\n                    }}\n                  >\n                    Remove\n                  </Button>\n                </div>\n              )}\n\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={handlePreview}\n                  disabled={!file || previewMutation.isPending}\n                  className=\"flex-1\"\n                  variant=\"outline\"\n                >\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  {previewMutation.isPending ? \"Analyzing...\" : \"Preview & Review\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Preview Section */}\n          {showPreview && parsedData && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Eye className=\"h-5 w-5\" />\n                  File Preview & Review\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Summary Information */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-blue-800\">PO Number</p>\n                    <p className=\"text-lg font-bold text-blue-900\">\n                      {parsedData.header?.po_number || \"N/A\"}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-green-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-green-800\">Total Items</p>\n                    <p className=\"text-lg font-bold text-green-900\">{parsedData.totalItems || 0}</p>\n                  </div>\n                  <div className=\"p-3 bg-purple-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-purple-800\">Total Quantity</p>\n                    <p className=\"text-lg font-bold text-purple-900\">{parsedData.totalQuantity || 0}</p>\n                  </div>\n                  <div className=\"p-3 bg-yellow-50 rounded-lg\">\n                    <p className=\"text-sm font-medium text-yellow-800\">Total Amount</p>\n                    <p className=\"text-lg font-bold text-yellow-900\">₹{parsedData.totalAmount || \"0\"}</p>\n                  </div>\n                </div>\n\n                {/* PO Header Preview */}\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">PO Header Information</h4>\n                  <div className=\"bg-gray-50 p-3 rounded-lg\">\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <div><strong>PO Number:</strong> {parsedData.header?.po_number || \"N/A\"}</div>\n                      <div><strong>PO Date:</strong> {parsedData.header?.po_date || \"N/A\"}</div>\n                      <div><strong>Status:</strong> <Badge variant=\"outline\">{parsedData.header?.status || \"Open\"}</Badge></div>\n                      <div><strong>Vendor:</strong> Zepto</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Line Items Preview */}\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Line Items Preview</h4>\n                  <div className=\"border rounded-lg overflow-hidden\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Item Code</TableHead>\n                          <TableHead>Description</TableHead>\n                          <TableHead>Quantity</TableHead>\n                          <TableHead>Unit Price</TableHead>\n                          <TableHead>Total</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {parsedData.lines.map((line, index) => (\n                          <TableRow key={index}>\n                            <TableCell className=\"font-medium\">{line.item_code || \"N/A\"}</TableCell>\n                            <TableCell>{line.item_name || line.product_description || \"N/A\"}</TableCell>\n                            <TableCell>{line.quantity || \"N/A\"}</TableCell>\n                            <TableCell>₹{line.unit_price || line.basic_cost_price || \"N/A\"}</TableCell>\n                            <TableCell>₹{line.total_amount || line.line_total || \"N/A\"}</TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n\n                </div>\n\n                {/* Import Action */}\n                <div className=\"flex gap-3 pt-4 border-t\">\n                  <Button\n                    onClick={handleImport}\n                    disabled={importMutation.isPending}\n                    className=\"flex-1\"\n                  >\n                    <Database className=\"h-4 w-4 mr-2\" />\n                    {importMutation.isPending ? \"Importing...\" : \"Import to Database\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Instructions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Instructions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 text-sm\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold\">1</div>\n                  <div>\n                    <h4 className=\"font-medium mb-1\">Upload File</h4>\n                    <p className=\"text-gray-600\">Upload your Zepto CSV or Excel file</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold\">2</div>\n                  <div>\n                    <h4 className=\"font-medium mb-1\">Preview & Review</h4>\n                    <p className=\"text-gray-600\">Review the parsed data to ensure accuracy</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold\">3</div>\n                  <div>\n                    <h4 className=\"font-medium mb-1\">Import to Database</h4>\n                    <p className=\"text-gray-600\">Import the validated data into the system</p>\n                  </div>\n                </div>\n\n                <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg mt-4\">\n                  <div className=\"flex items-start gap-2\">\n                    <AlertCircle className=\"h-4 w-4 text-blue-600 mt-0.5\" />\n                    <div>\n                      <p className=\"text-blue-800 text-sm\">\n                        <strong>Note:</strong> Please ensure your CSV file follows the standard Zepto format.\n                        Review all data before importing to maintain data integrity.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15592},"client/src/components/po/new-po-dropdown.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, Upload, FileText, ChevronDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface NewPODropdownProps {\n  onCreatePO: () => void;\n  onUploadPO: () => void;\n}\n\nexport function NewPODropdown({ onCreatePO, onUploadPO }: NewPODropdownProps) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          className=\"bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white shadow-lg\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          New PO\n          <ChevronDown className=\"h-4 w-4 ml-2\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-56\">\n        <DropdownMenuItem \n          onClick={onUploadPO}\n          className=\"flex items-center space-x-2 cursor-pointer\"\n        >\n          <Upload className=\"h-4 w-4\" />\n          <div>\n            <div className=\"font-medium\">Upload PO</div>\n            <div className=\"text-xs text-gray-500\">Upload CSV/Excel files</div>\n          </div>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={onCreatePO}\n          className=\"flex items-center space-x-2 cursor-pointer\"\n        >\n          <FileText className=\"h-4 w-4\" />\n          <div>\n            <div className=\"font-medium\">Create PO</div>\n            <div className=\"text-xs text-gray-500\">Manual PO creation</div>\n          </div>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1683},"client/src/pages/upload/UploadBlinkitPo.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Upload, CheckCircle, AlertCircle, FileText } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nexport default function UploadBlinkitPo() {\n  const [file, setFile] = useState<File | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadResult, setUploadResult] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) {\n      // Validate file type\n      if (!selectedFile.name.toLowerCase().endsWith('.xlsx') && !selectedFile.name.toLowerCase().endsWith('.xls')) {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please select an Excel file (.xlsx or .xls)\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      setFile(selectedFile);\n      setUploadResult(null);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!file) {\n      toast({\n        title: \"No File Selected\",\n        description: \"Please select an Excel file to upload\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await fetch('/api/blinkit-po/upload', {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.details || errorData.error || 'Upload failed');\n      }\n\n      const result = await response.json();\n      setUploadResult(result);\n      \n      // Invalidate queries to refresh data\n      await queryClient.invalidateQueries({ queryKey: ['/api/blinkit-pos'] });\n      \n      toast({\n        title: \"Upload Successful\",\n        description: `Blinkit PO uploaded with ${result.totalItems} items`,\n      });\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Upload Failed\",\n        description: error instanceof Error ? error.message : \"Failed to upload file\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const resetForm = () => {\n    setFile(null);\n    setUploadResult(null);\n    const fileInput = document.getElementById('file-input') as HTMLInputElement;\n    if (fileInput) fileInput.value = '';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Upload Blinkit Purchase Order</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Upload Excel files from Blinkit with purchase order data including detailed tax breakdown\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            File Upload\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"file-input\">Select Blinkit Excel File</Label>\n            <Input\n              id=\"file-input\"\n              type=\"file\"\n              accept=\".xlsx,.xls\"\n              onChange={handleFileChange}\n              className=\"cursor-pointer\"\n            />\n            <p className=\"text-sm text-muted-foreground\">\n              Accepts Excel files (.xlsx, .xls) with Blinkit purchase order format\n            </p>\n          </div>\n\n          {file && (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Selected file: <strong>{file.name}</strong> ({(file.size / 1024).toFixed(1)} KB)\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"flex gap-2\">\n            <Button \n              onClick={handleUpload} \n              disabled={!file || isUploading}\n              className=\"flex items-center gap-2\"\n            >\n              {isUploading ? (\n                <>\n                  <div className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full\" />\n                  Processing...\n                </>\n              ) : (\n                <>\n                  <Upload className=\"h-4 w-4\" />\n                  Upload File\n                </>\n              )}\n            </Button>\n            \n            {file && (\n              <Button variant=\"outline\" onClick={resetForm}>\n                Reset\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {uploadResult && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-green-600\">\n              <CheckCircle className=\"h-5 w-5\" />\n              Upload Success\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-sm\">\n              <p><strong>PO Number:</strong> {uploadResult.po?.po_number}</p>\n              <p><strong>Total Items:</strong> {uploadResult.totalItems}</p>\n              <p><strong>Total Quantity:</strong> {uploadResult.po?.total_quantity}</p>\n              <p><strong>Net Amount:</strong> ₹{uploadResult.po?.net_amount}</p>\n              <p><strong>Status:</strong> {uploadResult.po?.status}</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Blinkit File Format Requirements</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <p><strong>Required columns:</strong></p>\n            <ul className=\"list-disc list-inside space-y-1 ml-4\">\n              <li># (Line Number)</li>\n              <li>Item Code</li>\n              <li>HSN Code</li>\n              <li>Product UPC</li>\n              <li>Product Description</li>\n              <li>Grammage</li>\n              <li>Basic Cost Price</li>\n              <li>CGST%, SGST%, IGST%, CESS%, Additional CES</li>\n              <li>Tax Amount, Landing Rate, Quantity, MRP, Margin%</li>\n              <li>Total Amount</li>\n            </ul>\n            <p className=\"mt-4\">\n              <strong>Summary data</strong> should be included at the bottom with Total Quantity, Total Items, Net amount, and Cart Discount.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6875},"client/src/components/po/distributor-order-items-list-view.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format, isAfter, isBefore, isEqual } from \"date-fns\";\nimport { Search, Filter, Download, RefreshCw, X, Calendar, Package } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport * as XLSX from 'xlsx';\nimport type { DistributorMst, DistributorOrderItems } from \"@shared/schema\";\n\ninterface DistributorOrderItemWithDetails extends DistributorOrderItems {\n  po_number: string;\n  distributor_name: string;\n  order_date: Date;\n  expiry_date: Date | null;\n  distributor: DistributorMst;\n}\n\nexport function DistributorOrderItemsListView() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showFilter, setShowFilter] = useState(false);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [distributorFilter, setDistributorFilter] = useState(\"all\");\n  const [orderDateFrom, setOrderDateFrom] = useState(\"\");\n  const [orderDateTo, setOrderDateTo] = useState(\"\");\n  const [expiryDateFrom, setExpiryDateFrom] = useState(\"\");\n  const [expiryDateTo, setExpiryDateTo] = useState(\"\");\n  \n  const { data: orderItems = [], isLoading, refetch } = useQuery<DistributorOrderItemWithDetails[]>({\n    queryKey: [\"/api/distributor-order-items\"]\n  });\n\n  const { data: distributors = [] } = useQuery<DistributorMst[]>({\n    queryKey: [\"/api/distributors\"]\n  });\n\n  const handleRefresh = () => {\n    refetch();\n    toast({\n      title: \"Refreshed\",\n      description: \"Distributor order items list has been refreshed\"\n    });\n  };\n\n  const handleExport = () => {\n    const exportData = filteredOrderItems.map(item => ({\n      'PO Number': item.po_number,\n      'Distributor': item.distributor_name,\n      'Item Name': item.item_name,\n      'SAP Code': item.sap_code || 'N/A',\n      'HSN Code': item.hsn_code || 'N/A',\n      'Quantity': item.quantity,\n      'Basic Rate': parseFloat(item.basic_rate || '0'),\n      'GST Rate': parseFloat(item.gst_rate || '0'),\n      'Landing Rate': parseFloat(item.landing_rate || '0'),\n      'Item Total': parseFloat((parseFloat(item.landing_rate || '0') * item.quantity).toFixed(2)),\n      'Status': item.status || 'Pending',\n      'Order Date': format(new Date(item.order_date), 'yyyy-MM-dd'),\n      'Expiry Date': item.expiry_date ? format(new Date(item.expiry_date), 'yyyy-MM-dd') : 'N/A',\n      'Category': item.category || 'N/A',\n      'Subcategory': item.subcategory || 'N/A',\n      'Total Litres': parseFloat(item.total_litres || '0')\n    }));\n\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.json_to_sheet(exportData);\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Distributor Order Items\");\n    XLSX.writeFile(workbook, `distributor-order-items-export-${format(new Date(), 'yyyy-MM-dd')}.xlsx`);\n    \n    toast({\n      title: \"Export Successful\",\n      description: \"Distributor order items exported to Excel file\"\n    });\n  };\n\n  const clearFilters = () => {\n    setStatusFilter(\"all\");\n    setDistributorFilter(\"all\");\n    setOrderDateFrom(\"\");\n    setOrderDateTo(\"\");\n    setExpiryDateFrom(\"\");\n    setExpiryDateTo(\"\");\n    setSearchTerm(\"\");\n  };\n\n  const filteredOrderItems = orderItems.filter(item => {\n    // Text search\n    const matchesSearch = !searchTerm || \n      item.item_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.po_number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.distributor_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (item.sap_code && item.sap_code.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.category && item.category.toLowerCase().includes(searchTerm.toLowerCase()));\n\n    // Status filter\n    const matchesStatus = statusFilter === \"all\" || item.status === statusFilter;\n\n    // Distributor filter\n    const matchesDistributor = distributorFilter === \"all\" || \n      item.distributor.id.toString() === distributorFilter;\n\n    // Date range filters\n    const orderDate = new Date(item.order_date);\n    const matchesOrderDateFrom = !orderDateFrom || \n      isAfter(orderDate, new Date(orderDateFrom)) || \n      isEqual(orderDate, new Date(orderDateFrom));\n    const matchesOrderDateTo = !orderDateTo || \n      isBefore(orderDate, new Date(orderDateTo)) || \n      isEqual(orderDate, new Date(orderDateTo));\n\n    let matchesExpiryDateFrom = true;\n    let matchesExpiryDateTo = true;\n    if (item.expiry_date) {\n      const expiryDate = new Date(item.expiry_date);\n      matchesExpiryDateFrom = !expiryDateFrom || \n        isAfter(expiryDate, new Date(expiryDateFrom)) || \n        isEqual(expiryDate, new Date(expiryDateFrom));\n      matchesExpiryDateTo = !expiryDateTo || \n        isBefore(expiryDate, new Date(expiryDateTo)) || \n        isEqual(expiryDate, new Date(expiryDateTo));\n    }\n\n    return matchesSearch && matchesStatus && matchesDistributor && \n           matchesOrderDateFrom && matchesOrderDateTo && \n           matchesExpiryDateFrom && matchesExpiryDateTo;\n  });\n\n  // Calculate totals\n  const totalItems = filteredOrderItems.length;\n  const totalQuantity = filteredOrderItems.reduce((sum, item) => sum + item.quantity, 0);\n  const totalValue = filteredOrderItems.reduce((sum, item) => \n    sum + (parseFloat(item.landing_rate || '0') * item.quantity), 0\n  );\n\n  const getStatusVariant = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'pending': return 'secondary';\n      case 'confirmed': return 'default';\n      case 'shipped': return 'default';\n      case 'delivered': return 'default';\n      case 'cancelled': return 'destructive';\n      default: return 'secondary';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Search and Actions Bar */}\n      <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n        <div className=\"flex items-center space-x-2 flex-1 max-w-md\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search items, PO number, distributor...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setShowFilter(!showFilter)}>\n            <Filter className=\"h-4 w-4 mr-2\" />\n            Filter\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={handleExport}>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={handleRefresh}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Filter Panel */}\n      {showFilter && (\n        <Card>\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg\">Filters</CardTitle>\n              <Button variant=\"ghost\" size=\"sm\" onClick={clearFilters}>\n                <X className=\"h-4 w-4 mr-2\" />\n                Clear All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Status</Label>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"Pending\">Pending</SelectItem>\n                    <SelectItem value=\"Confirmed\">Confirmed</SelectItem>\n                    <SelectItem value=\"Shipped\">Shipped</SelectItem>\n                    <SelectItem value=\"Delivered\">Delivered</SelectItem>\n                    <SelectItem value=\"Cancelled\">Cancelled</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Distributor</Label>\n                <Select value={distributorFilter} onValueChange={setDistributorFilter}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Distributors</SelectItem>\n                    {distributors.map((distributor) => (\n                      <SelectItem key={distributor.id} value={distributor.id.toString()}>\n                        {distributor.distributor_name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Order Date From</Label>\n                <Input\n                  type=\"date\"\n                  value={orderDateFrom}\n                  onChange={(e) => setOrderDateFrom(e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Order Date To</Label>\n                <Input\n                  type=\"date\"\n                  value={orderDateTo}\n                  onChange={(e) => setOrderDateTo(e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Expiry Date From</Label>\n                <Input\n                  type=\"date\"\n                  value={expiryDateFrom}\n                  onChange={(e) => setExpiryDateFrom(e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Expiry Date To</Label>\n                <Input\n                  type=\"date\"\n                  value={expiryDateTo}\n                  onChange={(e) => setExpiryDateTo(e.target.value)}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n              <div className=\"ml-2\">\n                <div className=\"text-2xl font-bold\">{totalItems}</div>\n                <p className=\"text-xs text-muted-foreground\">Total Items</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n              <div className=\"ml-2\">\n                <div className=\"text-2xl font-bold\">{totalQuantity}</div>\n                <p className=\"text-xs text-muted-foreground\">Total Quantity</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n              <div className=\"ml-2\">\n                <div className=\"text-2xl font-bold\">₹{totalValue.toLocaleString('en-IN')}</div>\n                <p className=\"text-xs text-muted-foreground\">Total Value</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Order Items List */}\n      {filteredOrderItems.length === 0 ? (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <Package className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">No order items found</h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                No distributor order items match your current search and filter criteria.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle>Distributor Order Items ({filteredOrderItems.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"rounded-md border\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b bg-gray-50/50\">\n                    <th className=\"text-left p-4 font-medium\">Item Details</th>\n                    <th className=\"text-left p-4 font-medium\">PO Number</th>\n                    <th className=\"text-left p-4 font-medium\">Distributor</th>\n                    <th className=\"text-left p-4 font-medium\">Quantity</th>\n                    <th className=\"text-left p-4 font-medium\">Rates</th>\n                    <th className=\"text-left p-4 font-medium\">Total</th>\n                    <th className=\"text-left p-4 font-medium\">Status</th>\n                    <th className=\"text-left p-4 font-medium\">Order Date</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredOrderItems.map((item) => {\n                    const itemTotal = parseFloat(item.landing_rate || '0') * item.quantity;\n                    return (\n                      <tr key={item.id} className=\"border-b hover:bg-gray-50/50\">\n                        <td className=\"p-4\">\n                          <div className=\"font-medium\">{item.item_name}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            {item.sap_code && `SAP: ${item.sap_code}`}\n                            {item.hsn_code && ` | HSN: ${item.hsn_code}`}\n                          </div>\n                          {item.category && (\n                            <div className=\"text-sm text-gray-500\">\n                              {item.category}\n                              {item.subcategory && ` > ${item.subcategory}`}\n                            </div>\n                          )}\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"font-medium\">{item.po_number}</div>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"font-medium\">{item.distributor_name}</div>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"font-medium\">{item.quantity}</div>\n                          {item.total_litres && parseFloat(item.total_litres) > 0 && (\n                            <div className=\"text-sm text-gray-500\">\n                              {parseFloat(item.total_litres).toFixed(3)}L\n                            </div>\n                          )}\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"text-sm\">\n                            <div>Basic: ₹{parseFloat(item.basic_rate || '0').toFixed(2)}</div>\n                            <div>GST: {parseFloat(item.gst_rate || '0').toFixed(2)}%</div>\n                            <div>Landing: ₹{parseFloat(item.landing_rate || '0').toFixed(2)}</div>\n                          </div>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"font-medium\">₹{itemTotal.toLocaleString('en-IN')}</div>\n                        </td>\n                        <td className=\"p-4\">\n                          <Badge variant={getStatusVariant(item.status || 'Pending')}>\n                            {item.status || 'Pending'}\n                          </Badge>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"font-medium\">\n                            {format(new Date(item.order_date), 'MMM dd, yyyy')}\n                          </div>\n                          {item.expiry_date && (\n                            <div className=\"text-sm text-gray-500\">\n                              Exp: {format(new Date(item.expiry_date), 'MMM dd, yyyy')}\n                            </div>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":17181},"client/src/components/po/distributor-po-form.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, Trash2, Plus, Save } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { DistributorMst, SapItemMst } from \"@shared/schema\";\n\nconst formSchema = z.object({\n  po_number: z.string().min(1, \"PO number is required\"),\n  distributor_id: z.string().min(1, \"Distributor is required\"),\n  order_date: z.date({ required_error: \"Order date is required\" }),\n  expiry_date: z.date().optional(),\n  appointment_date: z.date().optional(),\n  region: z.string().optional(),\n  state: z.string().optional(),\n  city: z.string().optional(),\n  area: z.string().optional(),\n  status: z.string().default(\"Open\")\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface OrderItem {\n  item_name: string;\n  sap_code: string;\n  quantity: number;\n  basic_rate: string;\n  gst_rate: string;\n  landing_rate: string;\n  category?: string;\n  subcategory?: string;\n  total_litres?: string;\n  hsn_code?: string;\n}\n\nexport function DistributorPOForm() {\n  const [orderItems, setOrderItems] = useState<OrderItem[]>([\n    { item_name: \"\", sap_code: \"\", quantity: 1, basic_rate: \"\", gst_rate: \"\", landing_rate: \"\" }\n  ]);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      po_number: \"\",\n      distributor_id: \"\",\n      order_date: new Date(),\n      status: \"Open\"\n    }\n  });\n\n  // Fetch distributors\n  const { data: distributors = [] } = useQuery<DistributorMst[]>({\n    queryKey: [\"/api/distributors\"]\n  });\n\n  // Fetch SAP items for autocomplete\n  const { data: sapItems = [] } = useQuery<SapItemMst[]>({\n    queryKey: [\"/api/sap-items\"]\n  });\n\n  const createPOMutation = useMutation({\n    mutationFn: async (data: { header: FormData & { distributor_id: number }; items: OrderItem[] }) => {\n      return await apiRequest('/api/distributor-pos', {\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Distributor purchase order created successfully\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/distributor-pos\"] });\n      form.reset();\n      setOrderItems([{ item_name: \"\", sap_code: \"\", quantity: 1, basic_rate: \"\", gst_rate: \"\", landing_rate: \"\" }]);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create purchase order\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const addOrderItem = () => {\n    setOrderItems([...orderItems, { \n      item_name: \"\", sap_code: \"\", quantity: 1, basic_rate: \"\", gst_rate: \"\", landing_rate: \"\" \n    }]);\n  };\n\n  const removeOrderItem = (index: number) => {\n    if (orderItems.length > 1) {\n      setOrderItems(orderItems.filter((_, i) => i !== index));\n    }\n  };\n\n  const updateOrderItem = (index: number, field: keyof OrderItem, value: any) => {\n    const updatedItems = [...orderItems];\n    updatedItems[index] = { ...updatedItems[index], [field]: value };\n    setOrderItems(updatedItems);\n  };\n\n  const calculateLandingRate = (basicRate: string, gstRate: string) => {\n    const basic = parseFloat(basicRate) || 0;\n    const gst = parseFloat(gstRate) || 0;\n    const landingRate = basic + (basic * gst / 100);\n    return landingRate.toFixed(2);\n  };\n\n  const onSubmit = (data: FormData) => {\n    const validItems = orderItems.filter(item => \n      item.item_name.trim() && item.quantity > 0 && item.basic_rate && item.gst_rate\n    );\n\n    if (validItems.length === 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please add at least one valid order item\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    createPOMutation.mutate({\n      header: {\n        ...data,\n        distributor_id: parseInt(data.distributor_id)\n      },\n      items: validItems.map(item => ({\n        ...item,\n        landing_rate: calculateLandingRate(item.basic_rate, item.gst_rate)\n      }))\n    });\n  };\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n      {/* PO Header Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Purchase Order Details</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"po_number\">PO Number *</Label>\n              <Input\n                id=\"po_number\"\n                placeholder=\"Enter PO number\"\n                {...form.register(\"po_number\")}\n              />\n              {form.formState.errors.po_number && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.po_number.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"distributor_id\">Distributor *</Label>\n              <Select\n                value={form.watch(\"distributor_id\")}\n                onValueChange={(value) => form.setValue(\"distributor_id\", value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select distributor\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {distributors.map((distributor) => (\n                    <SelectItem key={distributor.id} value={distributor.id.toString()}>\n                      {distributor.distributor_name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {form.formState.errors.distributor_id && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.distributor_id.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Order Date *</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className={cn(\n                      \"w-full justify-start text-left font-normal\",\n                      !form.watch(\"order_date\") && \"text-muted-foreground\"\n                    )}\n                  >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {form.watch(\"order_date\") ? format(form.watch(\"order_date\")!, \"PPP\") : \"Pick a date\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={form.watch(\"order_date\")}\n                    onSelect={(date) => form.setValue(\"order_date\", date!)}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Expiry Date</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className={cn(\n                      \"w-full justify-start text-left font-normal\",\n                      !form.watch(\"expiry_date\") && \"text-muted-foreground\"\n                    )}\n                  >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {form.watch(\"expiry_date\") ? format(form.watch(\"expiry_date\")!, \"PPP\") : \"Pick a date\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={form.watch(\"expiry_date\")}\n                    onSelect={(date) => form.setValue(\"expiry_date\", date)}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"region\">Region</Label>\n              <Input\n                id=\"region\"\n                placeholder=\"Enter region\"\n                {...form.register(\"region\")}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"state\">State</Label>\n              <Input\n                id=\"state\"\n                placeholder=\"Enter state\"\n                {...form.register(\"state\")}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"city\">City</Label>\n              <Input\n                id=\"city\"\n                placeholder=\"Enter city\"\n                {...form.register(\"city\")}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"area\">Area</Label>\n              <Input\n                id=\"area\"\n                placeholder=\"Enter area\"\n                {...form.register(\"area\")}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"status\">Status</Label>\n              <Select\n                value={form.watch(\"status\")}\n                onValueChange={(value) => form.setValue(\"status\", value)}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Open\">Open</SelectItem>\n                  <SelectItem value=\"Closed\">Closed</SelectItem>\n                  <SelectItem value=\"Cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Order Items */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Order Items</CardTitle>\n            <Button type=\"button\" onClick={addOrderItem} variant=\"outline\" size=\"sm\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Item\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {orderItems.map((item, index) => (\n              <div key={index} className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4 p-4 border rounded-lg\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor={`item_name_${index}`}>Item Name *</Label>\n                  <Input\n                    id={`item_name_${index}`}\n                    value={item.item_name}\n                    onChange={(e) => updateOrderItem(index, \"item_name\", e.target.value)}\n                    placeholder=\"Enter item name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={`sap_code_${index}`}>SAP Code</Label>\n                  <Input\n                    id={`sap_code_${index}`}\n                    value={item.sap_code}\n                    onChange={(e) => updateOrderItem(index, \"sap_code\", e.target.value)}\n                    placeholder=\"Enter SAP code\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={`quantity_${index}`}>Quantity *</Label>\n                  <Input\n                    id={`quantity_${index}`}\n                    type=\"number\"\n                    value={item.quantity}\n                    onChange={(e) => updateOrderItem(index, \"quantity\", parseInt(e.target.value) || 0)}\n                    placeholder=\"0\"\n                    min=\"1\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={`basic_rate_${index}`}>Basic Rate *</Label>\n                  <Input\n                    id={`basic_rate_${index}`}\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={item.basic_rate}\n                    onChange={(e) => {\n                      updateOrderItem(index, \"basic_rate\", e.target.value);\n                      updateOrderItem(index, \"landing_rate\", calculateLandingRate(e.target.value, item.gst_rate));\n                    }}\n                    placeholder=\"0.00\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={`gst_rate_${index}`}>GST Rate (%) *</Label>\n                  <Input\n                    id={`gst_rate_${index}`}\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={item.gst_rate}\n                    onChange={(e) => {\n                      updateOrderItem(index, \"gst_rate\", e.target.value);\n                      updateOrderItem(index, \"landing_rate\", calculateLandingRate(item.basic_rate, e.target.value));\n                    }}\n                    placeholder=\"0.00\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Landing Rate</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      value={item.landing_rate}\n                      readOnly\n                      className=\"bg-gray-50\"\n                      placeholder=\"Auto-calculated\"\n                    />\n                    {orderItems.length > 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => removeOrderItem(index)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2 lg:col-span-2\">\n                  <Label htmlFor={`hsn_code_${index}`}>HSN Code</Label>\n                  <Input\n                    id={`hsn_code_${index}`}\n                    value={item.hsn_code || \"\"}\n                    onChange={(e) => updateOrderItem(index, \"hsn_code\", e.target.value)}\n                    placeholder=\"Enter HSN code\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={`category_${index}`}>Category</Label>\n                  <Input\n                    id={`category_${index}`}\n                    value={item.category || \"\"}\n                    onChange={(e) => updateOrderItem(index, \"category\", e.target.value)}\n                    placeholder=\"Enter category\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={`subcategory_${index}`}>Subcategory</Label>\n                  <Input\n                    id={`subcategory_${index}`}\n                    value={item.subcategory || \"\"}\n                    onChange={(e) => updateOrderItem(index, \"subcategory\", e.target.value)}\n                    placeholder=\"Enter subcategory\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={`total_litres_${index}`}>Total Litres</Label>\n                  <Input\n                    id={`total_litres_${index}`}\n                    type=\"number\"\n                    step=\"0.001\"\n                    value={item.total_litres || \"\"}\n                    onChange={(e) => updateOrderItem(index, \"total_litres\", e.target.value)}\n                    placeholder=\"0.000\"\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Submit Button */}\n      <div className=\"flex justify-end space-x-4\">\n        <Button\n          type=\"submit\"\n          disabled={createPOMutation.isPending}\n          className=\"bg-blue-600 hover:bg-blue-700\"\n        >\n          <Save className=\"h-4 w-4 mr-2\" />\n          {createPOMutation.isPending ? \"Creating...\" : \"Create Purchase Order\"}\n        </Button>\n      </div>\n    </form>\n  );\n}","size_bytes":16737},"client/src/components/po/distributor-po-list-view.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { Search, Eye, Edit, Trash2, Plus, Filter, Download, RefreshCw } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport * as XLSX from 'xlsx';\nimport type { DistributorPo, DistributorMst, DistributorOrderItems } from \"@shared/schema\";\n\ninterface DistributorPOWithDetails extends Omit<DistributorPo, 'distributor_id'> {\n  distributor: DistributorMst;\n  orderItems: DistributorOrderItems[];\n}\n\nexport function DistributorPOListView() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showFilter, setShowFilter] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: pos = [], isLoading, refetch } = useQuery<DistributorPOWithDetails[]>({\n    queryKey: [\"/api/distributor-pos\"]\n  });\n\n  const deletePOMutation = useMutation({\n    mutationFn: (id: number) => apiRequest('DELETE', `/api/distributor-pos/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/distributor-pos\"] });\n      toast({\n        title: \"Success\",\n        description: \"Distributor purchase order deleted successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete distributor purchase order\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleView = (po: DistributorPOWithDetails) => {\n    setLocation(`/distributor-po-details/${po.id}`);\n  };\n\n  const handleEdit = (po: DistributorPOWithDetails) => {\n    setLocation(`/distributor-po-edit/${po.id}`);\n  };\n\n  const handleDelete = (po: DistributorPOWithDetails) => {\n    if (confirm(`Are you sure you want to delete PO ${po.po_number}?`)) {\n      deletePOMutation.mutate(po.id);\n    }\n  };\n\n  const handleRefresh = () => {\n    refetch();\n    toast({\n      title: \"Refreshed\",\n      description: \"Distributor purchase orders refreshed successfully\"\n    });\n  };\n\n  const handleExport = () => {\n    // Prepare PO summary data\n    const poSummaryData = filteredPOs.map(po => {\n      const { totalQuantity, totalValue } = calculatePOTotals(po.orderItems);\n      return {\n        'PO Number': po.po_number,\n        'Distributor': po.distributor.distributor_name,\n        'Order Date': format(new Date(po.order_date), 'yyyy-MM-dd'),\n        'Expiry Date': po.expiry_date ? format(new Date(po.expiry_date), 'yyyy-MM-dd') : '',\n        'City': po.city || '',\n        'State': po.state || '',\n        'Status': po.status || '',\n        'Total Items': po.orderItems.length,\n        'Total Quantity': totalQuantity,\n        'Total Value': totalValue.toFixed(2),\n        'Created Date': format(new Date(po.created_at!), 'yyyy-MM-dd')\n      };\n    });\n\n    // Create workbook and worksheet\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.json_to_sheet(poSummaryData);\n    \n    // Add worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Distributor PO Summary\");\n\n    // Export file\n    XLSX.writeFile(workbook, `distributor-pos-export-${format(new Date(), 'yyyy-MM-dd')}.xlsx`);\n    \n    toast({\n      title: \"Export Successful\",\n      description: \"Distributor purchase orders exported to Excel file\"\n    });\n  };\n\n  const calculatePOTotals = (items: DistributorOrderItems[]) => {\n    const totalQuantity = items.reduce((sum, item) => sum + item.quantity, 0);\n    const totalValue = items.reduce((sum, item) => {\n      return sum + (parseFloat(item.landing_rate) * item.quantity);\n    }, 0);\n    return { totalQuantity, totalValue };\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'open': return 'default';\n      case 'closed': return 'secondary';\n      case 'cancelled': return 'destructive';\n      case 'expired': return 'destructive';\n      default: return 'default';\n    }\n  };\n\n  const filteredPOs = pos.filter(po =>\n    po.po_number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    po.distributor.distributor_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (po.city && po.city.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    (po.state && po.state.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Search and Actions Bar */}\n      <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n        <div className=\"flex items-center space-x-2 flex-1 max-w-md\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search by PO number, distributor, city...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setShowFilter(!showFilter)}>\n            <Filter className=\"h-4 w-4 mr-2\" />\n            Filter\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={handleExport}>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={handleRefresh}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-2xl font-bold\">{pos.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Total POs</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {pos.filter(po => po.status === 'Open').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Open POs</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-2xl font-bold text-gray-600\">\n              {pos.filter(po => po.status === 'Closed').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Closed POs</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-2xl font-bold text-red-600\">\n              {pos.filter(po => po.status === 'Cancelled').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Cancelled POs</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* PO List */}\n      {filteredPOs.length === 0 ? (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <Plus className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">No distributor purchase orders</h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                You haven't created any distributor purchase orders yet. Create your first PO to get started.\n              </p>\n              <Link href=\"/distributor-po\">\n                <Button className=\"mt-4\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Create First PO\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle>Distributor Purchase Orders ({filteredPOs.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"rounded-md border\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b bg-gray-50/50\">\n                    <th className=\"text-left p-4 font-medium\">PO Number</th>\n                    <th className=\"text-left p-4 font-medium\">Distributor</th>\n                    <th className=\"text-left p-4 font-medium\">Order Date</th>\n                    <th className=\"text-left p-4 font-medium\">Location</th>\n                    <th className=\"text-left p-4 font-medium\">Items</th>\n                    <th className=\"text-left p-4 font-medium\">Total Value</th>\n                    <th className=\"text-left p-4 font-medium\">Status</th>\n                    <th className=\"text-left p-4 font-medium\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredPOs.map((po) => {\n                    const { totalQuantity, totalValue } = calculatePOTotals(po.orderItems);\n                    return (\n                      <tr key={po.id} className=\"border-b hover:bg-gray-50/50\">\n                        <td className=\"p-4\">\n                          <div className=\"font-medium\">{po.po_number}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            {format(new Date(po.created_at!), 'MMM dd, yyyy')}\n                          </div>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"font-medium\">{po.distributor.distributor_name}</div>\n                          <div className=\"text-sm text-gray-500\">{po.distributor.distributor_code}</div>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"font-medium\">\n                            {format(new Date(po.order_date), 'MMM dd, yyyy')}\n                          </div>\n                          {po.expiry_date && (\n                            <div className=\"text-sm text-gray-500\">\n                              Expires: {format(new Date(po.expiry_date), 'MMM dd, yyyy')}\n                            </div>\n                          )}\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"font-medium\">{po.city || '-'}</div>\n                          <div className=\"text-sm text-gray-500\">{po.state || '-'}</div>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"font-medium\">{po.orderItems.length} items</div>\n                          <div className=\"text-sm text-gray-500\">{totalQuantity} qty</div>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"font-medium\">₹{totalValue.toLocaleString('en-IN')}</div>\n                        </td>\n                        <td className=\"p-4\">\n                          <Badge variant={getStatusBadgeVariant(po.status || 'Open')}>\n                            {po.status || 'Open'}\n                          </Badge>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleView(po)}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(po)}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(po)}\n                              className=\"text-red-600 hover:text-red-700\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":12942},"client/src/components/po/distributor-po-tabs.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, List, BarChart3, Upload, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { DistributorPOForm } from \"./distributor-po-form\";\nimport { DistributorPOListView } from \"./distributor-po-list-view\";\nimport { DistributorOrderItemsListView } from \"./distributor-order-items-list-view\";\nimport { NewDistributorPODropdown } from \"./new-distributor-po-dropdown\";\n\nexport function DistributorPOTabs() {\n  const [activeTab, setActiveTab] = useState(\"list\");\n  const [showCreateForm, setShowCreateForm] = useState(false);\n\n  return (\n    <div className=\"max-w-7xl mx-auto space-y-6\">\n      {/* Module Header */}\n      <Card className=\"shadow-lg border-0 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-900 dark:to-gray-800\">\n        <CardHeader className=\"border-b border-blue-100 dark:border-gray-700 bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n                Distributor Purchase Orders\n              </CardTitle>\n              <p className=\"text-gray-600 dark:text-gray-300 mt-2\">\n                Create and manage purchase orders for distributors\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <NewDistributorPODropdown \n                onCreatePO={() => {\n                  setShowCreateForm(true);\n                }}\n              />\n              <div className=\"flex items-center space-x-4 text-sm\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"h-2 w-2 bg-green-500 rounded-full animate-pulse\"></div>\n                  <span className=\"text-gray-600 dark:text-gray-300\">System Online</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Main Content with Tabs */}\n      <Card className=\"shadow-lg border-0\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          {!showCreateForm && (\n            <CardHeader className=\"border-b border-gray-100 dark:border-gray-700 bg-gradient-to-r from-slate-50 to-gray-50 dark:from-gray-800 dark:to-gray-900\">\n              <TabsList className=\"grid w-full grid-cols-2 bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm shadow-md rounded-xl\">\n                <TabsTrigger \n                  value=\"list\" \n                  className=\"flex items-center space-x-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-green-600 data-[state=active]:to-emerald-600 data-[state=active]:text-white\"\n                >\n                  <List className=\"h-4 w-4\" />\n                  <span>View POs</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"order-items\" \n                  className=\"flex items-center space-x-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-600 data-[state=active]:to-pink-600 data-[state=active]:text-white\"\n                >\n                  <BarChart3 className=\"h-4 w-4\" />\n                  <span>Order Items</span>\n                </TabsTrigger>\n              </TabsList>\n            </CardHeader>\n          )}\n\n          <CardContent className=\"p-0\">\n            {!showCreateForm && (\n              <>\n                <TabsContent value=\"list\" className=\"mt-0\">\n                  <div className=\"p-6\">\n                    <DistributorPOListView />\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"order-items\" className=\"mt-0\">\n                  <div className=\"p-6\">\n                    <DistributorOrderItemsListView />\n                  </div>\n                </TabsContent>\n              </>\n            )}\n\n            {showCreateForm && (\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setShowCreateForm(false)}\n                      className=\"flex items-center space-x-2\"\n                    >\n                      <ArrowLeft className=\"h-4 w-4\" />\n                      <span>Back</span>\n                    </Button>\n                    <h3 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">Create New Distributor Purchase Order</h3>\n                  </div>\n                </div>\n                <DistributorPOForm />\n              </div>\n            )}\n          </CardContent>\n        </Tabs>\n      </Card>\n    </div>\n  );\n}","size_bytes":5003},"client/src/components/po/new-distributor-po-dropdown.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, FileText, ChevronDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface NewDistributorPODropdownProps {\n  onCreatePO: () => void;\n}\n\nexport function NewDistributorPODropdown({ onCreatePO }: NewDistributorPODropdownProps) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          className=\"bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white shadow-lg\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          New PO\n          <ChevronDown className=\"h-4 w-4 ml-2\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-56\">\n        <DropdownMenuItem \n          onClick={onCreatePO}\n          className=\"flex items-center space-x-2 cursor-pointer\"\n        >\n          <FileText className=\"h-4 w-4\" />\n          <div>\n            <div className=\"font-medium\">Create PO</div>\n            <div className=\"text-xs text-gray-500\">Manual PO creation</div>\n          </div>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1298},"client/src/pages/distributor-po.tsx":{"content":"import { DistributorPOTabs } from \"@/components/po/distributor-po-tabs\";\n\nexport default function DistributorPO() {\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Content Area */}\n      <main className=\"flex-1 overflow-y-auto p-6 bg-gradient-to-br from-gray-50 to-blue-50 dark:from-gray-900 dark:to-gray-800\">\n        <DistributorPOTabs />\n      </main>\n    </div>\n  );\n}","size_bytes":404},"examine_bigbasket.js":{"content":"import XLSX from 'xlsx';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Read the BigBasket Excel file\nconst filePath = path.join(__dirname, 'attached_assets', '26146854_1754816325618.xlsx');\n\ntry {\n  const workbook = XLSX.readFile(filePath);\n  const sheetNames = workbook.SheetNames;\n  \n  console.log('Sheet Names:', sheetNames);\n  \n  // Examine each sheet\n  sheetNames.forEach(sheetName => {\n    console.log(`\\n=== Sheet: ${sheetName} ===`);\n    const worksheet = workbook.Sheets[sheetName];\n    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n    \n    // Show first 30 rows to understand structure\n    console.log('First 30 rows:');\n    jsonData.slice(0, 30).forEach((row, index) => {\n      console.log(`Row ${index + 1}:`, row);\n    });\n    \n    // Show headers if available\n    if (jsonData.length > 0) {\n      console.log('\\nPossible Headers (Row 1):', jsonData[0]);\n    }\n  });\n  \n} catch (error) {\n  console.error('Error reading file:', error.message);\n}","size_bytes":1097},"server/bigbasket-parser.ts":{"content":"import XLSX from 'xlsx';\nimport type { InsertBigbasketPoHeader, InsertBigbasketPoLines } from '@shared/schema';\n\nexport interface BigBasketParsedData {\n  header: InsertBigbasketPoHeader;\n  lines: InsertBigbasketPoLines[];\n  totalItems: number;\n  totalQuantity: number;\n  totalAmount: string;\n  detectedVendor: string;\n}\n\nexport async function parseBigBasketPO(buffer: Buffer, uploadedBy: string): Promise<BigBasketParsedData> {\n  try {\n    // Read Excel file\n    const workbook = XLSX.read(buffer, { type: 'buffer' });\n    const firstSheetName = workbook.SheetNames[0];\n    const worksheet = workbook.Sheets[firstSheetName];\n    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];\n    \n    console.log(\"Processing BigBasket Excel file with\", jsonData.length, \"rows\");\n    \n    // Initialize header data\n    let header: InsertBigbasketPoHeader = {\n      po_number: \"\",\n      po_date: null,\n      po_expiry_date: null,\n      warehouse_address: \"\",\n      delivery_address: \"\",\n      supplier_name: \"\",\n      supplier_address: \"\",\n      supplier_gstin: \"\",\n      dc_address: \"\",\n      dc_gstin: \"\",\n      total_items: 0,\n      total_quantity: 0,\n      total_basic_cost: \"0\",\n      total_gst_amount: \"0\",\n      total_cess_amount: \"0\",\n      grand_total: \"0\",\n      status: \"pending\",\n      created_by: uploadedBy\n    };\n    \n    const lines: InsertBigbasketPoLines[] = [];\n    \n    // Parse header information\n    for (let i = 0; i < Math.min(30, jsonData.length); i++) {\n      const row = jsonData[i];\n      if (!row || row.length === 0) continue;\n      \n      const firstCell = String(row[0] || '').trim();\n      \n      // Extract PO Number, PO Date, and PO Expiry Date from row 17\n      if (firstCell.includes('PO Number:')) {\n        const poMatch = firstCell.match(/PO Number:(.*?)(?:,|$)/);\n        if (poMatch) {\n          header.po_number = poMatch[1].trim();\n        }\n        \n        // Check for PO Date in row[3]\n        if (row[3] && String(row[3]).includes('PO Date:')) {\n          const dateMatch = String(row[3]).match(/PO Date:(.*?)(?:,|$)/);\n          if (dateMatch) {\n            const dateStr = dateMatch[1].trim();\n            header.po_date = parseDate(dateStr);\n          }\n        }\n        \n        // Check for PO Expiry Date in row[7]\n        if (row[7] && String(row[7]).includes('PO Expiry date:')) {\n          const expiryMatch = String(row[7]).match(/PO Expiry date:(.*?)(?:,|$)/);\n          if (expiryMatch) {\n            const expiryStr = expiryMatch[1].trim();\n            header.po_expiry_date = parseDate(expiryStr);\n          }\n        }\n      }\n      \n      // Extract DC Address (rows 1-4)\n      if (i >= 0 && i <= 3 && firstCell && !firstCell.includes('Address') && !firstCell.includes('Warehouse')) {\n        if (!header.dc_address) {\n          header.dc_address = firstCell;\n        } else {\n          header.dc_address += ', ' + firstCell;\n        }\n      }\n      \n      // Extract Warehouse Address (row 6)\n      if (i === 5 && firstCell === 'Noida-New-FC') {\n        header.warehouse_address = firstCell;\n      }\n      \n      // Extract Supplier info (rows 11-13)\n      if (i === 11 && firstCell.includes('Sustainquest')) {\n        header.supplier_name = firstCell;\n      }\n      if (i === 12 && firstCell.includes('Plot No')) {\n        header.supplier_address = firstCell;\n      }\n      if (i === 15 && firstCell.includes('GSTIN No:')) {\n        const gstinMatch = firstCell.match(/GSTIN No:\\s*(.*)/);\n        if (gstinMatch) {\n          header.supplier_gstin = gstinMatch[1].trim();\n        }\n      }\n    }\n    \n    // Find data rows (starting from row with headers)\n    let dataStartRow = -1;\n    for (let i = 15; i < jsonData.length; i++) {\n      const row = jsonData[i];\n      if (row && row[0] === 'S.No' && row[1] === 'HSN Code') {\n        dataStartRow = i + 1;\n        break;\n      }\n    }\n    \n    if (dataStartRow === -1) {\n      throw new Error('Could not find data headers in BigBasket file');\n    }\n    \n    // Parse line items\n    let totalQuantity = 0;\n    let totalValue = 0;\n    let totalGST = 0;\n    let totalCess = 0;\n    \n    for (let i = dataStartRow; i < jsonData.length; i++) {\n      const row = jsonData[i];\n      if (!row || row.length < 23) continue;\n      \n      // Check if this is a valid data row (has S.No as number)\n      const sNo = parseInt(String(row[0] || ''));\n      if (isNaN(sNo) || sNo <= 0) continue;\n      \n      const line: InsertBigbasketPoLines = {\n        s_no: sNo,\n        hsn_code: String(row[1] || ''),\n        sku_code: String(row[2] || ''),\n        description: String(row[3] || ''),\n        ean_upc_code: String(row[4] || ''),\n        case_quantity: parseInt(String(row[5] || '0')) || 0,\n        quantity: parseInt(String(row[6] || '0')) || 0,\n        basic_cost: parseFloat(String(row[7] || '0')).toFixed(2),\n        sgst_percent: parseFloat(String(row[8] || '0')).toFixed(2),\n        sgst_amount: parseFloat(String(row[9] || '0')).toFixed(2),\n        cgst_percent: parseFloat(String(row[10] || '0')).toFixed(2),\n        cgst_amount: parseFloat(String(row[11] || '0')).toFixed(2),\n        igst_percent: parseFloat(String(row[12] || '0')).toFixed(2),\n        igst_amount: parseFloat(String(row[13] || '0')).toFixed(2),\n        gst_percent: parseFloat(String(row[14] || '0')).toFixed(2),\n        gst_amount: parseFloat(String(row[15] || '0')).toFixed(2),\n        cess_percent: parseFloat(String(row[16] || '0')).toFixed(2),\n        cess_value: parseFloat(String(row[17] || '0')).toFixed(2),\n        state_cess_percent: parseFloat(String(row[18] || '0')).toFixed(2),\n        state_cess: parseFloat(String(row[19] || '0')).toFixed(2),\n        landing_cost: parseFloat(String(row[20] || '0')).toFixed(2),\n        mrp: parseFloat(String(row[21] || '0')).toFixed(2),\n        total_value: parseFloat(String(row[22] || '0')).toFixed(2)\n      };\n      \n      lines.push(line);\n      \n      // Calculate totals\n      totalQuantity += line.quantity;\n      totalValue += parseFloat(line.total_value || '0');\n      totalGST += parseFloat(line.gst_amount || '0');\n      totalCess += parseFloat(line.cess_value || '0');\n      \n      console.log(`Parsed BigBasket line item ${sNo}:`, {\n        sku_code: line.sku_code,\n        description: line.description?.substring(0, 50) + '...',\n        quantity: line.quantity,\n        total_value: line.total_value\n      });\n    }\n    \n    // Update header totals\n    header.total_items = lines.length;\n    header.total_quantity = totalQuantity;\n    header.grand_total = totalValue.toFixed(2);\n    header.total_gst_amount = totalGST.toFixed(2);\n    header.total_cess_amount = totalCess.toFixed(2);\n    header.total_basic_cost = lines.reduce((sum, line) => sum + (parseFloat(line.basic_cost || '0') * line.quantity), 0).toFixed(2);\n    \n    console.log(\"BigBasket PO parsed successfully:\", {\n      po_number: header.po_number,\n      total_items: header.total_items,\n      total_quantity: header.total_quantity,\n      grand_total: header.grand_total\n    });\n    \n    return {\n      header,\n      lines,\n      totalItems: lines.length,\n      totalQuantity,\n      totalAmount: totalValue.toFixed(2),\n      detectedVendor: 'bigbasket'\n    };\n    \n  } catch (error) {\n    console.error(\"Error parsing BigBasket PO:\", error);\n    throw new Error(`Failed to parse BigBasket file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nfunction parseDate(dateStr: string): Date | null {\n  if (!dateStr) return null;\n  \n  try {\n    // Handle DD/MMM/YYYY format (e.g., \"08/Aug/2025\")\n    const parts = dateStr.split('/');\n    if (parts.length === 3) {\n      const day = parseInt(parts[0]);\n      const monthStr = parts[1];\n      const year = parseInt(parts[2]);\n      \n      const monthMap: { [key: string]: number } = {\n        'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n        'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n      };\n      \n      const month = monthMap[monthStr];\n      if (month !== undefined) {\n        return new Date(year, month, day);\n      }\n    }\n    \n    // Fallback to Date.parse\n    const parsed = Date.parse(dateStr);\n    return isNaN(parsed) ? null : new Date(parsed);\n  } catch (error) {\n    console.error(\"Error parsing date:\", dateStr, error);\n    return null;\n  }\n}","size_bytes":8281},"examine_dealshare.js":{"content":"import XLSX from 'xlsx';\nimport fs from 'fs';\n\n// Read the Dealshare Excel file\nconst filePath = 'attached_assets/Jivo Dasna_1754824163387.xlsx';\nconst workbook = XLSX.readFile(filePath);\n\nconsole.log('Sheet Names:', workbook.SheetNames);\n\n// Get the first sheet\nconst sheetName = workbook.SheetNames[0];\nconst worksheet = workbook.Sheets[sheetName];\n\n// Convert to JSON to see structure\nconst jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });\n\nconsole.log('\\n=== FIRST 15 ROWS OF DATA ===');\nfor (let i = 0; i < Math.min(15, jsonData.length); i++) {\n  console.log(`Row ${i + 1}:`, jsonData[i]);\n}\n\nconsole.log('\\n=== FULL SHEET RANGE ===');\nconsole.log('Sheet range:', worksheet['!ref']);\n\n// Look for potential header patterns\nconsole.log('\\n=== LOOKING FOR HEADER PATTERNS ===');\nfor (let i = 0; i < Math.min(10, jsonData.length); i++) {\n  const row = jsonData[i];\n  if (row && row.length > 0) {\n    const hasProductInfo = row.some(cell => \n      typeof cell === 'string' && \n      (cell.toLowerCase().includes('product') || \n       cell.toLowerCase().includes('item') || \n       cell.toLowerCase().includes('sku') ||\n       cell.toLowerCase().includes('quantity') ||\n       cell.toLowerCase().includes('price'))\n    );\n    if (hasProductInfo) {\n      console.log(`Potential headers at row ${i + 1}:`, row);\n    }\n  }\n}","size_bytes":1347},"server/dealshare-parser.ts":{"content":"import xlsx from 'xlsx';\n\ninterface DealsharePoHeader {\n  po_number: string;\n  po_created_date?: Date | null;\n  po_delivery_date?: Date | null;\n  po_expiry_date?: Date | null;\n  shipped_by?: string;\n  shipped_by_address?: string;\n  shipped_by_gstin?: string;\n  shipped_by_phone?: string;\n  vendor_code?: string;\n  shipped_to?: string;\n  shipped_to_address?: string;\n  shipped_to_gstin?: string;\n  bill_to?: string;\n  bill_to_address?: string;\n  bill_to_gstin?: string;\n  comments?: string;\n  total_items?: number;\n  total_quantity?: string;\n  total_gross_amount?: string;\n  uploaded_by?: string;\n}\n\ninterface DealsharePoItem {\n  line_number: number;\n  sku?: string;\n  product_name?: string;\n  hsn_code?: string;\n  quantity?: number;\n  mrp_tax_inclusive?: string;\n  buying_price?: string;\n  gst_percent?: string;\n  cess_percent?: string;\n  gross_amount?: string;\n}\n\nexport async function parseDealsharePO(buffer: Buffer, uploadedBy: string) {\n  try {\n    console.log(\"Processing Dealshare Excel file...\");\n    \n    const workbook = xlsx.read(buffer);\n    const sheetName = workbook.SheetNames[0];\n    const worksheet = workbook.Sheets[sheetName];\n    const jsonData = xlsx.utils.sheet_to_json(worksheet, { header: 1, raw: false });\n\n    console.log(`Dealshare Excel has ${jsonData.length} rows`);\n\n    // Parse header information from structured rows\n    let header: DealsharePoHeader = {\n      po_number: '',\n      uploaded_by: uploadedBy\n    };\n\n    // Extract PO Number from row 3 (index 2)\n    const poNumberRow = jsonData[2] as any[];\n    if (poNumberRow && poNumberRow[0]) {\n      header.po_number = String(poNumberRow[0]);\n    }\n\n    // Extract PO dates from rows 5, 7, 9 (indices 4, 6, 8) - but only if they are valid numbers\n    const dateRows = [\n      { row: jsonData[4], field: 'po_created_date' },\n      { row: jsonData[6], field: 'po_delivery_date' },\n      { row: jsonData[8], field: 'po_expiry_date' }\n    ];\n\n    for (const { row, field } of dateRows) {\n      if (row && row[0]) {\n        const dateValue = String(row[0]);\n        const excelDate = parseFloat(dateValue);\n        if (!isNaN(excelDate) && excelDate > 0 && excelDate < 100000) {\n          try {\n            (header as any)[field] = excelDateToJSDate(excelDate);\n          } catch (error) {\n            console.warn(`Failed to convert date for field ${field}:`, dateValue);\n            (header as any)[field] = null;\n          }\n        }\n      }\n    }\n\n    // Extract Shipped By info from rows 3-10\n    if (poNumberRow && poNumberRow[1]) {\n      header.shipped_by = String(poNumberRow[1]);\n    }\n    \n    // Combine address from multiple rows\n    const addressParts = [];\n    const addressRows = [jsonData[3], jsonData[4], jsonData[5], jsonData[6]];\n    for (const row of addressRows) {\n      if (row && row[1]) {\n        addressParts.push(String(row[1]).trim());\n      }\n    }\n    header.shipped_by_address = addressParts.filter(part => part).join(', ');\n\n    // Extract GSTIN and phone from specific rows\n    const gstinRow = jsonData[8] as any[];\n    if (gstinRow && gstinRow[1]) {\n      const gstinMatch = String(gstinRow[1]).match(/GSTIN:\\s*([^\\s]+)/);\n      if (gstinMatch) {\n        header.shipped_by_gstin = gstinMatch[1];\n      }\n    }\n\n    const phoneRow = jsonData[7] as any[];\n    if (phoneRow && phoneRow[1]) {\n      const phoneMatch = String(phoneRow[1]).match(/Contact No\\.:\\s*([^\\s]+)/);\n      if (phoneMatch) {\n        header.shipped_by_phone = phoneMatch[1];\n      }\n    }\n\n    // Extract Vendor Code from row 10\n    const vendorRow = jsonData[9] as any[];\n    if (vendorRow && vendorRow[1]) {\n      const vendorMatch = String(vendorRow[1]).match(/Vendor Code:\\s*([^\\s]+)/);\n      if (vendorMatch) {\n        header.vendor_code = vendorMatch[1];\n      }\n    }\n\n    // Extract Shipped To info from row 3 and following\n    const shippedToRow = jsonData[2] as any[];\n    if (shippedToRow && shippedToRow[3]) {\n      header.shipped_to = String(shippedToRow[3]);\n    }\n\n    // Combine Shipped To address\n    const shippedToAddressParts = [];\n    for (const row of addressRows) {\n      if (row && row[3]) {\n        shippedToAddressParts.push(String(row[3]).trim());\n      }\n    }\n    header.shipped_to_address = shippedToAddressParts.filter(part => part).join(', ');\n\n    // Extract Shipped To GSTIN\n    const shippedToGstinRow = jsonData[5] as any[];\n    if (shippedToGstinRow && shippedToGstinRow[3]) {\n      const gstinMatch = String(shippedToGstinRow[3]).match(/GSTIN:\\s*([^\\s]+)/);\n      if (gstinMatch) {\n        header.shipped_to_gstin = gstinMatch[1];\n      }\n    }\n\n    // Extract Bill To info from row 3 and following\n    const billToRow = jsonData[2] as any[];\n    if (billToRow && billToRow[7]) {\n      header.bill_to = String(billToRow[7]);\n    }\n\n    // Combine Bill To address\n    const billToAddressParts = [];\n    for (const row of addressRows) {\n      if (row && row[7]) {\n        billToAddressParts.push(String(row[7]).trim());\n      }\n    }\n    header.bill_to_address = billToAddressParts.filter(part => part).join(', ');\n\n    // Extract Bill To GSTIN\n    const billToGstinRow = jsonData[6] as any[];\n    if (billToGstinRow && billToGstinRow[7]) {\n      const gstinMatch = String(billToGstinRow[7]).match(/GSTIN:\\s*([^\\s]+)/);\n      if (gstinMatch) {\n        header.bill_to_gstin = gstinMatch[1];\n      }\n    }\n\n    // Extract Comments from row 11\n    const commentsRow = jsonData[10] as any[];\n    if (commentsRow && commentsRow[0]) {\n      const commentMatch = String(commentsRow[0]).match(/Comments:\\s*(.+)/);\n      if (commentMatch) {\n        header.comments = commentMatch[1];\n      }\n    }\n\n    // Parse line items starting from row 13 (index 12)\n    // Row 12 contains headers: SKU, Product Name, GST%, CESS%, HSN Code (Units), Quantity, MRP (Tax Inclusive), '', Buying Price, Gross Amount\n    const lines: DealsharePoItem[] = [];\n    let totalQuantity = 0;\n    let totalGrossAmount = 0;\n\n    for (let i = 12; i < jsonData.length; i++) {\n      const row = jsonData[i] as any[];\n      if (!row || row.length < 6) continue;\n\n      const sku = row[0];\n      const productName = row[1];\n      const gstPercent = row[2];\n      const cessPercent = row[3];\n      const hsnCode = row[4];\n      const quantity = row[5];\n      const mrpTaxInclusive = row[6];\n      const buyingPrice = row[8]; // Skip empty column at index 7\n      const grossAmount = row[9];\n\n      if (!sku || !quantity) continue;\n      \n      // Skip total/summary rows or invalid data\n      const skuStr = String(sku).toLowerCase().trim();\n      const productStr = String(productName || '').toLowerCase().trim();\n      if (skuStr.includes('total') || productStr.includes('total') || \n          skuStr.startsWith('total sku') || skuStr === '' || \n          productStr === '' || productStr === '...') continue;\n\n      const line: DealsharePoItem = {\n        line_number: i - 11, // Adjust for header rows\n        sku: String(sku).trim(),\n        product_name: String(productName || '').trim(),\n        hsn_code: String(hsnCode || '').trim(),\n        quantity: parseInt(String(quantity || '0')) || 0,\n        mrp_tax_inclusive: String(parseFloat(String(mrpTaxInclusive || '0')).toFixed(2)),\n        buying_price: String(parseFloat(String(buyingPrice || '0')).toFixed(2)),\n        gst_percent: String(parseFloat(String(gstPercent || '0')).toFixed(2)),\n        cess_percent: String(parseFloat(String(cessPercent || '0')).toFixed(2)),\n        gross_amount: String(parseFloat(String(grossAmount || '0')).toFixed(2))\n      };\n\n      // Additional filter check after line creation\n      if (line.sku?.includes('Total SKU') || line.sku?.toLowerCase().includes('total')) {\n        console.log('Skipping total row after parsing:', line.sku);\n        continue;\n      }\n      \n      lines.push(line);\n\n      // Calculate totals\n      totalQuantity += line.quantity || 0;\n      totalGrossAmount += parseFloat(line.gross_amount || '0');\n\n      console.log(`Parsed Dealshare line item ${line.line_number}:`, {\n        sku: line.sku,\n        product_name: line.product_name?.substring(0, 50) + '...',\n        quantity: line.quantity,\n        gross_amount: line.gross_amount\n      });\n    }\n\n    // Update header totals\n    header.total_items = lines.length;\n    header.total_quantity = totalQuantity.toString();\n    header.total_gross_amount = totalGrossAmount.toFixed(2);\n\n    console.log(\"Dealshare PO parsed successfully:\", {\n      po_number: header.po_number,\n      total_items: header.total_items,\n      total_quantity: header.total_quantity,\n      total_gross_amount: header.total_gross_amount\n    });\n\n    return {\n      header,\n      lines,\n      totalItems: lines.length,\n      totalQuantity,\n      totalAmount: totalGrossAmount.toFixed(2),\n      detectedVendor: 'dealshare'\n    };\n\n  } catch (error) {\n    console.error(\"Error parsing Dealshare PO:\", error);\n    throw new Error(`Failed to parse Dealshare file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nfunction excelDateToJSDate(excelDate: number): Date {\n  // Excel date is days since 1900-01-01, but Excel incorrectly treats 1900 as a leap year\n  // Adjusted for the correct calculation\n  const epochDiff = 25568; // Corrected difference \n  const millisecondsPerDay = 86400000;\n  const jsDate = new Date((excelDate - epochDiff) * millisecondsPerDay);\n  \n  // If the result is in 1900s, it's likely just a placeholder. Return a reasonable default\n  if (jsDate.getFullYear() < 1950) {\n    return new Date(); // Return current date as fallback\n  }\n  \n  return jsDate;\n}","size_bytes":9519},"examine_zomato.js":{"content":"import XLSX from 'xlsx';\nimport fs from 'fs';\n\n// Read the Zomato Excel file\nconst filePath = 'attached_assets/Zomoto Po_1754821079870.xlsx';\nconst workbook = XLSX.readFile(filePath);\n\nconsole.log('Sheet Names:', workbook.SheetNames);\n\n// Get the first sheet\nconst sheetName = workbook.SheetNames[0];\nconst worksheet = workbook.Sheets[sheetName];\n\n// Convert to JSON to see the structure\nconst jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });\n\nconsole.log('\\n=== FIRST 20 ROWS OF DATA ===');\njsonData.slice(0, 20).forEach((row, index) => {\n  console.log(`Row ${index + 1}:`, row);\n});\n\nconsole.log('\\n=== LOOKING FOR HEADER ROW ===');\n// Look for potential header row\njsonData.slice(0, 15).forEach((row, index) => {\n  if (row.some(cell => typeof cell === 'string' && \n    (cell.toLowerCase().includes('product') || \n     cell.toLowerCase().includes('item') || \n     cell.toLowerCase().includes('quantity') ||\n     cell.toLowerCase().includes('rate') ||\n     cell.toLowerCase().includes('amount')))) {\n    console.log(`Potential header at Row ${index + 1}:`, row);\n  }\n});\n\nconsole.log('\\n=== PO HEADER INFORMATION ===');\n// Look for PO details\njsonData.slice(0, 15).forEach((row, index) => {\n  if (row.some(cell => typeof cell === 'string' && \n    (cell.toLowerCase().includes('po') || \n     cell.toLowerCase().includes('order') || \n     cell.toLowerCase().includes('date') ||\n     cell.toLowerCase().includes('vendor') ||\n     cell.toLowerCase().includes('bill')))) {\n    console.log(`PO Info at Row ${index + 1}:`, row);\n  }\n});\n\nconsole.log('\\n=== FULL SHEET RANGE ===');\nconsole.log('Sheet range:', worksheet['!ref']);","size_bytes":1648},"server/zomato-parser.ts":{"content":"import xlsx from 'xlsx';\n\ninterface ZomatoPoHeader {\n  po_number: string;\n  po_date?: Date | null;\n  expected_delivery_date?: Date | null;\n  account_number?: string;\n  vendor_id?: string;\n  bill_from_name?: string;\n  bill_from_address?: string;\n  bill_from_gstin?: string;\n  bill_from_phone?: string;\n  bill_to_name?: string;\n  bill_to_address?: string;\n  bill_to_gstin?: string;\n  ship_from_name?: string;\n  ship_from_address?: string;\n  ship_from_gstin?: string;\n  ship_to_name?: string;\n  ship_to_address?: string;\n  ship_to_gstin?: string;\n  total_items?: number;\n  total_quantity?: string;\n  grand_total?: string;\n  total_tax_amount?: string;\n  uploaded_by?: string;\n}\n\ninterface ZomatoPoItem {\n  line_number: number;\n  product_number?: string;\n  product_name?: string;\n  hsn_code?: string;\n  quantity_ordered?: string;\n  price_per_unit?: string;\n  uom?: string;\n  gst_rate?: string;\n  total_tax_amount?: string;\n  line_total?: string;\n}\n\nexport async function parseZomatoPO(buffer: Buffer, uploadedBy: string) {\n  try {\n    console.log(\"Processing Zomato Excel file...\");\n    \n    const workbook = xlsx.read(buffer);\n    const sheetName = workbook.SheetNames[0];\n    const worksheet = workbook.Sheets[sheetName];\n    const jsonData = xlsx.utils.sheet_to_json(worksheet, { header: 1, raw: false });\n\n    console.log(`Zomato Excel has ${jsonData.length} rows`);\n\n    // Parse header information from structured rows\n    let header: ZomatoPoHeader = {\n      po_number: '',\n      uploaded_by: uploadedBy\n    };\n\n    // Extract PO information from row 4 (index 3)\n    const poInfoRow = jsonData[3] as any[];\n    if (poInfoRow && poInfoRow.length > 0) {\n      // Extract PO Number (first cell contains \"Purchase Order Number\\nZHPGJ26-PO-2009516\")\n      const poNumberCell = poInfoRow[0];\n      if (poNumberCell && typeof poNumberCell === 'string') {\n        const poMatch = poNumberCell.match(/Purchase Order Number\\s*\\n?(.+)/i);\n        if (poMatch) {\n          header.po_number = poMatch[1].trim();\n        }\n      }\n\n      // Extract PO Date (4th cell contains \"Purchase Order Date\\n06-Aug-2025\")\n      const poDateCell = poInfoRow[3];\n      if (poDateCell && typeof poDateCell === 'string') {\n        const dateMatch = poDateCell.match(/Purchase Order Date\\s*\\n?(.+)/i);\n        if (dateMatch) {\n          header.po_date = parseDate(dateMatch[1].trim());\n        }\n      }\n\n      // Extract Expected Delivery Date (8th cell)\n      const deliveryDateCell = poInfoRow[7];\n      if (deliveryDateCell && typeof deliveryDateCell === 'string') {\n        const deliveryMatch = deliveryDateCell.match(/Expected Delivery Date\\s*\\n?(.+)/i);\n        if (deliveryMatch) {\n          header.expected_delivery_date = parseDate(deliveryMatch[1].trim());\n        }\n      }\n\n      // Extract Account Number (14th cell)\n      const accountCell = poInfoRow[13];\n      if (accountCell && typeof accountCell === 'string') {\n        const accountMatch = accountCell.match(/Account Number\\s*\\n?(.+)/i);\n        if (accountMatch) {\n          header.account_number = accountMatch[1].trim();\n        }\n      }\n\n      // Extract Vendor ID (18th cell)\n      const vendorCell = poInfoRow[17];\n      if (vendorCell && typeof vendorCell === 'string') {\n        const vendorMatch = vendorCell.match(/Vendor Id\\s*\\n?(.+)/i);\n        if (vendorMatch) {\n          header.vendor_id = vendorMatch[1].trim();\n        }\n      }\n    }\n\n    // Extract billing/shipping info from rows 2-3\n    const billFromRow = jsonData[1] as any[];\n    const billToRow = jsonData[2] as any[];\n\n    if (billFromRow && billFromRow[0]) {\n      const billFromText = billFromRow[0];\n      if (typeof billFromText === 'string') {\n        const lines = billFromText.split('\\n');\n        header.bill_from_name = lines[1]?.trim() || '';\n        header.bill_from_address = lines[2]?.trim() || '';\n        const gstinMatch = billFromText.match(/GSTIN\\s*:\\s*([^\\s]+)/);\n        if (gstinMatch) header.bill_from_gstin = gstinMatch[1];\n        const phoneMatch = billFromText.match(/Phone\\s*:\\s*([^\\s]+)/);\n        if (phoneMatch) header.bill_from_phone = phoneMatch[1];\n      }\n    }\n\n    if (billToRow && billToRow[0]) {\n      const billToText = billToRow[0];\n      if (typeof billToText === 'string') {\n        const lines = billToText.split('\\n');\n        header.bill_to_name = lines[1]?.trim() || '';\n        header.bill_to_address = lines[2]?.trim() || '';\n        const gstinMatch = billToText.match(/GSTIN\\s*:\\s*([^\\s]+)/);\n        if (gstinMatch) header.bill_to_gstin = gstinMatch[1];\n      }\n    }\n\n    // Parse line items starting from row 6 (index 5)\n    const lines: ZomatoPoItem[] = [];\n    let totalQuantity = 0;\n    let totalValue = 0;\n    let totalTax = 0;\n\n    // Row 5 contains headers, data starts from row 6\n    for (let i = 5; i < jsonData.length; i++) {\n      const row = jsonData[i] as any[];\n      if (!row || row.length < 10) continue;\n\n      const productNumber = row[0];\n      const productName = row[1];\n      const hsnCode = row[5];\n      const quantity = row[8];\n      const pricePerUnit = row[11];\n      const uom = row[13];\n      const gstRate = row[15];\n      const taxAmount = row[17];\n      const lineTotal = row[18];\n\n      if (!productNumber || !quantity) continue;\n\n      const line: ZomatoPoItem = {\n        line_number: i - 4, // Adjust for header rows\n        product_number: String(productNumber),\n        product_name: String(productName || ''),\n        hsn_code: String(hsnCode || ''),\n        quantity_ordered: parseFloat(String(quantity || '0')).toFixed(2),\n        price_per_unit: parseFloat(String(pricePerUnit || '0')).toFixed(2),\n        uom: String(uom || ''),\n        gst_rate: parseFloat(String(gstRate || '0')).toFixed(4),\n        total_tax_amount: parseFloat(String(taxAmount || '0')).toFixed(2),\n        line_total: parseLineTotal(lineTotal)\n      };\n\n      lines.push(line);\n\n      // Calculate totals\n      totalQuantity += parseFloat(line.quantity_ordered || '0');\n      totalValue += parseFloat(line.line_total || '0');\n      totalTax += parseFloat(line.total_tax_amount || '0');\n\n      console.log(`Parsed Zomato line item ${line.line_number}:`, {\n        product_number: line.product_number,\n        product_name: line.product_name?.substring(0, 50) + '...',\n        quantity: line.quantity_ordered,\n        line_total: line.line_total\n      });\n    }\n\n    // Update header totals\n    header.total_items = lines.length;\n    header.total_quantity = totalQuantity.toFixed(2);\n    header.grand_total = totalValue.toFixed(2);\n    header.total_tax_amount = totalTax.toFixed(2);\n\n    console.log(\"Zomato PO parsed successfully:\", {\n      po_number: header.po_number,\n      total_items: header.total_items,\n      total_quantity: header.total_quantity,\n      grand_total: header.grand_total\n    });\n\n    return {\n      header,\n      lines,\n      totalItems: lines.length,\n      totalQuantity,\n      totalAmount: totalValue.toFixed(2),\n      detectedVendor: 'zomato'\n    };\n\n  } catch (error) {\n    console.error(\"Error parsing Zomato PO:\", error);\n    throw new Error(`Failed to parse Zomato file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nfunction parseDate(dateStr: string): Date | null {\n  if (!dateStr) return null;\n  \n  try {\n    // Handle DD-MMM-YYYY format (e.g., \"06-Aug-2025\")\n    const parts = dateStr.split('-');\n    if (parts.length === 3) {\n      const day = parseInt(parts[0]);\n      const monthStr = parts[1];\n      const year = parseInt(parts[2]);\n      \n      const monthMap: { [key: string]: number } = {\n        'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n        'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n      };\n      \n      const month = monthMap[monthStr];\n      if (month !== undefined) {\n        return new Date(year, month, day);\n      }\n    }\n    \n    // Fallback to Date.parse\n    const parsed = Date.parse(dateStr);\n    return isNaN(parsed) ? null : new Date(parsed);\n  } catch (error) {\n    console.error(\"Error parsing date:\", dateStr, error);\n    return null;\n  }\n}\n\nfunction parseLineTotal(total: any): string {\n  if (!total) return '0.00';\n  \n  // Convert to string and remove commas\n  let totalStr = String(total).replace(/,/g, '');\n  \n  // Parse as float\n  const parsed = parseFloat(totalStr);\n  return isNaN(parsed) ? '0.00' : parsed.toFixed(2);\n}","size_bytes":8336},"scripts/analyze-excel.js":{"content":"import XLSX from 'xlsx';\nimport fs from 'fs';\n\n// Read the Excel file\nconst filePath = 'attached_assets/Sales_ASIN_Manufacturing_Retail_India_Custom_1-8-2025_8-8-2025_1754829343165.xlsx';\n\ntry {\n  const workbook = XLSX.readFile(filePath);\n  const sheetName = workbook.SheetNames[0];\n  const worksheet = workbook.Sheets[sheetName];\n  \n  // Convert to JSON to see the structure\n  const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n  \n  console.log('Sheet Names:', workbook.SheetNames);\n  console.log('First 10 rows:');\n  console.log(JSON.stringify(jsonData.slice(0, 10), null, 2));\n  \n  // Get headers\n  const headers = jsonData[0];\n  console.log('\\nHeaders:');\n  console.log(headers);\n  \n  // Sample data row\n  console.log('\\nSample data row:');\n  console.log(jsonData[1]);\n  \n} catch (error) {\n  console.error('Error reading Excel file:', error.message);\n}","size_bytes":874},"server/amazon-secondary-sales-parser.ts":{"content":"import XLSX from 'xlsx';\nimport { InsertScAmJwDaily, InsertScAmJwRange, InsertScAmJmDaily, InsertScAmJmRange } from '@shared/schema';\n\nexport interface ParsedAmazonSecondarySalesData {\n  platform: string;\n  businessUnit: string;\n  periodType: string;\n  reportDate?: Date;\n  periodStart?: Date;\n  periodEnd?: Date;\n  items: (InsertScAmJwDaily | InsertScAmJwRange | InsertScAmJmDaily | InsertScAmJmRange)[];\n  totalItems: number;\n  summary: {\n    totalOrderedRevenue: number;\n    totalOrderedUnits: number;\n    totalShippedRevenue: number;\n    totalShippedUnits: number;\n    totalCustomerReturns: number;\n  };\n}\n\nexport function parseAmazonSecondarySales(\n  buffer: Buffer, \n  platform: string, \n  businessUnit: string, \n  periodType: string,\n  startDate?: string,\n  endDate?: string,\n  attachmentPath?: string\n): ParsedAmazonSecondarySalesData {\n  try {\n    const workbook = XLSX.read(buffer, { type: 'buffer' });\n    const sheetName = workbook.SheetNames[0];\n    const worksheet = workbook.Sheets[sheetName];\n    \n    // Convert to JSON with proper typing\n    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];\n    \n    if (!jsonData || jsonData.length === 0) {\n      throw new Error('No data found in the Excel file');\n    }\n    \n    // Find the actual headers row (should be row with \"ASIN\", \"Product Title\", etc.)\n    let headerRowIndex = -1;\n    for (let i = 0; i < jsonData.length; i++) {\n      const row = jsonData[i];\n      if (row && Array.isArray(row) && row.includes('ASIN') && row.includes('Product Title')) {\n        headerRowIndex = i;\n        break;\n      }\n    }\n    \n    if (headerRowIndex === -1) {\n      throw new Error('Could not find headers row with ASIN and Product Title');\n    }\n    \n    const headers = jsonData[headerRowIndex] as string[];\n    const dataRows = jsonData.slice(headerRowIndex + 1) as any[][];\n    \n    // Map column indices\n    const colIndices = {\n      asin: headers.indexOf('ASIN'),\n      productTitle: headers.indexOf('Product Title'),\n      brand: headers.indexOf('Brand'),\n      orderedRevenue: headers.indexOf('Ordered Revenue'),\n      orderedUnits: headers.indexOf('Ordered Units'),\n      shippedRevenue: headers.indexOf('Shipped Revenue'),\n      shippedCogs: headers.indexOf('Shipped COGS'),\n      shippedUnits: headers.indexOf('Shipped Units'),\n      customerReturns: headers.indexOf('Customer Returns')\n    };\n    \n    // Validate required columns exist\n    if (colIndices.asin === -1 || colIndices.productTitle === -1) {\n      throw new Error('Required columns ASIN or Product Title not found');\n    }\n    \n    const items: any[] = [];\n    let totalOrderedRevenue = 0;\n    let totalOrderedUnits = 0;\n    let totalShippedRevenue = 0;\n    let totalShippedUnits = 0;\n    let totalCustomerReturns = 0;\n    \n    // Parse data rows\n    for (const row of dataRows) {\n      if (!row || !Array.isArray(row) || row.length === 0 || !row[colIndices.asin]) continue;\n      \n      const orderedRevenue = parseFloat(String(row[colIndices.orderedRevenue] || '0')) || 0;\n      const orderedUnits = parseInt(String(row[colIndices.orderedUnits] || '0')) || 0;\n      const shippedRevenue = parseFloat(String(row[colIndices.shippedRevenue] || '0')) || 0;\n      const shippedUnits = parseInt(String(row[colIndices.shippedUnits] || '0')) || 0;\n      const customerReturns = parseInt(String(row[colIndices.customerReturns] || '0')) || 0;\n      \n      const item = {\n        asin: String(row[colIndices.asin] || '').trim(),\n        product_title: String(row[colIndices.productTitle] || '').trim(),\n        brand: String(row[colIndices.brand] || '').trim() || null,\n        ordered_revenue: orderedRevenue.toString(),\n        ordered_units: orderedUnits,\n        shipped_revenue: shippedRevenue.toString(),\n        shipped_cogs: (parseFloat(String(row[colIndices.shippedCogs] || '0')) || 0).toString(),\n        shipped_units: shippedUnits,\n        customer_returns: customerReturns,\n        attachment_path: attachmentPath || null\n      };\n      \n      // Add period-specific fields\n      if (periodType === 'daily') {\n        (item as any).report_date = new Date();\n      } else if (periodType === 'date-range' && startDate && endDate) {\n        (item as any).period_start = new Date(startDate);\n        (item as any).period_end = new Date(endDate);\n      }\n      \n      items.push(item);\n      \n      // Update totals\n      totalOrderedRevenue += orderedRevenue;\n      totalOrderedUnits += orderedUnits;\n      totalShippedRevenue += shippedRevenue;\n      totalShippedUnits += shippedUnits;\n      totalCustomerReturns += customerReturns;\n    }\n    \n    return {\n      platform,\n      businessUnit,\n      periodType,\n      reportDate: periodType === 'daily' ? new Date() : undefined,\n      periodStart: periodType === 'date-range' && startDate ? new Date(startDate) : undefined,\n      periodEnd: periodType === 'date-range' && endDate ? new Date(endDate) : undefined,\n      items,\n      totalItems: items.length,\n      summary: {\n        totalOrderedRevenue,\n        totalOrderedUnits,\n        totalShippedRevenue,\n        totalShippedUnits,\n        totalCustomerReturns\n      }\n    };\n    \n  } catch (error) {\n    console.error('Error parsing Amazon secondary sales file:', error);\n    throw new Error(`Failed to parse Amazon secondary sales file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}","size_bytes":5373},"server/swiggy-secondary-sales-parser.ts":{"content":"import { parse } from 'csv-parse';\nimport { InsertSwiggySecondarySalesItem } from '@shared/schema';\n\nexport interface SwiggySecondaryParseResult {\n  success: boolean;\n  data?: InsertSwiggySecondarySalesItem[];\n  error?: string;\n  totalItems?: number;\n}\n\nexport function parseSwiggySecondaryData(csvContent: string, reportDate: Date, periodStart?: Date, periodEnd?: Date): Promise<SwiggySecondaryParseResult> {\n  return new Promise((resolve) => {\n    const results: InsertSwiggySecondarySalesItem[] = [];\n    let hasError = false;\n    let errorMessage = '';\n\n    const parser = parse({\n      columns: true,\n      skip_empty_lines: true,\n      trim: true\n    });\n\n    parser.on('readable', function() {\n      let record;\n      while ((record = parser.read()) !== null) {\n        try {\n          // Parse ordered date from CSV (expected format: YYYY-MM-DD)\n          const dateStr = record['ORDERED_DATE'];\n          let parsedDate: Date;\n          \n          if (dateStr) {\n            parsedDate = new Date(dateStr);\n          } else {\n            parsedDate = new Date();\n          }\n\n          // Validate date\n          if (isNaN(parsedDate.getTime())) {\n            console.warn(`Invalid date found: ${dateStr}, skipping row`);\n            return;\n          }\n\n          const item: InsertSwiggySecondarySalesItem = {\n            report_date: reportDate,\n            brand: record['BRAND'] || null,\n            ordered_date: parsedDate,\n            city: record['CITY'] || null,\n            area_name: record['AREA_NAME'] || null,\n            store_id: record['STORE_ID'] || null,\n            l1_category: record['L1_CATEGORY'] || null,\n            l2_category: record['L2_CATEGORY'] || null,\n            l3_category: record['L3_CATEGORY'] || null,\n            product_name: record['PRODUCT_NAME'] || null,\n            variant: record['VARIANT'] || null,\n            item_code: record['ITEM_CODE'] || null,\n            combo: record['COMBO'] || null,\n            combo_item_code: record['COMBO_ITEM_CODE'] || null,\n            combo_units_sold: record['COMBO_UNITS_SOLD'] || null,\n            base_mrp: record['BASE_MRP'] || null,\n            units_sold: record['UNITS_SOLD'] || null,\n            gmv: record['GMV'] || null,\n            attachment_path: null // Will be set by calling function\n          };\n\n          // Add period information for range reports\n          if (periodStart && periodEnd) {\n            (item as any).period_start = periodStart;\n            (item as any).period_end = periodEnd;\n          }\n\n          results.push(item);\n        } catch (error) {\n          console.error('Error parsing Swiggy secondary sales row:', error);\n          hasError = true;\n          errorMessage = `Failed to parse row: ${error instanceof Error ? error.message : 'Unknown error'}`;\n        }\n      }\n    });\n\n    parser.on('error', function(err) {\n      console.error('CSV parsing error:', err);\n      hasError = true;\n      errorMessage = `CSV parsing failed: ${err.message}`;\n    });\n\n    parser.on('end', function() {\n      if (hasError && results.length === 0) {\n        resolve({\n          success: false,\n          error: errorMessage\n        });\n      } else {\n        resolve({\n          success: true,\n          data: results,\n          totalItems: results.length\n        });\n      }\n    });\n\n    parser.write(csvContent);\n    parser.end();\n  });\n}","size_bytes":3368},"client/src/pages/secondary-sales.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Upload,\n  FileText,\n  CheckCircle,\n  AlertCircle,\n  Eye,\n  Database,\n  ArrowRight,\n  ArrowLeft,\n  ShoppingCart,\n  Calendar,\n  RotateCcw,\n} from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface ParsedSecondarySalesData {\n  platform?: string;\n  businessUnit?: string;\n  periodType?: string;\n  reportDate?: string;\n  periodStart?: string;\n  periodEnd?: string;\n  totalItems?: number;\n  summary?: {\n    // Amazon fields\n    totalOrderedRevenue?: number;\n    totalOrderedUnits?: number;\n    totalShippedRevenue?: number;\n    totalShippedUnits?: number;\n    totalCustomerReturns?: number;\n    // Common fields for new platforms\n    totalRecords?: number;\n    totalSalesValue?: number;\n    uniqueProducts?: number;\n    dateRange?: string;\n  };\n  items?: any[];\n}\n\nconst PLATFORMS = [\n  {\n    id: \"amazon\",\n    name: \"Amazon\",\n    description: \"Upload Amazon secondary sales data\",\n    icon: ShoppingCart,\n  },\n  {\n    id: \"zepto\",\n    name: \"Zepto\",\n    description: \"Upload Zepto secondary sales data\",\n    icon: ShoppingCart,\n  },\n  {\n    id: \"blinkit\",\n    name: \"Blinkit\",\n    description: \"Upload Blinkit secondary sales data\",\n    icon: ShoppingCart,\n  },\n  {\n    id: \"swiggy\",\n    name: \"Swiggy\",\n    description: \"Upload Swiggy secondary sales data\",\n    icon: ShoppingCart,\n  },\n  {\n    id: \"jiomartsale\",\n    name: \"Jio Mart Sale\",\n    description: \"Upload Jio Mart Sale secondary sales data\",\n    icon: ShoppingCart,\n  },\n  {\n    id: \"jiomartcancel\",\n    name: \"Jio Mart Cancel\",\n    description: \"Upload Jio Mart Cancel secondary sales data\",\n    icon: ShoppingCart,\n  },\n  {\n    id: \"bigbasket\",\n    name: \"BigBasket\",\n    description: \"Upload BigBasket secondary sales data\",\n    icon: ShoppingCart,\n  },\n  {\n    id: \"flipkart-grocery\",\n    name: \"Flipkart Grocery\",\n    description: \"Upload Flipkart Grocery secondary sales data (2-month auto range)\",\n    icon: ShoppingCart,\n  },\n];\n\nconst BUSINESS_UNITS = [\n  {\n    id: \"jivo-wellness\",\n    name: \"Jivo Wellness\",\n    description: \"Jivo Wellness products sales data\",\n  },\n  {\n    id: \"jivo-mart\",\n    name: \"Jivo Mart\", \n    description: \"Jivo Mart products sales data\",\n  },\n  {\n    id: \"marketplace\",\n    name: \"MarketPlace\",\n    description: \"MarketPlace products sales data\",\n  },\n  {\n    id: \"chirag\",\n    name: \"Chirag\",\n    description: \"Chirag business unit sales data\",\n  },\n];\n\nconst PERIOD_TYPES = [\n  {\n    id: \"daily\",\n    name: \"Daily Report\",\n    description: \"Upload daily sales report\",\n    icon: Calendar,\n  },\n  {\n    id: \"date-range\",\n    name: \"Date Range Report\",\n    description: \"Upload sales report for a specific date range\",\n    icon: Calendar,\n  },\n  {\n    id: \"2-month\",\n    name: \"2-Month Auto Range\",\n    description: \"Automatic 2-month rolling range (increments daily)\",\n    icon: RotateCcw,\n  },\n];\n\nexport default function SecondarySales() {\n  const [currentStep, setCurrentStep] = useState<\n    \"platform\" | \"business-unit\" | \"period-type\" | \"date-range\" | \"upload\" | \"preview\"\n  >(\"platform\");\n  const [selectedPlatform, setSelectedPlatform] = useState<string>(\"\");\n  const [selectedBusinessUnit, setSelectedBusinessUnit] = useState<string>(\"\");\n  const [selectedPeriodType, setSelectedPeriodType] = useState<string>(\"\");\n  const [dateRange, setDateRange] = useState<{ startDate: string; endDate: string }>({\n    startDate: \"\",\n    endDate: \"\"\n  });\n  const [file, setFile] = useState<File | null>(null);\n  const [parsedData, setParsedData] = useState<ParsedSecondarySalesData | null>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const selectedPlatformData = PLATFORMS.find((p) => p.id === selectedPlatform);\n  const selectedBusinessUnitData = BUSINESS_UNITS.find((bu) => bu.id === selectedBusinessUnit);\n\n  // Filter period types based on platform requirements\n  const getAvailablePeriodTypes = () => {\n    if (selectedPlatform === \"flipkart-grocery\") {\n      return PERIOD_TYPES.filter(pt => pt.id === \"2-month\");\n    }\n    return PERIOD_TYPES.filter(pt => pt.id !== \"2-month\");\n  };\n\n  // Filter business units based on platform requirements\n  const getAvailableBusinessUnits = () => {\n    if (selectedPlatform === \"amazon\") {\n      return BUSINESS_UNITS.filter(bu => bu.id === \"jivo-wellness\" || bu.id === \"jivo-mart\");\n    }\n    // Flipkart Grocery supports Jivo Mart and Chirag\n    if (selectedPlatform === \"flipkart-grocery\") {\n      return BUSINESS_UNITS.filter(bu => bu.id === \"jivo-mart\" || bu.id === \"chirag\");\n    }\n    // Other new platforms only support Jivo Mart\n    if ([\"zepto\", \"blinkit\", \"swiggy\", \"jiomartsale\", \"jiomartcancel\", \"bigbasket\"].includes(selectedPlatform)) {\n      return BUSINESS_UNITS.filter(bu => bu.id === \"jivo-mart\");\n    }\n    return BUSINESS_UNITS;\n  };\n\n  const previewMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"platform\", selectedPlatform);\n      formData.append(\"businessUnit\", selectedBusinessUnit);\n      formData.append(\"periodType\", selectedPeriodType);\n      if (selectedPeriodType === \"date-range\") {\n        formData.append(\"startDate\", dateRange.startDate);\n        formData.append(\"endDate\", dateRange.endDate);\n      } else if (selectedPeriodType === \"2-month\") {\n        // Auto-calculate 2-month range for Flipkart\n        const today = new Date();\n        const dayOfYear = Math.floor((today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));\n        \n        const startDate = new Date(today);\n        startDate.setMonth(startDate.getMonth() - 2);\n        startDate.setDate(startDate.getDate() + (dayOfYear % 30));\n        \n        const endDate = new Date(today);\n        endDate.setDate(endDate.getDate() + (dayOfYear % 30));\n        \n        formData.append(\"startDate\", startDate.toISOString().split('T')[0]);\n        formData.append(\"endDate\", endDate.toISOString().split('T')[0]);\n      }\n\n      const response = await fetch(\"/api/secondary-sales/preview\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to preview file\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setParsedData(data);\n      setCurrentStep(\"preview\");\n      toast({\n        title: \"File parsed successfully\",\n        description: `Found ${data.totalItems || 0} items`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to parse file\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async () => {\n      if (!file || !selectedPlatform || !selectedBusinessUnit) {\n        throw new Error(\"Missing required data\");\n      }\n\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"platform\", selectedPlatform);\n      formData.append(\"businessUnit\", selectedBusinessUnit);\n      formData.append(\"periodType\", selectedPeriodType);\n      if (selectedPeriodType === \"date-range\") {\n        formData.append(\"startDate\", dateRange.startDate);\n        formData.append(\"endDate\", dateRange.endDate);\n      } else if (selectedPeriodType === \"2-month\") {\n        // Auto-calculate 2-month range for Flipkart\n        const today = new Date();\n        const dayOfYear = Math.floor((today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));\n        \n        const startDate = new Date(today);\n        startDate.setMonth(startDate.getMonth() - 2);\n        startDate.setDate(startDate.getDate() + (dayOfYear % 30));\n        \n        const endDate = new Date(today);\n        endDate.setDate(endDate.getDate() + (dayOfYear % 30));\n        \n        formData.append(\"startDate\", startDate.toISOString().split('T')[0]);\n        formData.append(\"endDate\", endDate.toISOString().split('T')[0]);\n      }\n\n      const response = await fetch(`/api/secondary-sales/import/${selectedPlatform}`, {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        if (response.status === 409) {\n          // Handle duplicate file error specifically\n          throw new Error(`Duplicate File: ${error.message || \"This file has already been imported into the database.\"}`);\n        }\n        throw new Error(error.error || \"Failed to import data\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Data imported successfully\",\n        description: `Imported ${data.totalItems || 0} items for ${selectedPlatformData?.name}`,\n      });\n      \n      // Reset form\n      setCurrentStep(\"platform\");\n      setSelectedPlatform(\"\");\n      setSelectedBusinessUnit(\"\");\n      setSelectedPeriodType(\"\");\n      setDateRange({ startDate: \"\", endDate: \"\" });\n      setFile(null);\n      setParsedData(null);\n      \n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: [`/api/secondary-sales/${selectedPlatform}`] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to import data\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = async (uploadedFile: File) => {\n    if (!uploadedFile) return;\n    \n    setFile(uploadedFile);\n    await previewMutation.mutateAsync(uploadedFile);\n  };\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    const files = e.dataTransfer.files;\n    if (files && files[0]) {\n      handleFileUpload(files[0]);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files[0]) {\n      handleFileUpload(files[0]);\n    }\n  };\n\n  const goBack = () => {\n    switch (currentStep) {\n      case \"business-unit\":\n        setCurrentStep(\"platform\");\n        setSelectedPlatform(\"\");\n        break;\n      case \"period-type\":\n        setCurrentStep(\"business-unit\");\n        setSelectedBusinessUnit(\"\");\n        break;\n      case \"date-range\":\n        setCurrentStep(\"period-type\");\n        setSelectedPeriodType(\"\");\n        break;\n      case \"upload\":\n        if (selectedPeriodType === \"date-range\") {\n          setCurrentStep(\"date-range\");\n        } else {\n          setCurrentStep(\"period-type\");\n        }\n        break;\n      case \"preview\":\n        setCurrentStep(\"upload\");\n        setFile(null);\n        setParsedData(null);\n        break;\n    }\n  };\n\n  const goToPlatformSelection = () => {\n    setCurrentStep(\"platform\");\n    setSelectedPlatform(\"\");\n    setSelectedBusinessUnit(\"\");\n    setSelectedPeriodType(\"\");\n    setDateRange({ startDate: \"\", endDate: \"\" });\n    setFile(null);\n    setParsedData(null);\n  };\n\n  return (\n    <div className=\"container mx-auto py-4 sm:py-8 px-4 max-h-screen overflow-y-auto\" style={{scrollbarWidth: 'thin'}}>\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-6 sm:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold mb-2\">Secondary Sales</h1>\n          <p className=\"text-sm sm:text-base text-muted-foreground\">\n            Upload and manage secondary sales data from various platforms\n          </p>\n        </div>\n\n        {/* Progress Steps */}\n        <div className=\"mb-6 sm:mb-8\">\n          <div className=\"flex items-center justify-center gap-1 sm:gap-2 flex-wrap overflow-x-auto pb-2\">\n            {/* Step 1: Platform */}\n            <div className={`flex items-center space-x-1 sm:space-x-2 ${currentStep === \"platform\" ? \"text-blue-600\" : [\"business-unit\", \"period-type\", \"date-range\", \"upload\", \"preview\"].includes(currentStep) ? \"text-green-600\" : \"text-gray-400\"}`}>\n              <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center text-xs sm:text-sm font-medium ${currentStep === \"platform\" ? \"bg-blue-100 text-blue-600\" : [\"business-unit\", \"period-type\", \"date-range\", \"upload\", \"preview\"].includes(currentStep) ? \"bg-green-100 text-green-600\" : \"bg-gray-100\"}`}>\n                1\n              </div>\n              <span className=\"text-xs sm:text-sm font-medium hidden xs:inline\">Platform</span>\n            </div>\n            <ArrowRight className=\"w-3 h-3 sm:w-4 sm:h-4 text-gray-400\" />\n            \n            {/* Step 2: Business Unit */}\n            <div className={`flex items-center space-x-1 sm:space-x-2 ${currentStep === \"business-unit\" ? \"text-blue-600\" : [\"period-type\", \"date-range\", \"upload\", \"preview\"].includes(currentStep) ? \"text-green-600\" : \"text-gray-400\"}`}>\n              <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center text-xs sm:text-sm font-medium ${currentStep === \"business-unit\" ? \"bg-blue-100 text-blue-600\" : [\"period-type\", \"date-range\", \"upload\", \"preview\"].includes(currentStep) ? \"bg-green-100 text-green-600\" : \"bg-gray-100\"}`}>\n                2\n              </div>\n              <span className=\"text-xs sm:text-sm font-medium hidden xs:inline\">Business</span>\n            </div>\n            <ArrowRight className=\"w-3 h-3 sm:w-4 sm:h-4 text-gray-400\" />\n            \n            {/* Step 3: Period Type */}\n            <div className={`flex items-center space-x-1 sm:space-x-2 ${currentStep === \"period-type\" ? \"text-blue-600\" : [\"date-range\", \"upload\", \"preview\"].includes(currentStep) ? \"text-green-600\" : \"text-gray-400\"}`}>\n              <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center text-xs sm:text-sm font-medium ${currentStep === \"period-type\" ? \"bg-blue-100 text-blue-600\" : [\"date-range\", \"upload\", \"preview\"].includes(currentStep) ? \"bg-green-100 text-green-600\" : \"bg-gray-100\"}`}>\n                3\n              </div>\n              <span className=\"text-xs sm:text-sm font-medium hidden xs:inline\">Period</span>\n            </div>\n            <ArrowRight className=\"w-3 h-3 sm:w-4 sm:h-4 text-gray-400\" />\n            \n            {/* Step 4: Date Range (conditional) */}\n            {selectedPeriodType === \"date-range\" && (\n              <>\n                <div className={`flex items-center space-x-1 sm:space-x-2 ${currentStep === \"date-range\" ? \"text-blue-600\" : [\"upload\", \"preview\"].includes(currentStep) ? \"text-green-600\" : \"text-gray-400\"}`}>\n                  <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center text-xs sm:text-sm font-medium ${currentStep === \"date-range\" ? \"bg-blue-100 text-blue-600\" : [\"upload\", \"preview\"].includes(currentStep) ? \"bg-green-100 text-green-600\" : \"bg-gray-100\"}`}>\n                    4\n                  </div>\n                  <span className=\"text-xs sm:text-sm font-medium hidden xs:inline\">Dates</span>\n                </div>\n                <ArrowRight className=\"w-3 h-3 sm:w-4 sm:h-4 text-gray-400\" />\n              </>\n            )}\n            \n            {/* Step Upload */}\n            <div className={`flex items-center space-x-1 sm:space-x-2 ${currentStep === \"upload\" ? \"text-blue-600\" : currentStep === \"preview\" ? \"text-green-600\" : \"text-gray-400\"}`}>\n              <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center text-xs sm:text-sm font-medium ${currentStep === \"upload\" ? \"bg-blue-100 text-blue-600\" : currentStep === \"preview\" ? \"bg-green-100 text-green-600\" : \"bg-gray-100\"}`}>\n                {selectedPeriodType === \"date-range\" ? \"5\" : \"4\"}\n              </div>\n              <span className=\"text-xs sm:text-sm font-medium hidden xs:inline\">Upload</span>\n            </div>\n            <ArrowRight className=\"w-3 h-3 sm:w-4 sm:h-4 text-gray-400\" />\n            \n            {/* Step Preview */}\n            <div className={`flex items-center space-x-1 sm:space-x-2 ${currentStep === \"preview\" ? \"text-blue-600\" : \"text-gray-400\"}`}>\n              <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center text-xs sm:text-sm font-medium ${currentStep === \"preview\" ? \"bg-blue-100 text-blue-600\" : \"bg-gray-100\"}`}>\n                {selectedPeriodType === \"date-range\" ? \"6\" : \"5\"}\n              </div>\n              <span className=\"text-xs sm:text-sm font-medium hidden xs:inline\">Preview</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Step 1: Platform Selection */}\n        {currentStep === \"platform\" && (\n          <Card className=\"max-h-[70vh] overflow-y-auto\" style={{scrollbarWidth: 'thin'}}>\n            <CardHeader>\n              <CardTitle>Select Platform</CardTitle>\n              <CardDescription>\n                Choose the platform for which you want to upload secondary sales data\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4\">\n                {PLATFORMS.map((platform) => (\n                  <div\n                    key={platform.id}\n                    className={`p-3 sm:p-4 border rounded-lg cursor-pointer transition-all duration-200 hover:bg-gray-50 hover:shadow-md ${\n                      selectedPlatform === platform.id\n                        ? \"border-blue-500 bg-blue-50 shadow-sm\"\n                        : \"border-gray-200\"\n                    }`}\n                    onClick={() => {\n                      setSelectedPlatform(platform.id);\n                      setCurrentStep(\"business-unit\");\n                    }}\n                  >\n                    <div className=\"flex flex-col sm:flex-row items-center sm:items-start space-y-2 sm:space-y-0 sm:space-x-3 text-center sm:text-left\">\n                      <platform.icon className=\"w-6 h-6 sm:w-8 sm:h-8 text-gray-600 flex-shrink-0\" />\n                      <div className=\"min-w-0\">\n                        <h3 className=\"font-medium text-sm sm:text-base truncate\">{platform.name}</h3>\n                        <p className=\"text-xs sm:text-sm text-gray-600 line-clamp-2\">{platform.description}</p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 2: Business Unit Selection */}\n        {currentStep === \"business-unit\" && (\n          <Card className=\"max-h-[70vh] overflow-y-auto\" style={{scrollbarWidth: 'thin'}}>\n            <CardHeader>\n              <CardTitle>Select Business Unit</CardTitle>\n              <CardDescription>\n                Choose the business unit for {selectedPlatformData?.name} secondary sales data\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4\">\n                {getAvailableBusinessUnits()\n                  .map((businessUnit) => (\n                  <div\n                    key={businessUnit.id}\n                    className={`p-4 border rounded-lg cursor-pointer transition-colors hover:bg-gray-50 ${\n                      selectedBusinessUnit === businessUnit.id\n                        ? \"border-blue-500 bg-blue-50\"\n                        : \"border-gray-200\"\n                    }`}\n                    onClick={() => setSelectedBusinessUnit(businessUnit.id)}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Database className=\"w-8 h-8 text-gray-600\" />\n                      <div>\n                        <h3 className=\"font-medium\">{businessUnit.name}</h3>\n                        <p className=\"text-sm text-gray-600\">{businessUnit.description}</p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"mt-6 flex justify-between\">\n                <Button\n                  variant=\"outline\"\n                  onClick={goBack}\n                  className=\"flex items-center space-x-2\"\n                >\n                  <ArrowLeft className=\"w-4 h-4\" />\n                  <span>Back</span>\n                </Button>\n                \n                {selectedBusinessUnit && (\n                  <Button\n                    onClick={() => setCurrentStep(\"period-type\")}\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <span>Continue</span>\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 3: Period Type Selection */}\n        {currentStep === \"period-type\" && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Select Period Type</CardTitle>\n              <CardDescription>\n                Choose whether you want to upload daily data or data for a specific date range\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4\">\n                {getAvailablePeriodTypes().map((periodType) => {\n                  const Icon = periodType.icon;\n                  return (\n                    <div\n                      key={periodType.id}\n                      className={`p-4 border rounded-lg cursor-pointer transition-colors hover:bg-gray-50 ${\n                        selectedPeriodType === periodType.id\n                          ? \"border-blue-500 bg-blue-50\"\n                          : \"border-gray-200\"\n                      }`}\n                      onClick={() => setSelectedPeriodType(periodType.id)}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Icon className=\"w-8 h-8 text-gray-600\" />\n                        <div>\n                          <h3 className=\"font-medium\">{periodType.name}</h3>\n                          <p className=\"text-sm text-gray-600\">{periodType.description}</p>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n              \n              <div className=\"mt-6 flex justify-between\">\n                <Button\n                  variant=\"outline\"\n                  onClick={goBack}\n                  className=\"flex items-center space-x-2\"\n                >\n                  <ArrowLeft className=\"w-4 h-4\" />\n                  <span>Back</span>\n                </Button>\n                \n                {selectedPeriodType && (\n                  <Button\n                    onClick={() => {\n                      if (selectedPeriodType === \"daily\" || selectedPeriodType === \"2-month\") {\n                        setCurrentStep(\"upload\");\n                      } else {\n                        setCurrentStep(\"date-range\");\n                      }\n                    }}\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <span>Continue</span>\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 4: Date Range Selection (conditional) */}\n        {currentStep === \"date-range\" && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Select Date Range</CardTitle>\n              <CardDescription>\n                Choose the start and end dates for your {selectedPlatformData?.name} data upload\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"start-date\">Start Date</Label>\n                  <Input\n                    id=\"start-date\"\n                    type=\"date\"\n                    value={dateRange.startDate}\n                    onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"end-date\">End Date</Label>\n                  <Input\n                    id=\"end-date\"\n                    type=\"date\"\n                    value={dateRange.endDate}\n                    onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}\n                    className=\"mt-1\"\n                  />\n                </div>\n              </div>\n              \n              {dateRange.startDate && dateRange.endDate && (\n                <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <p className=\"text-sm text-blue-800\">\n                    <strong>Selected Range:</strong> {new Date(dateRange.startDate).toLocaleDateString()} to {new Date(dateRange.endDate).toLocaleDateString()}\n                  </p>\n                </div>\n              )}\n              \n              <div className=\"mt-6 flex justify-between\">\n                <Button\n                  variant=\"outline\"\n                  onClick={goBack}\n                  className=\"flex items-center space-x-2\"\n                >\n                  <ArrowLeft className=\"w-4 h-4\" />\n                  <span>Back</span>\n                </Button>\n                \n                {dateRange.startDate && dateRange.endDate && (\n                  <Button\n                    onClick={() => setCurrentStep(\"upload\")}\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <span>Continue</span>\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step File Upload */}\n        {currentStep === \"upload\" && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Upload File</CardTitle>\n              <CardDescription>\n                Upload {selectedPlatformData?.name} secondary sales data for {selectedBusinessUnitData?.name}\n                {selectedPeriodType === \"daily\" && \" (Daily data)\"}\n                {selectedPeriodType === \"2-month\" && \" (2-Month Auto Range)\"}\n                {selectedPeriodType === \"date-range\" && dateRange.startDate && dateRange.endDate && \n                  ` (${new Date(dateRange.startDate).toLocaleDateString()} to ${new Date(dateRange.endDate).toLocaleDateString()})`}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div\n                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                  dragActive\n                    ? \"border-blue-500 bg-blue-50\"\n                    : \"border-gray-300 hover:border-gray-400\"\n                }`}\n                onDragEnter={handleDrag}\n                onDragLeave={handleDrag}\n                onDragOver={handleDrag}\n                onDrop={handleDrop}\n              >\n                <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <div className=\"space-y-2\">\n                  <p className=\"text-lg font-medium\">Drop your file here</p>\n                  <p className=\"text-gray-600\">\n                    or click to browse for CSV, Excel, or XML files\n                  </p>\n                </div>\n                <Input\n                  type=\"file\"\n                  accept=\".csv,.xlsx,.xls,.xml\"\n                  onChange={handleInputChange}\n                  className=\"hidden\"\n                  id=\"file-upload\"\n                />\n                <Label\n                  htmlFor=\"file-upload\"\n                  className=\"inline-block mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg cursor-pointer hover:bg-blue-700 transition-colors\"\n                >\n                  Browse Files\n                </Label>\n              </div>\n\n              <div className=\"mt-6 flex justify-between\">\n                <Button\n                  variant=\"outline\"\n                  onClick={goBack}\n                  className=\"flex items-center space-x-2\"\n                >\n                  <ArrowLeft className=\"w-4 h-4\" />\n                  <span>Back</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 4: Preview Data */}\n        {currentStep === \"preview\" && parsedData && (\n          <div className=\"space-y-4 sm:space-y-6\">\n            {/* Header Card */}\n            <Card>\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center space-x-2 text-lg sm:text-xl\">\n                  <Eye className=\"w-5 h-5\" />\n                  <span>Preview Data</span>\n                </CardTitle>\n                <CardDescription className=\"text-sm\">\n                  Review the parsed data before importing to {selectedPlatformData?.name} - {selectedBusinessUnitData?.name}\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            {/* Summary Stats */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base sm:text-lg\">Summary Statistics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n                  <div className=\"p-3 sm:p-4 bg-blue-50 rounded-lg\">\n                    <div className=\"text-xl sm:text-2xl font-bold text-blue-600\">\n                      {parsedData.totalItems || 0}\n                    </div>\n                    <div className=\"text-xs sm:text-sm text-blue-600\">Total Items</div>\n                  </div>\n                \n                  {/* Platform-specific summary cards */}\n                  {parsedData.platform === \"amazon\" && (\n                    <>\n                      <div className=\"p-3 sm:p-4 bg-green-50 rounded-lg\">\n                        <div className=\"text-xl sm:text-2xl font-bold text-green-600\">\n                          {parsedData.summary?.totalOrderedUnits || 0}\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-green-600\">Ordered Units</div>\n                      </div>\n                      <div className=\"p-3 sm:p-4 bg-purple-50 rounded-lg\">\n                        <div className=\"text-lg sm:text-xl font-bold text-purple-600\">\n                          ₹{parsedData.summary?.totalOrderedRevenue?.toFixed(2) || \"0.00\"}\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-purple-600\">Ordered Revenue</div>\n                      </div>\n                      <div className=\"p-3 sm:p-4 bg-orange-50 rounded-lg\">\n                        <div className=\"text-lg sm:text-xl font-bold text-orange-600\">\n                          ₹{parsedData.summary?.totalShippedRevenue?.toFixed(2) || \"0.00\"}\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-orange-600\">Shipped Revenue</div>\n                      </div>\n                    </>\n                  )}\n                  \n                  {/* New platforms summary cards */}\n                  {[\"zepto\", \"blinkit\", \"swiggy\", \"jiomartsale\", \"jiomartcancel\", \"bigbasket\", \"flipkart-grocery\"].includes(parsedData.platform || \"\") && (\n                    <>\n                      <div className=\"p-3 sm:p-4 bg-green-50 rounded-lg\">\n                        <div className=\"text-xl sm:text-2xl font-bold text-green-600\">\n                          {parsedData.summary?.totalRecords || 0}\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-green-600\">Total Records</div>\n                      </div>\n                      <div className=\"p-3 sm:p-4 bg-purple-50 rounded-lg\">\n                        <div className=\"text-lg sm:text-xl font-bold text-purple-600\">\n                          ₹{parsedData.summary?.totalSalesValue?.toFixed(2) || \"0.00\"}\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-purple-600\">Total Sales Value</div>\n                      </div>\n                      <div className=\"p-3 sm:p-4 bg-orange-50 rounded-lg\">\n                        <div className=\"text-lg sm:text-xl font-bold text-orange-600\">\n                          {parsedData.summary?.uniqueProducts || 0}\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-orange-600\">Unique Products</div>\n                      </div>\n                    </>\n                  )}\n\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Period Information Card */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base sm:text-lg\">Import Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 p-3 sm:p-4 bg-gray-50 rounded-lg\">\n                  <div>\n                    <span className=\"text-xs sm:text-sm text-gray-600\">Business Unit:</span>\n                    <div className=\"font-medium text-sm sm:text-base\">{parsedData.businessUnit}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-xs sm:text-sm text-gray-600\">Period Type:</span>\n                    <div className=\"font-medium text-sm sm:text-base\">{parsedData.periodType}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-xs sm:text-sm text-gray-600\">Period:</span>\n                    <div className=\"font-medium text-sm sm:text-base\">\n                      {parsedData.periodType === 'daily' \n                        ? new Date(parsedData.reportDate || '').toLocaleDateString()\n                        : `${new Date(parsedData.periodStart || '').toLocaleDateString()} - ${new Date(parsedData.periodEnd || '').toLocaleDateString()}`\n                      }\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n\n\n            {/* Data Preview Table Card */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base sm:text-lg\">Data Preview</CardTitle>\n                <CardDescription className=\"text-sm\">First {parsedData.items?.length || 0} records from your file</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {parsedData.items && Array.isArray(parsedData.items) && parsedData.items.length > 0 ? (\n                  <div className=\"border rounded-lg overflow-hidden\">\n                    <div className=\"overflow-x-auto\">\n                      <div className=\"max-h-48 sm:max-h-60 overflow-y-auto\" style={{scrollbarWidth: 'thin'}}>\n                        <Table>\n                          <TableHeader className=\"sticky top-0 bg-white shadow-sm z-10\">\n                          <TableRow>\n                            {/* Amazon table headers */}\n                            {parsedData.platform === \"amazon\" && (\n                              <>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">ASIN</TableHead>\n                                <TableHead className=\"min-w-[250px] px-4 py-3 font-semibold\">Product Title</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Brand</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">Ordered Units</TableHead>\n                                <TableHead className=\"text-right min-w-[120px] px-4 py-3 font-semibold\">Ordered Revenue</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">Shipped Units</TableHead>\n                                <TableHead className=\"text-right min-w-[120px] px-4 py-3 font-semibold\">Shipped Revenue</TableHead>\n                              </>\n                            )}\n                            \n                            {/* Zepto table headers */}\n                            {parsedData.platform === \"zepto\" && (\n                              <>\n                                <TableHead className=\"min-w-[150px] px-4 py-3 font-semibold\">SKU Name</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Category</TableHead>\n                                <TableHead className=\"min-w-[100px] px-4 py-3 font-semibold\">Brand</TableHead>\n                                <TableHead className=\"min-w-[100px] px-4 py-3 font-semibold\">City</TableHead>\n                                <TableHead className=\"text-right min-w-[80px] px-4 py-3 font-semibold\">Units Sold</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">GMV</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">ASP</TableHead>\n                              </>\n                            )}\n                            \n                            {/* Blinkit table headers */}\n                            {parsedData.platform === \"blinkit\" && (\n                              <>\n                                <TableHead className=\"min-w-[150px] px-4 py-3 font-semibold\">Item Name</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Category</TableHead>\n                                <TableHead className=\"min-w-[150px] px-4 py-3 font-semibold\">Manufacturer</TableHead>\n                                <TableHead className=\"min-w-[100px] px-4 py-3 font-semibold\">City</TableHead>\n                                <TableHead className=\"text-right min-w-[80px] px-4 py-3 font-semibold\">Qty Sold</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">Total Value</TableHead>\n                              </>\n                            )}\n                            \n                            {/* Swiggy table headers */}\n                            {parsedData.platform === \"swiggy\" && (\n                              <>\n                                <TableHead className=\"min-w-[100px] px-4 py-3 font-semibold\">Brand</TableHead>\n                                <TableHead className=\"min-w-[200px] px-4 py-3 font-semibold\">Product Name</TableHead>\n                                <TableHead className=\"min-w-[100px] px-4 py-3 font-semibold\">City</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Area</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Category</TableHead>\n                                <TableHead className=\"text-right min-w-[80px] px-4 py-3 font-semibold\">Units</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">GMV</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">Base MRP</TableHead>\n                              </>\n                            )}\n\n                            {/* Jio Mart Sale table headers */}\n                            {parsedData.platform === \"jiomartsale\" && (\n                              <>\n                                <TableHead className=\"min-w-[150px] px-4 py-3 font-semibold\">Shipment Number</TableHead>\n                                <TableHead className=\"min-w-[200px] px-4 py-3 font-semibold\">Product Title</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">SKU</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Shipment Status</TableHead>\n                                <TableHead className=\"text-right min-w-[80px] px-4 py-3 font-semibold\">Qty</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">MRP</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">Item Total</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Payment Method</TableHead>\n                              </>\n                            )}\n\n                            {/* Jio Mart Cancel table headers */}\n                            {parsedData.platform === \"jiomartcancel\" && (\n                              <>\n                                <TableHead className=\"min-w-[150px] px-4 py-3 font-semibold\">Shipment Number</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">EAN</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">SKU</TableHead>\n                                <TableHead className=\"min-w-[200px] px-4 py-3 font-semibold\">Product</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Status</TableHead>\n                                <TableHead className=\"min-w-[150px] px-4 py-3 font-semibold\">Reason</TableHead>\n                                <TableHead className=\"text-right min-w-[80px] px-4 py-3 font-semibold\">Quantity</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">Amount</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Payment Method</TableHead>\n                              </>\n                            )}\n\n                            {/* BigBasket table headers */}\n                            {parsedData.platform === \"bigbasket\" && (\n                              <>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Brand</TableHead>\n                                <TableHead className=\"min-w-[200px] px-4 py-3 font-semibold\">SKU Description</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Category</TableHead>\n                                <TableHead className=\"min-w-[100px] px-4 py-3 font-semibold\">City</TableHead>\n                                <TableHead className=\"min-w-[100px] px-4 py-3 font-semibold\">SKU Weight</TableHead>\n                                <TableHead className=\"text-right min-w-[80px] px-4 py-3 font-semibold\">Quantity</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">Total MRP</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">Total Sales</TableHead>\n                              </>\n                            )}\n\n                            {/* Flipkart Grocery table headers */}\n                            {parsedData.platform === \"flipkart-grocery\" && (\n                              <>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Tenant ID</TableHead>\n                                <TableHead className=\"min-w-[150px] px-4 py-3 font-semibold\">Retailer Name</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">FSN</TableHead>\n                                <TableHead className=\"min-w-[200px] px-4 py-3 font-semibold\">Product Name</TableHead>\n                                <TableHead className=\"min-w-[120px] px-4 py-3 font-semibold\">Category</TableHead>\n                                <TableHead className=\"min-w-[100px] px-4 py-3 font-semibold\">Brand</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">MRP</TableHead>\n                                <TableHead className=\"text-right min-w-[100px] px-4 py-3 font-semibold\">Total Qty</TableHead>\n                                <TableHead className=\"text-right min-w-[120px] px-4 py-3 font-semibold\">Total Sales Value</TableHead>\n                              </>\n                            )}\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {parsedData.items.map((item: any, index: number) => (\n                            <TableRow key={index} className=\"hover:bg-gray-50 border-b\">\n                              {/* Amazon table rows */}\n                              {parsedData.platform === \"amazon\" && (\n                                <>\n                                  <TableCell className=\"font-medium px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.asin || \"N/A\"}>\n                                      {item.asin || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[250px]\" title={item.product_title || \"N/A\"}>\n                                      {item.product_title || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.brand || \"N/A\"}>\n                                      {item.brand || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    {item.ordered_units || 0}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.ordered_revenue || \"0\").toFixed(2)}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    {item.shipped_units || 0}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.shipped_revenue || \"0\").toFixed(2)}\n                                  </TableCell>\n                                </>\n                              )}\n                              \n                              {/* Zepto table rows */}\n                              {parsedData.platform === \"zepto\" && (\n                                <>\n                                  <TableCell className=\"font-medium px-4 py-3\">\n                                    <div className=\"truncate max-w-[150px]\" title={item.sku_name || \"N/A\"}>\n                                      {item.sku_name || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.sku_category || \"N/A\"}>\n                                      {item.sku_category || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[100px]\" title={item.brand_name || \"N/A\"}>\n                                      {item.brand_name || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[100px]\" title={item.city || \"N/A\"}>\n                                      {item.city || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    {item.sales_qty_units || 0}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.gmv || \"0\").toFixed(2)}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{(item.sales_qty_units && parseFloat(item.gmv || \"0\") && item.sales_qty_units > 0 \n                                      ? (parseFloat(item.gmv || \"0\") / item.sales_qty_units).toFixed(2) \n                                      : parseFloat(item.mrp || \"0\").toFixed(2))}\n                                  </TableCell>\n                                </>\n                              )}\n                              \n                              {/* Blinkit table rows */}\n                              {parsedData.platform === \"blinkit\" && (\n                                <>\n                                  <TableCell className=\"font-medium px-4 py-3\">\n                                    <div className=\"truncate max-w-[150px]\" title={item.item_name || \"N/A\"}>\n                                      {item.item_name || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.category || \"N/A\"}>\n                                      {item.category || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[150px]\" title={item.manufacturer_name || \"N/A\"}>\n                                      {item.manufacturer_name || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[100px]\" title={item.city_name || \"N/A\"}>\n                                      {item.city_name || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    {item.qty_sold || 0}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.mrp || \"0\").toFixed(2)}\n                                  </TableCell>\n                                </>\n                              )}\n                              \n                              {/* Swiggy table rows */}\n                              {parsedData.platform === \"swiggy\" && (\n                                <>\n                                  <TableCell className=\"font-medium px-4 py-3\">\n                                    <div className=\"truncate max-w-[100px]\" title={item.brand || \"N/A\"}>\n                                      {item.brand || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[200px]\" title={item.product_name || \"N/A\"}>\n                                      {item.product_name || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[100px]\" title={item.city || \"N/A\"}>\n                                      {item.city || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.area_name || \"N/A\"}>\n                                      {item.area_name || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.l1_category || \"N/A\"}>\n                                      {item.l1_category || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    {item.units_sold || 0}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.gmv || \"0\").toFixed(2)}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.base_mrp || \"0\").toFixed(2)}\n                                  </TableCell>\n                                </>\n                              )}\n\n                              {/* Jio Mart Sale table rows */}\n                              {parsedData.platform === \"jiomartsale\" && (\n                                <>\n                                  <TableCell className=\"font-medium px-4 py-3\">\n                                    <div className=\"truncate max-w-[150px]\" title={item.shipment_number || \"N/A\"}>\n                                      {item.shipment_number || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[200px]\" title={item.product_title || \"N/A\"}>\n                                      {item.product_title || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.sku || \"N/A\"}>\n                                      {item.sku || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.shipment_status || \"N/A\"}>\n                                      {item.shipment_status || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    {item.qty || 0}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.mrp || \"0\").toFixed(2)}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.item_total || \"0\").toFixed(2)}\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.payment_method_used || \"N/A\"}>\n                                      {item.payment_method_used || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                </>\n                              )}\n\n                              {/* Jio Mart Cancel table rows */}\n                              {parsedData.platform === \"jiomartcancel\" && (\n                                <>\n                                  <TableCell className=\"font-medium px-4 py-3\">\n                                    <div className=\"truncate max-w-[150px]\" title={item.shipment_number || \"N/A\"}>\n                                      {item.shipment_number || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.ean || \"N/A\"}>\n                                      {item.ean || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.sku || \"N/A\"}>\n                                      {item.sku || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[200px]\" title={item.product || \"N/A\"}>\n                                      {item.product || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.status || \"N/A\"}>\n                                      {item.status || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[150px]\" title={item.reason || \"N/A\"}>\n                                      {item.reason || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    {item.quantity || 0}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.amount || \"0\").toFixed(2)}\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.payment_method || \"N/A\"}>\n                                      {item.payment_method || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                </>\n                              )}\n\n                              {/* BigBasket table rows */}\n                              {parsedData.platform === \"bigbasket\" && (\n                                <>\n                                  <TableCell className=\"font-medium px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.brand_name || \"N/A\"}>\n                                      {item.brand_name || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[200px]\" title={item.sku_description || \"N/A\"}>\n                                      {item.sku_description || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.leaf_slug || \"N/A\"}>\n                                      {item.leaf_slug || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[100px]\" title={item.source_city_name || \"N/A\"}>\n                                      {item.source_city_name || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[100px]\" title={item.sku_weight || \"N/A\"}>\n                                      {item.sku_weight || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    {item.total_quantity || 0}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.total_mrp || \"0\").toFixed(2)}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.total_sales || \"0\").toFixed(2)}\n                                  </TableCell>\n                                </>\n                              )}\n\n                              {/* Flipkart Grocery table rows */}\n                              {parsedData.platform === \"flipkart-grocery\" && (\n                                <>\n                                  <TableCell className=\"font-medium px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.tenantId || \"N/A\"}>\n                                      {item.tenantId || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[150px]\" title={item.retailerName || \"N/A\"}>\n                                      {item.retailerName || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.fsn || \"N/A\"}>\n                                      {item.fsn || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[200px]\" title={item.productName || \"N/A\"}>\n                                      {item.productName || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[120px]\" title={item.category || \"N/A\"}>\n                                      {item.category || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"px-4 py-3\">\n                                    <div className=\"truncate max-w-[100px]\" title={item.brand || \"N/A\"}>\n                                      {item.brand || \"N/A\"}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.mrp || \"0\").toFixed(2)}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    {item.totalSalesQty || 0}\n                                  </TableCell>\n                                  <TableCell className=\"text-right px-4 py-3\">\n                                    ₹{parseFloat(item.totalSalesValue || \"0\").toFixed(2)}\n                                  </TableCell>\n                                </>\n                              )}\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-3 bg-gray-50 text-center text-sm text-gray-600 border-t\">\n                    Showing all {parsedData.items.length} items • Scroll vertically and horizontally to view more\n                  </div>\n                </div>\n              ) : (\n                <div className=\"mb-4 p-3 bg-gray-50 border border-gray-200 rounded-lg text-center\">\n                  <p className=\"text-gray-600\">No data available to display</p>\n                </div>\n              )}\n\n              {/* Import Button - Always Visible */}\n              <div className=\"sticky bottom-0 bg-white border-t-2 border-green-200 mt-4 mb-4 p-4 rounded-lg shadow-lg\">\n                <div className=\"bg-gradient-to-r from-green-50 to-blue-50 border-2 border-green-300 rounded-lg p-6\">\n                  <div className=\"text-center\">\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-2\">\n                      🗄️ Ready to Import Data\n                    </h3>\n                    <p className=\"text-sm text-gray-700 mb-4 font-medium\">\n                      Import {parsedData.totalItems || 0} items into {selectedPlatformData?.name} - {selectedBusinessUnitData?.name} database\n                    </p>\n                    <Button\n                      onClick={() => importMutation.mutate()}\n                      disabled={importMutation.isPending || !parsedData.items?.length}\n                      className=\"bg-green-600 hover:bg-green-700 text-white font-bold px-10 py-5 text-xl min-w-[250px] shadow-xl border-2 border-green-700\"\n                      size=\"lg\"\n                    >\n                      {importMutation.isPending ? (\n                        <>\n                          <div className=\"w-6 h-6 border-3 border-white border-t-transparent rounded-full animate-spin mr-3\" />\n                          Importing...\n                        </>\n                      ) : (\n                        <>\n                          <Database className=\"w-7 h-7 mr-3\" />\n                          Import to Database\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons - Navigation */}\n              <div className=\"bg-white border-t pt-4 mt-6\">\n                <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={goBack}\n                    className=\"flex items-center justify-center space-x-2 w-full sm:w-auto\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4\" />\n                    <span>Back</span>\n                  </Button>\n\n                  <Button\n                    variant=\"outline\"\n                    onClick={goToPlatformSelection}\n                    className=\"flex items-center justify-center space-x-2 w-full sm:w-auto\"\n                  >\n                    <RotateCcw className=\"w-4 h-4\" />\n                    <span>Start Over</span>\n                  </Button>\n                </div>\n              </div>\n              </CardContent>\n            </Card>\n            </div>\n        )}\n\n        {/* Loading States */}\n        {previewMutation.isPending && (\n          <Card className=\"mt-4\">\n            <CardContent className=\"py-8\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\" />\n                <span>Parsing file...</span>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":69321},"server/blinkit-secondary-sales-parser.ts":{"content":"import { parse } from 'csv-parse/sync';\nimport * as XLSX from 'xlsx';\n\nexport interface BlinkitSecondarySalesItem {\n  item_id: string;\n  item_name: string;\n  manufacturer_id: string;\n  manufacturer_name: string;\n  city_id: string;\n  city_name: string;\n  category: string;\n  date: string;\n  qty_sold: number;\n  mrp: number;\n}\n\nexport interface BlinkitSecondarySalesData {\n  platform: \"blinkit\";\n  businessUnit: string;\n  periodType: \"daily\" | \"date-range\";\n  reportDate?: string;\n  periodStart?: string;\n  periodEnd?: string;\n  totalItems: number;\n  items: BlinkitSecondarySalesItem[];\n  summary?: {\n    totalQtySold: number;\n    totalSalesValue: number;\n    uniqueProducts: number;\n  };\n}\n\nexport function parseBlinkitSecondarySalesFile(\n  buffer: Buffer, \n  filename: string,\n  businessUnit: string,\n  periodType: \"daily\" | \"date-range\",\n  reportDate?: string,\n  periodStart?: string,\n  periodEnd?: string\n): BlinkitSecondarySalesData {\n  let records: any[];\n\n  try {\n    if (filename.toLowerCase().endsWith('.csv')) {\n      const content = buffer.toString('utf-8');\n      records = parse(content, {\n        columns: true,\n        skip_empty_lines: true,\n        trim: true\n      });\n    } else if (filename.toLowerCase().endsWith('.xlsx') || filename.toLowerCase().endsWith('.xls')) {\n      const workbook = XLSX.read(buffer, { type: 'buffer' });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      records = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n      \n      // Convert array format to object format with headers\n      if (records.length > 0) {\n        const headers = records[0] as string[];\n        records = records.slice(1).map(row => {\n          const obj: any = {};\n          headers.forEach((header, index) => {\n            obj[header] = (row as any[])[index];\n          });\n          return obj;\n        });\n      }\n    } else {\n      throw new Error('Unsupported file format. Please upload CSV or Excel files.');\n    }\n\n    console.log('Blinkit CSV Records Sample:', records.slice(0, 3));\n    console.log('Expected headers: item_id, item_name, manufacturer_id, manufacturer_name, city_id, city_name, category, date, qty_sold, mrp');\n\n    // Parse and validate items\n    const items: BlinkitSecondarySalesItem[] = records\n      .filter(record => record && typeof record === 'object')\n      .map((record, index) => {\n        try {\n          // Handle different possible column names and formats\n          const dateValue = String(record.date || record['Date'] || '').trim();\n          const parsedDate = dateValue ? new Date(dateValue) : new Date();\n          \n          const item: BlinkitSecondarySalesItem = {\n            item_id: String(record.item_id || record['Item ID'] || '').trim(),\n            item_name: String(record.item_name || record['Item Name'] || '').trim(),\n            manufacturer_id: String(record.manufacturer_id || record['Manufacturer ID'] || '').trim(),\n            manufacturer_name: String(record.manufacturer_name || record['Manufacturer Name'] || '').trim(),\n            city_id: String(record.city_id || record['City ID'] || '').trim(),\n            city_name: String(record.city_name || record['City Name'] || '').trim(),\n            category: String(record.category || record['Category'] || '').trim(),\n            date: dateValue,\n            qty_sold: parseFloat(record.qty_sold || record['Qty Sold'] || '0') || 0,\n            mrp: parseFloat(record.mrp || record['MRP'] || '0') || 0\n          };\n\n          // Validate required fields\n          if (!item.item_id || !item.item_name) {\n            console.warn(`Row ${index + 1}: Missing required fields (item_id: ${item.item_id}, item_name: ${item.item_name})`);\n            return null;\n          }\n\n          return item;\n        } catch (error) {\n          console.error(`Error parsing row ${index + 1}:`, error);\n          return null;\n        }\n      })\n      .filter((item): item is BlinkitSecondarySalesItem => item !== null);\n\n    console.log(`Successfully parsed ${items.length} Blinkit items`);\n\n    // Calculate summary\n    // Note: In Blinkit CSV, the 'mrp' field contains the total selling price (qty * unit_price), not unit price\n    const summary = {\n      totalQtySold: items.reduce((sum, item) => sum + item.qty_sold, 0),\n      totalSalesValue: items.reduce((sum, item) => sum + item.mrp, 0), // MRP is already total value\n      uniqueProducts: new Set(items.map(item => item.item_id)).size\n    };\n\n    const result: BlinkitSecondarySalesData = {\n      platform: \"blinkit\",\n      businessUnit,\n      periodType,\n      totalItems: items.length,\n      items,\n      summary\n    };\n\n    if (periodType === \"daily\" && reportDate) {\n      result.reportDate = reportDate;\n    } else if (periodType === \"date-range\" && periodStart && periodEnd) {\n      result.periodStart = periodStart;\n      result.periodEnd = periodEnd;\n    }\n\n    return result;\n\n  } catch (error) {\n    console.error('Error parsing Blinkit secondary sales file:', error);\n    throw new Error(`Failed to parse Blinkit secondary sales file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}","size_bytes":5150},"server/zepto-secondary-sales-parser.ts":{"content":"import { parse } from 'csv-parse';\nimport { InsertZeptoSecondarySalesItem } from '@shared/schema';\n\nexport interface ZeptoSecondaryParseResult {\n  success: boolean;\n  data?: InsertZeptoSecondarySalesItem[];\n  error?: string;\n  totalItems?: number;\n}\n\nexport function parseZeptoSecondaryData(csvContent: string, reportDate: Date, periodStart?: Date, periodEnd?: Date): Promise<ZeptoSecondaryParseResult> {\n  return new Promise((resolve) => {\n    const results: InsertZeptoSecondarySalesItem[] = [];\n    let hasError = false;\n    let errorMessage = '';\n\n    const parser = parse({\n      columns: true,\n      skip_empty_lines: true,\n      trim: true\n    });\n\n    parser.on('readable', function() {\n      let record;\n      while ((record = parser.read()) !== null) {\n        try {\n          // Parse date from CSV (expected format: DD-MM-YYYY)\n          const dateStr = record['Date'];\n          let parsedDate: Date = new Date();\n          \n          if (dateStr && typeof dateStr === 'string') {\n            if (dateStr.includes('-')) {\n              const parts = dateStr.split('-');\n              if (parts.length === 3) {\n                const day = parseInt(parts[0]);\n                const month = parseInt(parts[1]);\n                const year = parseInt(parts[2]);\n                if (!isNaN(day) && !isNaN(month) && !isNaN(year)) {\n                  parsedDate = new Date(year, month - 1, day);\n                }\n              }\n            }\n            \n            // Fallback: try parsing directly\n            if (isNaN(parsedDate.getTime())) {\n              parsedDate = new Date(dateStr);\n            }\n            \n            // Another fallback: try ISO format\n            if (isNaN(parsedDate.getTime())) {\n              parsedDate = new Date(dateStr + 'T00:00:00.000Z');\n            }\n          }\n\n          // Validate date - if still invalid, use current date\n          if (isNaN(parsedDate.getTime())) {\n            console.warn(`Invalid date found: ${dateStr}, using current date`);\n            parsedDate = new Date();\n          }\n\n          const item: InsertZeptoSecondarySalesItem = {\n            report_date: reportDate,\n            date: parsedDate,\n            sku_number: record['SKU Number'] || null,\n            sku_name: record['SKU Name'] || null,\n            ean: record['EAN'] || null,\n            sku_category: record['SKU Category'] || null,\n            sku_sub_category: record['SKU Sub Category'] || null,\n            brand_name: record['Brand Name'] || null,\n            manufacturer_name: record['Manufacturer Name'] || null,\n            manufacturer_id: record['Manufacturer ID'] || null,\n            city: record['City'] || null,\n            sales_qty_units: record['Sales (Qty) - Units'] ? parseInt(record['Sales (Qty) - Units']) : null,\n            mrp: record['MRP'] ? String(parseFloat(record['MRP'])) : null,\n            gmv: record['Gross Merchandise Value'] ? String(parseFloat(record['Gross Merchandise Value'])) : null,\n            attachment_path: null // Will be set by calling function\n          };\n\n          // Add period information for range reports\n          if (periodStart && periodEnd) {\n            (item as any).period_start = periodStart;\n            (item as any).period_end = periodEnd;\n          }\n\n          results.push(item);\n        } catch (error) {\n          console.error('Error parsing Zepto secondary sales row:', error);\n          hasError = true;\n          errorMessage = `Failed to parse row: ${error instanceof Error ? error.message : 'Unknown error'}`;\n        }\n      }\n    });\n\n    parser.on('error', function(err) {\n      console.error('CSV parsing error:', err);\n      hasError = true;\n      errorMessage = `CSV parsing failed: ${err.message}`;\n    });\n\n    parser.on('end', function() {\n      if (hasError && results.length === 0) {\n        resolve({\n          success: false,\n          error: errorMessage\n        });\n      } else {\n        resolve({\n          success: true,\n          data: results,\n          totalItems: results.length\n        });\n      }\n    });\n\n    parser.write(csvContent);\n    parser.end();\n  });\n}","size_bytes":4111},"server/jiomartsale-secondary-sales-parser.ts":{"content":"import Papa from 'papaparse';\n\ninterface JioMartSaleData {\n  shipment_number: string;\n  fulfillment_type: string;\n  shipment_created_at: string;\n  shipment_status: string;\n  fulfiller_name: string;\n  accepted_at: string;\n  product_title: string;\n  ean: string;\n  sku: string;\n  qty: number;\n  mrp: number;\n  promotion_amt: number;\n  shipping_charge: number;\n  item_total: number;\n  payment_method_used: string;\n  tracking_code: string;\n  shipping_agent_code: string;\n  invoice_id: string;\n  acceptance_tat_date_time: string;\n  attachment_path?: string | null;\n}\n\ninterface ParseResult {\n  platform: string;\n  businessUnit: string;\n  periodType: string;\n  reportDate?: Date;\n  periodStart?: Date;\n  periodEnd?: Date;\n  totalItems: number;\n  items: JioMartSaleData[];\n  summary: {\n    totalRecords: number;\n    totalSalesValue: number;\n    uniqueProducts: number;\n    dateRange: string;\n  };\n}\n\nfunction parseDateTime(dateTimeStr: string): Date | null {\n  if (!dateTimeStr || dateTimeStr.trim() === '') return null;\n  \n  try {\n    // Handle the format \"2025-08-01 00:13:24 +0530\"\n    const cleanStr = dateTimeStr.replace(/\\s*\\+\\d{4}$/, ''); // Remove timezone\n    const date = new Date(cleanStr);\n    return isNaN(date.getTime()) ? null : date;\n  } catch (error) {\n    console.warn('Error parsing date:', dateTimeStr, error);\n    return null;\n  }\n}\n\nfunction parseNumber(value: string | number): number {\n  if (typeof value === 'number') return value;\n  if (!value || value === '') return 0;\n  \n  const parsed = parseFloat(value.toString());\n  return isNaN(parsed) ? 0 : parsed;\n}\n\nexport function parseJioMartSaleSecondarySales(\n  fileBuffer: Buffer,\n  platform: string,\n  businessUnit: string,\n  periodType: string,\n  startDate?: string,\n  endDate?: string\n): ParseResult {\n  const csvContent = fileBuffer.toString('utf8');\n  \n  const parseResult = Papa.parse(csvContent, {\n    header: true,\n    skipEmptyLines: true,\n    transformHeader: (header) => {\n      // Transform headers to match our database schema\n      const headerMap: Record<string, string> = {\n        'Shipment Number': 'Shipment Number',\n        'Fulfillment Type': 'Fulfillment Type',\n        'Shipment Created At': 'Shipment Created At',\n        'Shipment Status': 'Shipment Status',\n        'Fulfiller Name': 'Fulfiller Name',\n        'Accepted At': 'Accepted At',\n        'Product Title': 'Product Title',\n        'EAN': 'EAN',\n        'Sku': 'Sku',\n        'Qty': 'Qty',\n        'MRP': 'MRP',\n        'Promotion Amt': 'Promotion Amt',\n        'Shipping Charge': 'Shipping Charge',\n        'Item Total': 'Item Total',\n        'Payment Method Used': 'Payment Method Used',\n        'Tracking Code': 'Tracking Code',\n        'Shipping Agent Code': 'Shipping Agent Code',\n        'Invoice Id': 'Invoice Id',\n        'Acceptance TAT Date & Time': 'Acceptance TAT Date & Time'\n      };\n      return headerMap[header] || header;\n    }\n  });\n\n  if (parseResult.errors && parseResult.errors.length > 0) {\n    console.warn('CSV parsing errors:', parseResult.errors);\n  }\n\n  const rawData = parseResult.data as any[];\n  \n  const items: JioMartSaleData[] = rawData\n    .filter(row => row && row['Shipment Number']) // Filter out empty rows\n    .map(row => {\n      return {\n        shipment_number: row['Shipment Number'] || '',\n        fulfillment_type: row['Fulfillment Type'] || '',\n        shipment_created_at: row['Shipment Created At'] || '',\n        shipment_status: row['Shipment Status'] || '',\n        fulfiller_name: row['Fulfiller Name'] || '',\n        accepted_at: row['Accepted At'] || '',\n        product_title: row['Product Title'] || '',\n        ean: row['EAN'] || '',\n        sku: row['Sku'] || '',\n        qty: parseNumber(row['Qty']),\n        mrp: parseNumber(row['MRP']),\n        promotion_amt: parseNumber(row['Promotion Amt']),\n        shipping_charge: parseNumber(row['Shipping Charge']),\n        item_total: parseNumber(row['Item Total']),\n        payment_method_used: row['Payment Method Used'] || '',\n        tracking_code: row['Tracking Code'] || '',\n        shipping_agent_code: row['Shipping Agent Code'] || '',\n        invoice_id: row['Invoice Id'] || '',\n        acceptance_tat_date_time: row['Acceptance TAT Date & Time'] || '',\n        attachment_path: null\n      };\n    });\n\n  // Calculate summary\n  const totalSalesValue = items.reduce((sum, item) => sum + item.item_total, 0);\n  const uniqueProducts = new Set(items.map(item => item.sku).filter(Boolean)).size;\n  \n  const dateRangeStr = periodType === \"date-range\" && startDate && endDate \n    ? `${startDate} to ${endDate}` \n    : startDate || 'Unknown';\n\n  // Set reportDate and period fields based on periodType\n  const reportDate = periodType === \"daily\" && startDate ? new Date(startDate) : undefined;\n  const periodStart = periodType === \"date-range\" && startDate ? new Date(startDate) : undefined;\n  const periodEnd = periodType === \"date-range\" && endDate ? new Date(endDate) : undefined;\n\n  return {\n    platform,\n    businessUnit,\n    periodType,\n    reportDate,\n    periodStart,\n    periodEnd,\n    totalItems: items.length,\n    items,\n    summary: {\n      totalRecords: items.length,\n      totalSalesValue,\n      uniqueProducts,\n      dateRange: dateRangeStr\n    }\n  };\n}","size_bytes":5227},"server/jiomartcancel-secondary-sales-parser.ts":{"content":"import Papa from 'papaparse';\n\ninterface JioMartCancelData {\n  shipment_number: string;\n  ean: string;\n  sku: string;\n  product: string;\n  invoice_id: string;\n  invoice_amount: number;\n  quantity: number;\n  amount: number;\n  status: string;\n  reason: string;\n  payment_method: string;\n  fulfiller_name: string;\n  report_date?: Date;\n  period_start?: Date;\n  period_end?: Date;\n  attachment_path?: string | null;\n}\n\ninterface ParseResult {\n  platform: string;\n  businessUnit: string;\n  periodType: string;\n  reportDate?: Date;\n  periodStart?: Date;\n  periodEnd?: Date;\n  totalItems: number;\n  items: JioMartCancelData[];\n  summary: {\n    totalRecords: number;\n    totalSalesValue: number;\n    uniqueProducts: number;\n    dateRange: string;\n  };\n}\n\nfunction parseNumber(value: string | number): number {\n  if (typeof value === 'number') return value;\n  if (!value || value === '') return 0;\n  \n  const parsed = parseFloat(value.toString());\n  return isNaN(parsed) ? 0 : parsed;\n}\n\nexport function parseJioMartCancelSecondarySales(\n  fileBuffer: Buffer,\n  platform: string,\n  businessUnit: string,\n  periodType: string,\n  startDate?: string,\n  endDate?: string\n): ParseResult {\n  const csvContent = fileBuffer.toString('utf8');\n  \n  const parseResult = Papa.parse(csvContent, {\n    header: true,\n    skipEmptyLines: true,\n    transformHeader: (header) => {\n      // Transform headers to match our database schema\n      const headerMap: Record<string, string> = {\n        'Shipment number': 'Shipment number',\n        'EAN': 'EAN',\n        'SKU': 'SKU',\n        'Product': 'Product',\n        'Invoice Id': 'Invoice Id',\n        'Invoice amount': 'Invoice amount',\n        'Quantity': 'Quantity',\n        'Amount': 'Amount',\n        'Status': 'Status',\n        'Reason': 'Reason',\n        'Payment method': 'Payment method',\n        'Fulfiller Name': 'Fulfiller Name'\n      };\n      return headerMap[header] || header;\n    }\n  });\n\n  if (parseResult.errors && parseResult.errors.length > 0) {\n    console.warn('CSV parsing errors:', parseResult.errors);\n  }\n\n  const rawData = parseResult.data as any[];\n  \n  const items: JioMartCancelData[] = rawData\n    .filter(row => row && row['Shipment number']) // Filter out empty rows\n    .map(row => {\n      return {\n        shipment_number: row['Shipment number'] || '',\n        ean: row['EAN'] || '',\n        sku: row['SKU'] || '',\n        product: row['Product'] || '',\n        invoice_id: row['Invoice Id'] || '',\n        invoice_amount: parseNumber(row['Invoice amount']),\n        quantity: parseNumber(row['Quantity']),\n        amount: parseNumber(row['Amount']),\n        status: row['Status'] || '',\n        reason: row['Reason'] || '',\n        payment_method: row['Payment method'] || '',\n        fulfiller_name: row['Fulfiller Name'] || '',\n        attachment_path: null\n      };\n    });\n\n  // Calculate summary\n  const totalSalesValue = items.reduce((sum, item) => sum + item.amount, 0);\n  const uniqueProducts = new Set(items.map(item => item.sku).filter(Boolean)).size;\n  \n  const dateRangeStr = periodType === \"date-range\" && startDate && endDate \n    ? `${startDate} to ${endDate}` \n    : startDate || 'Unknown';\n\n  // Set reportDate and period fields based on periodType\n  const reportDate = periodType === \"daily\" && startDate ? new Date(startDate) : undefined;\n  const periodStart = periodType === \"date-range\" && startDate ? new Date(startDate) : undefined;\n  const periodEnd = periodType === \"date-range\" && endDate ? new Date(endDate) : undefined;\n\n  return {\n    platform,\n    businessUnit,\n    periodType,\n    reportDate,\n    periodStart,\n    periodEnd,\n    totalItems: items.length,\n    items,\n    summary: {\n      totalRecords: items.length,\n      totalSalesValue,\n      uniqueProducts,\n      dateRange: dateRangeStr\n    }\n  };\n}","size_bytes":3791},"server/bigbasket-secondary-sales-parser.ts":{"content":"import Papa from \"papaparse\";\n\n// Data structure matching BigBasket CSV format\nexport interface BigBasketData {\n  date_range: string;\n  source_city_name: string;\n  brand_name: string;\n  top_slug: string;\n  mid_slug: string;\n  leaf_slug: string;\n  source_sku_id: string;\n  sku_description: string;\n  sku_weight: string;\n  total_quantity: number;\n  total_mrp: number;\n  total_sales: number;\n  attachment_path?: string | null;\n}\n\nexport interface ParseResult {\n  platform: string;\n  businessUnit: string;\n  periodType: string;\n  reportDate?: Date;\n  periodStart?: Date;\n  periodEnd?: Date;\n  totalItems: number;\n  items: BigBasketData[];\n  summary: {\n    totalRecords: number;\n    totalSalesValue: number;\n    uniqueProducts: number;\n    dateRange: string;\n  };\n}\n\nfunction parseNumber(value: string | number): number {\n  if (typeof value === 'number') return value;\n  if (!value || value === '') return 0;\n  \n  const parsed = parseFloat(value.toString());\n  return isNaN(parsed) ? 0 : parsed;\n}\n\nfunction extractDateFromRange(dateRange: string): Date {\n  // Extract date from BigBasket date range format: \"20250801 - 20250810\"\n  if (!dateRange || dateRange.trim() === '') {\n    return new Date(); // Return current date as fallback\n  }\n  \n  const match = dateRange.match(/(\\d{8})/);\n  if (match) {\n    const dateStr = match[1]; // First date in the range\n    const year = dateStr.substring(0, 4);\n    const month = dateStr.substring(4, 6);\n    const day = dateStr.substring(6, 8);\n    return new Date(`${year}-${month}-${day}`);\n  }\n  \n  return new Date(); // Return current date as fallback\n}\n\nexport function parseBigBasketSecondarySales(\n  fileBuffer: Buffer,\n  platform: string,\n  businessUnit: string,\n  periodType: string,\n  startDate?: string,\n  endDate?: string\n): ParseResult {\n  const csvContent = fileBuffer.toString('utf8');\n  \n  const parseResult = Papa.parse(csvContent, {\n    header: true,\n    skipEmptyLines: true,\n    transformHeader: (header) => {\n      // Transform headers to match our database schema\n      const headerMap: Record<string, string> = {\n        'date_range': 'date_range',\n        'source_city_name': 'source_city_name',\n        'brand_name': 'brand_name',\n        'top_slug': 'top_slug',\n        'mid_slug': 'mid_slug',\n        'leaf_slug': 'leaf_slug',\n        'source_sku_id': 'source_sku_id',\n        'sku_description': 'sku_description',\n        'sku_weight': 'sku_weight',\n        'total_quantity': 'total_quantity',\n        'total_mrp': 'total_mrp',\n        'total_sales': 'total_sales'\n      };\n      return headerMap[header] || header;\n    }\n  });\n\n  if (parseResult.errors && parseResult.errors.length > 0) {\n    console.warn('CSV parsing errors:', parseResult.errors);\n  }\n\n  const rawData = parseResult.data as any[];\n  \n  const items: BigBasketData[] = rawData\n    .filter(row => row && row['source_sku_id']) // Filter out empty rows\n    .map(row => {\n      return {\n        date_range: row['date_range'] || '',\n        source_city_name: row['source_city_name'] || '',\n        brand_name: row['brand_name'] || '',\n        top_slug: row['top_slug'] || '',\n        mid_slug: row['mid_slug'] || '',\n        leaf_slug: row['leaf_slug'] || '',\n        source_sku_id: row['source_sku_id'] || '',\n        sku_description: row['sku_description'] || '',\n        sku_weight: row['sku_weight'] || '',\n        total_quantity: parseNumber(row['total_quantity']),\n        total_mrp: parseNumber(row['total_mrp']),\n        total_sales: parseNumber(row['total_sales']),\n        attachment_path: null\n      };\n    });\n\n  // Calculate summary\n  const totalSalesValue = items.reduce((sum, item) => sum + item.total_sales, 0);\n  const uniqueProducts = new Set(items.map(item => item.source_sku_id).filter(Boolean)).size;\n  \n  const dateRangeStr = periodType === \"date-range\" && startDate && endDate \n    ? `${startDate} to ${endDate}` \n    : startDate || 'Unknown';\n\n  // Extract report date from the data itself (BigBasket uses date_range field)\n  let reportDate: Date | undefined;\n  let periodStart: Date | undefined;\n  let periodEnd: Date | undefined;\n  \n  if (items.length > 0 && items[0].date_range) {\n    // Extract date from BigBasket's date_range field\n    reportDate = extractDateFromRange(items[0].date_range);\n    \n    if (periodType === \"date-range\") {\n      periodStart = startDate ? new Date(startDate) : reportDate;\n      periodEnd = endDate ? new Date(endDate) : reportDate;\n    }\n  } else {\n    // Fallback to provided dates\n    reportDate = periodType === \"daily\" && startDate ? new Date(startDate) : new Date();\n    periodStart = periodType === \"date-range\" && startDate ? new Date(startDate) : undefined;\n    periodEnd = periodType === \"date-range\" && endDate ? new Date(endDate) : undefined;\n  }\n\n  return {\n    platform,\n    businessUnit,\n    periodType,\n    reportDate,\n    periodStart,\n    periodEnd,\n    totalItems: items.length,\n    items,\n    summary: {\n      totalRecords: items.length,\n      totalSalesValue,\n      uniqueProducts,\n      dateRange: dateRangeStr\n    }\n  };\n}","size_bytes":5028},"client/src/pages/inventory.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Sheet, SheetContent, SheetTrigger, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  ArrowRight,\n  RotateCcw, \n  Calendar,\n  FileText,\n  Upload,\n  Eye,\n  Database,\n  Package,\n  TrendingUp,\n  Boxes,\n  AlertTriangle,\n  Menu,\n  CheckCircle2,\n  XCircle\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ntype Step = \"platform\" | \"business-unit\" | \"period-type\" | \"range\" | \"upload\" | \"preview\";\n\ninterface ParsedInventoryData {\n  platform: string;\n  businessUnit: string;\n  periodType: 'daily' | 'range';\n  reportDate?: string;\n  periodStart?: string;\n  periodEnd?: string;\n  totalItems: number;\n  items: any[];\n  summary: {\n    totalProducts: number;\n    // Jio Mart specific fields\n    totalSellableInventory?: number;\n    totalUnsellableInventory?: number;\n    totalIntransit?: number;\n    totalOrders?: number;\n    // Blinkit specific fields\n    totalStockOnHand?: number;\n    totalAvailableQuantity?: number;\n    totalReservedQuantity?: number;\n    totalDamagedQuantity?: number;\n    totalExpiredQuantity?: number;\n    // Amazon specific fields\n    totalUnitsAvailable?: number;\n    totalInboundQuantity?: number;\n    totalUnfulfillableQuantity?: number;\n    totalValue?: number;\n    // Swiggy specific fields\n    totalWarehouseQty?: number;\n    totalOpenPoQty?: number;\n    totalPotentialGmvLoss?: number;\n    uniqueFacilities?: number;\n    uniqueCities?: number;\n    // FlipKart specific fields\n    totalLiveOnWebsite?: number;\n    totalSales7D?: number;\n    totalSales30D?: number;\n    totalB2bScheduled?: number;\n    uniqueWarehouses?: number;\n    // Zepto specific fields\n    totalRecords?: number;\n    totalUnits?: number;\n    uniqueCities?: number;\n    uniqueSKUs?: number;\n    // BigBasket specific fields\n    totalSOH?: number;\n    totalSOHValue?: number;\n    uniqueBrands?: number;\n  };\n}\n\nconst PLATFORMS = [\n  {\n    id: \"jiomart\",\n    name: \"Jio Mart\",\n    description: \"Upload Jio Mart inventory data\",\n    icon: Package,\n  },\n  {\n    id: \"blinkit\",\n    name: \"Blinkit\",\n    description: \"Upload Blinkit inventory data\",\n    icon: Package,\n  },\n  {\n    id: \"amazon\",\n    name: \"Amazon\",\n    description: \"Upload Amazon inventory data (XLSX/CSV)\",\n    icon: Package,\n  },\n  {\n    id: \"swiggy\",\n    name: \"Swiggy\",\n    description: \"Upload Swiggy inventory data\",\n    icon: Package,\n  },\n  {\n    id: \"flipkart\",\n    name: \"FlipKart\",\n    description: \"Upload FlipKart inventory data (CSV)\",\n    icon: Package,\n  },\n  {\n    id: \"zepto\",\n    name: \"Zepto\",\n    description: \"Upload Zepto inventory data (CSV)\",\n    icon: Package,\n  },\n  {\n    id: \"bigbasket\",\n    name: \"BigBasket\",\n    description: \"Upload BigBasket inventory data (CSV)\",\n    icon: Package,\n  },\n];\n\nconst BUSINESS_UNITS = [\n  {\n    id: \"jm\",\n    name: \"Jivo Mart\", \n    description: \"Jivo Mart products inventory data\",\n  },\n  {\n    id: \"jw\",\n    name: \"Jivo Wellness\", \n    description: \"Jivo Wellness products inventory data\",\n  },\n];\n\nconst PERIOD_TYPES = [\n  {\n    id: \"daily\",\n    name: \"Daily Report\",\n    description: \"Upload daily inventory report\",\n    icon: Calendar,\n  },\n  {\n    id: \"range\",\n    name: \"Date Range Report\",\n    description: \"Upload inventory report for a specific date range\",\n    icon: Calendar,\n  },\n];\n\nexport default function InventoryPage() {\n  const [currentStep, setCurrentStep] = useState<Step>(\"platform\");\n  const [selectedPlatform, setSelectedPlatform] = useState<string>(\"\");\n  const [selectedBusinessUnit, setSelectedBusinessUnit] = useState<string>(\"\");\n  const [selectedPeriodType, setSelectedPeriodType] = useState<string>(\"\");\n  const [dateRange, setDateRange] = useState<{ startDate: string; endDate: string }>({\n    startDate: \"\",\n    endDate: \"\"\n  });\n  const [file, setFile] = useState<File | null>(null);\n  const [parsedData, setParsedData] = useState<ParsedInventoryData | null>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const [fileHash, setFileHash] = useState<string>(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isMobile, setIsMobile] = useState(false);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { toast } = useToast();\n\n  // Check for mobile view\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    \n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  // Generate file hash for duplicate detection\n  const generateFileHash = async (file: File): Promise<string> => {\n    const buffer = await file.arrayBuffer();\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  };\n\n  const selectedPlatformData = PLATFORMS.find((p) => p.id === selectedPlatform);\n  const selectedBusinessUnitData = BUSINESS_UNITS.find((bu) => bu.id === selectedBusinessUnit);\n\n  // Filter business units based on selected platform\n  const getAvailableBusinessUnits = () => {\n    if (selectedPlatform === \"amazon\") {\n      return BUSINESS_UNITS; // Amazon supports both JM and JW\n    } else {\n      return BUSINESS_UNITS.filter(unit => unit.id === \"jm\"); // Other platforms only support JM\n    }\n  };\n\n  const previewMutation = useMutation({\n    mutationFn: async (file: File) => {\n      setIsUploading(true);\n      setUploadProgress(10);\n      \n      // Generate file hash for duplicate detection\n      const hash = await generateFileHash(file);\n      setFileHash(hash);\n      setUploadProgress(30);\n      \n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"platform\", selectedPlatform);\n      formData.append(\"businessUnit\", selectedBusinessUnit);\n      formData.append(\"periodType\", selectedPeriodType);\n      formData.append(\"fileHash\", hash);\n      \n      if (selectedPeriodType === \"range\") {\n        formData.append(\"periodStart\", dateRange.startDate);\n        formData.append(\"periodEnd\", dateRange.endDate);\n      }\n\n      setUploadProgress(60);\n\n      const response = await fetch(\"/api/inventory/preview\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      setUploadProgress(80);\n\n      if (!response.ok) {\n        const error = await response.json();\n        \n        // Throw an error object with response details for better error handling\n        const errorObj = new Error(error.error || \"Failed to preview file\");\n        (errorObj as any).response = { status: response.status, data: error };\n        throw errorObj;\n      }\n\n      setUploadProgress(100);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setParsedData(data);\n      setCurrentStep(\"preview\");\n      setIsUploading(false);\n      setUploadProgress(0);\n      toast({\n        title: \"File parsed successfully\",\n        description: `Found ${data.totalItems || 0} items`,\n        duration: 3000,\n      });\n    },\n    onError: (error: any) => {\n      setIsUploading(false);\n      setUploadProgress(0);\n      \n      // Since previews should never be blocked, this shouldn't happen\n      // But handle gracefully just in case\n      toast({\n        title: \"Preview Error\",\n        description: error.message || \"Unable to preview file. Please try again.\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    },\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async () => {\n      if (!file || !selectedPlatform || !selectedBusinessUnit) {\n        throw new Error(\"Missing required data\");\n      }\n\n      setIsUploading(true);\n      setUploadProgress(10);\n\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"platform\", selectedPlatform);\n      formData.append(\"businessUnit\", selectedBusinessUnit);\n      formData.append(\"periodType\", selectedPeriodType);\n      formData.append(\"fileHash\", fileHash);\n      \n      if (selectedPeriodType === \"range\") {\n        formData.append(\"startDate\", dateRange.startDate);\n        formData.append(\"endDate\", dateRange.endDate);\n      }\n\n      setUploadProgress(50);\n\n      const response = await fetch(\"/api/inventory/import\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      setUploadProgress(80);\n\n      if (!response.ok) {\n        const error = await response.json();\n        \n        // Throw an error object with response details for better error handling\n        const errorObj = new Error(error.error || \"Failed to import data\");\n        (errorObj as any).response = { status: response.status, data: error };\n        throw errorObj;\n      }\n\n      setUploadProgress(100);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setIsUploading(false);\n      setUploadProgress(0);\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      toast({\n        title: \"Data imported successfully\",\n        description: `Imported ${data.importedCount || 0} items to ${data.targetTable}`,\n        duration: 4000,\n      });\n      resetToStart();\n    },\n    onError: (error: any) => {\n      setIsUploading(false);\n      setUploadProgress(0);\n      \n      // Handle duplicate file detection with detailed error message  \n      if (error.response?.status === 409) {\n        const errorData = error.response.data;\n        toast({\n          title: \"Already Imported\",\n          description: errorData.message || \"This file has already been successfully imported. The data is already in your database.\",\n          variant: \"default\",\n          duration: 6000,\n        });\n      } else {\n        toast({\n          title: \"Import failed\",\n          description: error.message,\n          variant: \"destructive\",\n          duration: 5000,\n        });\n      }\n    }\n  });\n\n  const handleFileUpload = async (file: File) => {\n    setFile(file);\n    await previewMutation.mutateAsync(file);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleFileUpload(file);\n    }\n  };\n\n  const goBack = () => {\n    switch (currentStep) {\n      case \"business-unit\":\n        setCurrentStep(\"platform\");\n        break;\n      case \"period-type\":\n        setCurrentStep(\"business-unit\");\n        break;\n      case \"range\":\n        setCurrentStep(\"period-type\");\n        break;\n      case \"upload\":\n        setCurrentStep(\"range\");\n        break;\n      case \"preview\":\n        setCurrentStep(\"upload\");\n        setParsedData(null);\n        break;\n    }\n  };\n\n  const resetToStart = () => {\n    setCurrentStep(\"platform\");\n    setSelectedPlatform(\"\");\n    setSelectedBusinessUnit(\"\");\n    setSelectedPeriodType(\"\");\n    setDateRange({ startDate: \"\", endDate: \"\" });\n    setFile(null);\n    setParsedData(null);\n  };\n\n  const handlePlatformSelect = (platformId: string) => {\n    setSelectedPlatform(platformId);\n    setCurrentStep(\"business-unit\");\n  };\n\n  const handleBusinessUnitSelect = (businessUnitId: string) => {\n    setSelectedBusinessUnit(businessUnitId);\n    setCurrentStep(\"period-type\");\n  };\n\n  const handlePeriodTypeSelect = (periodTypeId: string) => {\n    setSelectedPeriodType(periodTypeId);\n    setCurrentStep(\"range\");\n  };\n\n  const handleDateRangeNext = () => {\n    if (selectedPeriodType === \"daily\" || (selectedPeriodType === \"range\" && dateRange.startDate && dateRange.endDate)) {\n      setCurrentStep(\"upload\");\n    }\n  };\n\n  // Mobile sidebar navigation content\n  const SidebarContent = () => (\n    <div className=\"p-4 h-full bg-gray-50\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">Navigation</h2>\n        <p className=\"text-sm text-gray-600\">Inventory workflow steps</p>\n      </div>\n      \n      {/* Progress in sidebar */}\n      <div className=\"space-y-4\">\n        <div className={`flex items-center space-x-3 p-3 rounded-lg ${currentStep === \"platform\" ? \"bg-blue-100 text-blue-700\" : \"bg-white\"}`}>\n          <div className=\"w-6 h-6 rounded-full bg-blue-500 text-white text-xs flex items-center justify-center\">1</div>\n          <span className=\"font-medium\">Platform</span>\n          {selectedPlatform && <CheckCircle2 className=\"w-4 h-4 text-green-500\" />}\n        </div>\n        \n        <div className={`flex items-center space-x-3 p-3 rounded-lg ${currentStep === \"business-unit\" ? \"bg-blue-100 text-blue-700\" : \"bg-white\"}`}>\n          <div className=\"w-6 h-6 rounded-full bg-blue-500 text-white text-xs flex items-center justify-center\">2</div>\n          <span className=\"font-medium\">Business Unit</span>\n          {selectedBusinessUnit && <CheckCircle2 className=\"w-4 h-4 text-green-500\" />}\n        </div>\n        \n        <div className={`flex items-center space-x-3 p-3 rounded-lg ${currentStep === \"period-type\" ? \"bg-blue-100 text-blue-700\" : \"bg-white\"}`}>\n          <div className=\"w-6 h-6 rounded-full bg-blue-500 text-white text-xs flex items-center justify-center\">3</div>\n          <span className=\"font-medium\">Period Type</span>\n          {selectedPeriodType && <CheckCircle2 className=\"w-4 h-4 text-green-500\" />}\n        </div>\n        \n        <div className={`flex items-center space-x-3 p-3 rounded-lg ${currentStep === \"range\" ? \"bg-blue-100 text-blue-700\" : \"bg-white\"}`}>\n          <div className=\"w-6 h-6 rounded-full bg-blue-500 text-white text-xs flex items-center justify-center\">4</div>\n          <span className=\"font-medium\">Date Range</span>\n          {(selectedPeriodType === \"daily\" || (dateRange.startDate && dateRange.endDate)) && <CheckCircle2 className=\"w-4 h-4 text-green-500\" />}\n        </div>\n        \n        <div className={`flex items-center space-x-3 p-3 rounded-lg ${currentStep === \"upload\" ? \"bg-blue-100 text-blue-700\" : \"bg-white\"}`}>\n          <div className=\"w-6 h-6 rounded-full bg-blue-500 text-white text-xs flex items-center justify-center\">5</div>\n          <span className=\"font-medium\">Upload</span>\n          {file && <CheckCircle2 className=\"w-4 h-4 text-green-500\" />}\n        </div>\n        \n        <div className={`flex items-center space-x-3 p-3 rounded-lg ${currentStep === \"preview\" ? \"bg-blue-100 text-blue-700\" : \"bg-white\"}`}>\n          <div className=\"w-6 h-6 rounded-full bg-blue-500 text-white text-xs flex items-center justify-center\">6</div>\n          <span className=\"font-medium\">Preview</span>\n          {parsedData && <CheckCircle2 className=\"w-4 h-4 text-green-500\" />}\n        </div>\n      </div>\n      \n      {/* Upload progress */}\n      {isUploading && (\n        <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <Upload className=\"w-4 h-4 text-blue-600\" />\n            <span className=\"text-sm font-medium text-blue-900\">Uploading...</span>\n          </div>\n          <div className=\"w-full bg-blue-200 rounded-full h-2\">\n            <div \n              className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" \n              style={{ width: `${uploadProgress}%` }}\n            ></div>\n          </div>\n          <p className=\"text-xs text-blue-700 mt-1\">{uploadProgress}% complete</p>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"container mx-auto p-4 sm:p-6 max-w-6xl\">\n      {/* Mobile header with hamburger menu */}\n      <div className=\"flex items-center justify-between mb-6 sm:mb-8\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">Inventory Management</h1>\n          <p className=\"text-sm sm:text-base text-gray-600\">\n            Upload and manage inventory data with step-by-step workflow\n          </p>\n        </div>\n        \n        {/* Mobile menu button */}\n        {isMobile && (\n          <Sheet open={sidebarOpen} onOpenChange={setSidebarOpen}>\n            <SheetTrigger asChild>\n              <Button variant=\"outline\" size=\"icon\" className=\"lg:hidden\">\n                <Menu className=\"h-4 w-4\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"left\" className=\"w-80\">\n              <SheetHeader>\n                <SheetTitle>Inventory Workflow</SheetTitle>\n              </SheetHeader>\n              <SidebarContent />\n            </SheetContent>\n          </Sheet>\n        )}\n      </div>\n\n      {/* Progress Steps - Hidden on mobile, shown on desktop */}\n      {!isMobile && (\n        <div className=\"mb-6 sm:mb-8\">\n          <div className=\"flex flex-wrap items-center justify-between space-y-2 sm:space-y-0 bg-white p-4 rounded-lg border\">\n            {/* Step 1: Platform */}\n            <div className=\"flex items-center space-x-2\">\n              <div className={`flex items-center space-x-2 ${currentStep === \"platform\" ? \"text-blue-600\" : [\"business-unit\", \"period-type\", \"range\", \"upload\", \"preview\"].includes(currentStep) ? \"text-green-600\" : \"text-gray-400\"}`}>\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${currentStep === \"platform\" ? \"bg-blue-100 text-blue-600\" : [\"business-unit\", \"period-type\", \"range\", \"upload\", \"preview\"].includes(currentStep) ? \"bg-green-100 text-green-600\" : \"bg-gray-100\"}`}>\n                  1\n                </div>\n                <span className=\"text-sm font-medium\">Platform</span>\n              </div>\n            </div>\n\n            {/* Step 2: Business Unit */}\n            <div className=\"flex items-center space-x-2\">\n              <div className={`flex items-center space-x-2 ${currentStep === \"business-unit\" ? \"text-blue-600\" : [\"period-type\", \"range\", \"upload\", \"preview\"].includes(currentStep) ? \"text-green-600\" : \"text-gray-400\"}`}>\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${currentStep === \"business-unit\" ? \"bg-blue-100 text-blue-600\" : [\"period-type\", \"range\", \"upload\", \"preview\"].includes(currentStep) ? \"bg-green-100 text-green-600\" : \"bg-gray-100\"}`}>\n                  2\n                </div>\n                <span className=\"text-sm font-medium\">Business Unit</span>\n              </div>\n            </div>\n\n            {/* Step 3: Period Type */}\n            <div className=\"flex items-center space-x-2\">\n              <div className={`flex items-center space-x-2 ${currentStep === \"period-type\" ? \"text-blue-600\" : [\"range\", \"upload\", \"preview\"].includes(currentStep) ? \"text-green-600\" : \"text-gray-400\"}`}>\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${currentStep === \"period-type\" ? \"bg-blue-100 text-blue-600\" : [\"range\", \"upload\", \"preview\"].includes(currentStep) ? \"bg-green-100 text-green-600\" : \"bg-gray-100\"}`}>\n                  3\n                </div>\n                <span className=\"text-sm font-medium\">Period Type</span>\n              </div>\n            </div>\n\n            {/* Step 4: Date Range */}\n            <div className=\"flex items-center space-x-2\">\n              <div className={`flex items-center space-x-2 ${currentStep === \"range\" ? \"text-blue-600\" : [\"upload\", \"preview\"].includes(currentStep) ? \"text-green-600\" : \"text-gray-400\"}`}>\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${currentStep === \"range\" ? \"bg-blue-100 text-blue-600\" : [\"upload\", \"preview\"].includes(currentStep) ? \"bg-green-100 text-green-600\" : \"bg-gray-100\"}`}>\n                  4\n                </div>\n                <span className=\"text-sm font-medium\">Date Range</span>\n              </div>\n            </div>\n\n            {/* Step 5: Upload */}\n            <div className=\"flex items-center space-x-2\">\n              <div className={`flex items-center space-x-2 ${currentStep === \"upload\" ? \"text-blue-600\" : currentStep === \"preview\" ? \"text-green-600\" : \"text-gray-400\"}`}>\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${currentStep === \"upload\" ? \"bg-blue-100 text-blue-600\" : currentStep === \"preview\" ? \"bg-green-100 text-green-600\" : \"bg-gray-100\"}`}>\n                  5\n                </div>\n                <span className=\"text-sm font-medium\">Upload</span>\n              </div>\n            </div>\n\n            {/* Step 6: Preview */}\n            <div className=\"flex items-center space-x-2\">\n              <div className={`flex items-center space-x-2 ${currentStep === \"preview\" ? \"text-blue-600\" : \"text-gray-400\"}`}>\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${currentStep === \"preview\" ? \"bg-blue-100 text-blue-600\" : \"bg-gray-100\"}`}>\n                  6\n                </div>\n                <span className=\"text-sm font-medium\">Preview</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Mobile progress indicator */}\n      {isMobile && (\n        <div className=\"mb-6\">\n          <div className=\"bg-white p-4 rounded-lg border\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-6 h-6 rounded-full bg-blue-500 text-white text-xs flex items-center justify-center\">\n                  {currentStep === \"platform\" ? \"1\" : currentStep === \"business-unit\" ? \"2\" : currentStep === \"period-type\" ? \"3\" : currentStep === \"range\" ? \"4\" : currentStep === \"upload\" ? \"5\" : \"6\"}\n                </div>\n                <span className=\"text-sm font-medium capitalize\">{currentStep.replace(\"-\", \" \")}</span>\n              </div>\n              {isUploading && (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n                  <span className=\"text-xs text-blue-600\">{uploadProgress}%</span>\n                </div>\n              )}\n            </div>\n            {isUploading && (\n              <div className=\"mt-2 w-full bg-gray-200 rounded-full h-1\">\n                <div \n                  className=\"bg-blue-600 h-1 rounded-full transition-all duration-300\" \n                  style={{ width: `${uploadProgress}%` }}\n                ></div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Step 1: Platform Selection */}\n      {currentStep === \"platform\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Package className=\"w-5 h-5\" />\n              <span>Select Platform</span>\n            </CardTitle>\n            <CardDescription>\n              Choose the platform for inventory data upload\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {PLATFORMS.map((platform) => {\n                const IconComponent = platform.icon;\n                return (\n                  <Card\n                    key={platform.id}\n                    className={`cursor-pointer transition-all hover:shadow-md ${\n                      selectedPlatform === platform.id ? \"ring-2 ring-blue-500 bg-blue-50\" : \"\"\n                    }`}\n                    onClick={() => handlePlatformSelect(platform.id)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"p-2 bg-blue-100 rounded-lg\">\n                          <IconComponent className=\"w-5 h-5 text-blue-600\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold\">{platform.name}</h3>\n                          <p className=\"text-sm text-gray-600\">{platform.description}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 2: Business Unit Selection */}\n      {currentStep === \"business-unit\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"w-5 h-5\" />\n              <span>Select Business Unit</span>\n            </CardTitle>\n            <CardDescription>\n              Selected Platform: {selectedPlatformData?.name} - Choose your business unit\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              {getAvailableBusinessUnits().map((unit) => (\n                <Card\n                  key={unit.id}\n                  className={`cursor-pointer transition-all hover:shadow-md ${\n                    selectedBusinessUnit === unit.id ? \"ring-2 ring-blue-500 bg-blue-50\" : \"\"\n                  }`}\n                  onClick={() => handleBusinessUnitSelect(unit.id)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"p-2 bg-green-100 rounded-lg\">\n                        <TrendingUp className=\"w-5 h-5 text-green-600\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold\">{unit.name}</h3>\n                        <p className=\"text-sm text-gray-600\">{unit.description}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n            <div className=\"mt-4 flex justify-start\">\n              <Button \n                variant=\"outline\" \n                onClick={goBack} \n                className=\"flex items-center space-x-2 w-full sm:w-auto min-h-[44px]\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Back</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 3: Period Type Selection */}\n      {currentStep === \"period-type\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Calendar className=\"w-5 h-5\" />\n              <span>Select Period Type</span>\n            </CardTitle>\n            <CardDescription>\n              Selected: {selectedPlatformData?.name} - {selectedBusinessUnitData?.name} - Choose reporting period\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              {PERIOD_TYPES.map((periodType) => {\n                const IconComponent = periodType.icon;\n                return (\n                  <Card\n                    key={periodType.id}\n                    className={`cursor-pointer transition-all hover:shadow-md ${\n                      selectedPeriodType === periodType.id ? \"ring-2 ring-blue-500 bg-blue-50\" : \"\"\n                    }`}\n                    onClick={() => handlePeriodTypeSelect(periodType.id)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"p-2 bg-purple-100 rounded-lg\">\n                          <IconComponent className=\"w-5 h-5 text-purple-600\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold\">{periodType.name}</h3>\n                          <p className=\"text-sm text-gray-600\">{periodType.description}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n            <div className=\"mt-4 flex justify-start\">\n              <Button \n                variant=\"outline\" \n                onClick={goBack} \n                className=\"flex items-center space-x-2 w-full sm:w-auto min-h-[44px]\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Back</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 4: Date Range Selection */}\n      {currentStep === \"range\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Calendar className=\"w-5 h-5\" />\n              <span>Set Date Range</span>\n            </CardTitle>\n            <CardDescription>\n              {selectedPlatformData?.name} - {selectedBusinessUnitData?.name} - {PERIOD_TYPES.find(p => p.id === selectedPeriodType)?.name}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {selectedPeriodType === \"daily\" ? (\n              <div className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600\">Daily reports are ready for upload without date specification.</p>\n                <div className=\"flex flex-col sm:flex-row gap-3 sm:justify-between\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={goBack} \n                    className=\"flex items-center space-x-2 w-full sm:w-auto min-h-[44px]\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4\" />\n                    <span>Back</span>\n                  </Button>\n                  <Button \n                    onClick={handleDateRangeNext} \n                    className=\"flex items-center space-x-2 w-full sm:w-auto min-h-[44px]\"\n                  >\n                    <span>Continue</span>\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"startDate\">Start Date</Label>\n                    <Input\n                      id=\"startDate\"\n                      type=\"date\"\n                      value={dateRange.startDate}\n                      onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"endDate\">End Date</Label>\n                    <Input\n                      id=\"endDate\"\n                      type=\"date\"\n                      value={dateRange.endDate}\n                      onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}\n                    />\n                  </div>\n                </div>\n                <div className=\"flex flex-col sm:flex-row gap-3 sm:justify-between\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={goBack} \n                    className=\"flex items-center space-x-2 w-full sm:w-auto min-h-[44px]\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4\" />\n                    <span>Back</span>\n                  </Button>\n                  <Button \n                    onClick={handleDateRangeNext}\n                    disabled={!dateRange.startDate || !dateRange.endDate}\n                    className=\"flex items-center space-x-2 w-full sm:w-auto min-h-[44px]\"\n                  >\n                    <span>Continue</span>\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 5: File Upload */}\n      {currentStep === \"upload\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Upload className=\"w-5 h-5\" />\n              <span>Upload File</span>\n            </CardTitle>\n            <CardDescription>\n              Upload your inventory file for {selectedPlatformData?.name} - {selectedBusinessUnitData?.name}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div\n                className={`border-2 border-dashed rounded-lg p-4 sm:p-8 text-center transition-colors ${\n                  dragActive ? \"border-blue-500 bg-blue-50\" : \"border-gray-300\"\n                }`}\n              >\n                <Upload className=\"w-8 h-8 sm:w-12 sm:h-12 text-gray-400 mx-auto mb-4\" />\n                <div className=\"space-y-2\">\n                  <p className=\"text-base sm:text-lg font-medium\">Choose file to upload</p>\n                  <p className=\"text-xs sm:text-sm text-gray-600\">\n                    {selectedPlatform === 'amazon' ? 'CSV and XLSX files supported' : 'CSV files supported'}\n                  </p>\n                  <div className=\"relative\">\n                    <input\n                      type=\"file\"\n                      accept={selectedPlatform === 'amazon' ? '.csv,.xlsx' : '.csv'}\n                      onChange={handleInputChange}\n                      className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                      disabled={previewMutation.isPending}\n                    />\n                    <Button \n                      disabled={previewMutation.isPending}\n                      className=\"w-full sm:w-auto px-4 py-2\"\n                    >\n                      {previewMutation.isPending ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                          <span>Processing...</span>\n                        </div>\n                      ) : (\n                        \"Browse Files\"\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-col sm:flex-row gap-3 sm:justify-between\">\n                <Button \n                  variant=\"outline\" \n                  onClick={goBack} \n                  className=\"flex items-center space-x-2 w-full sm:w-auto min-h-[44px]\"\n                >\n                  <ArrowLeft className=\"w-4 h-4\" />\n                  <span>Back</span>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={resetToStart} \n                  className=\"flex items-center space-x-2 w-full sm:w-auto min-h-[44px]\"\n                >\n                  <RotateCcw className=\"w-4 h-4\" />\n                  <span>Start Over</span>\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 6: Preview Data */}\n      {currentStep === \"preview\" && parsedData && (\n        <div className=\"flex flex-col min-h-0\">\n          {/* Summary Cards - Responsive */}\n          <Card className=\"mb-4\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Eye className=\"w-5 h-5\" />\n                <span>Preview Inventory Data</span>\n              </CardTitle>\n              <CardDescription>\n                Review the inventory data before importing to {selectedPlatformData?.name} - {selectedBusinessUnitData?.name}\n                <br />\n                <span className=\"font-medium text-blue-600\">\n                  Target Table: INV_{\n                    selectedPlatform === 'jiomart' ? 'JioMart' : \n                    selectedPlatform === 'amazon' ? 'Amazon' : 'Blinkit'\n                  }_{selectedBusinessUnit.toUpperCase()}_{selectedPeriodType === 'daily' ? 'Daily' : 'Range'}\n                </span>\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n                <div className=\"p-3 sm:p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-xl sm:text-2xl font-bold text-blue-600\">{parsedData.totalItems || 0}</div>\n                  <div className=\"text-xs sm:text-sm text-blue-600\">Total Records</div>\n                </div>\n                {selectedPlatform === 'jiomart' ? (\n                  <>\n                    <div className=\"p-3 sm:p-4 bg-green-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-green-600\">{parsedData.summary?.totalSellableInventory || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-green-600\">Sellable Inventory</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-red-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-red-600\">{parsedData.summary?.totalUnsellableInventory || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-red-600\">Unsellable Inventory</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-yellow-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-yellow-600\">{parsedData.summary?.totalIntransit || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-yellow-600\">In Transit</div>\n                    </div>\n                  </>\n                ) : selectedPlatform === 'amazon' ? (\n                  <>\n                    <div className=\"p-3 sm:p-4 bg-green-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-green-600\">{parsedData.summary?.totalUnitsAvailable || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-green-600\">Total Units Received</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-blue-600\">{parsedData.summary?.totalInboundQuantity || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-blue-600\">Open PO Quantity</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-purple-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-purple-600\">₹{(parsedData.summary?.totalValue || 0).toLocaleString()}</div>\n                      <div className=\"text-xs sm:text-sm text-purple-600\">Net Received Value</div>\n                    </div>\n                  </>\n                ) : selectedPlatform === 'swiggy' ? (\n                  <>\n                    <div className=\"p-3 sm:p-4 bg-green-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-green-600\">{parsedData.summary?.totalWarehouseQty || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-green-600\">Warehouse Qty</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-blue-600\">{parsedData.summary?.totalOpenPoQty || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-blue-600\">Open PO Qty</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-red-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-red-600\">₹{(parsedData.summary?.totalPotentialGmvLoss || 0).toLocaleString()}</div>\n                      <div className=\"text-xs sm:text-sm text-red-600\">Potential Loss</div>\n                    </div>\n                  </>\n                ) : selectedPlatform === 'flipkart' ? (\n                  <>\n                    <div className=\"p-3 sm:p-4 bg-green-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-green-600\">{parsedData.summary?.totalLiveOnWebsite || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-green-600\">Live on Website</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-blue-600\">{parsedData.summary?.totalSales7D || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-blue-600\">7 Days Sales</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-purple-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-purple-600\">{parsedData.summary?.totalB2bScheduled || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-purple-600\">B2B Scheduled</div>\n                    </div>\n                  </>\n                ) : selectedPlatform === 'zepto' ? (\n                  <>\n                    <div className=\"p-3 sm:p-4 bg-green-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-green-600\">{parsedData.summary?.totalUnits || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-green-600\">Total Units</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-blue-600\">{parsedData.summary?.uniqueCities || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-blue-600\">Cities</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-purple-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-purple-600\">{parsedData.summary?.uniqueSKUs || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-purple-600\">Unique SKUs</div>\n                    </div>\n                  </>\n                ) : selectedPlatform === 'bigbasket' ? (\n                  <>\n                    <div className=\"p-3 sm:p-4 bg-green-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-green-600\">{parsedData.summary?.totalSOH || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-green-600\">Stock on Hand</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-blue-600\">₹{(parsedData.summary?.totalSOHValue || 0).toLocaleString()}</div>\n                      <div className=\"text-xs sm:text-sm text-blue-600\">SOH Value</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-purple-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-purple-600\">{parsedData.summary?.uniqueBrands || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-purple-600\">Unique Brands</div>\n                    </div>\n                  </>\n                ) : (\n                  <>\n                    <div className=\"p-3 sm:p-4 bg-green-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-green-600\">{parsedData.summary?.totalStockOnHand || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-green-600\">Stock on Hand</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-blue-600\">{parsedData.summary?.totalAvailableQuantity || 0}</div>\n                      <div className=\"text-xs sm:text-sm text-blue-600\">Available</div>\n                    </div>\n                    <div className=\"p-3 sm:p-4 bg-red-50 rounded-lg\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-red-600\">{(parsedData.summary?.totalDamagedQuantity || 0) + (parsedData.summary?.totalExpiredQuantity || 0)}</div>\n                      <div className=\"text-xs sm:text-sm text-red-600\">Damaged + Expired</div>\n                    </div>\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Data Table - Mobile Responsive */}\n          <Card className=\"mb-4\">\n            <CardHeader>\n              <CardTitle className=\"text-base sm:text-lg\">Inventory Data Preview</CardTitle>\n              <CardDescription>\n                Review all {parsedData.items?.length || 0} inventory records from your uploaded file\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {parsedData.items && parsedData.items.length > 0 && (\n                <div className=\"border rounded-lg overflow-hidden\">\n                  <div className=\"max-h-96 sm:max-h-[500px] overflow-auto\">\n                    <Table>\n                      <TableHeader className=\"sticky top-0 bg-white z-10 border-b\">\n                        <TableRow>\n                          {selectedPlatform === 'jiomart' && <TableHead className=\"w-32 border-r\">RFC ID</TableHead>}\n                          <TableHead className=\"w-40 border-r\">\n                            {selectedPlatform === 'amazon' ? 'ASIN' : \n                             selectedPlatform === 'swiggy' ? 'SKU Code' : \n                             selectedPlatform === 'flipkart' ? 'SKU' : \n                             selectedPlatform === 'zepto' ? 'SKU Code' : \n                             selectedPlatform === 'bigbasket' ? 'SKU ID' : 'SKU ID'}\n                          </TableHead>\n                          <TableHead className=\"min-w-[250px] border-r\">\n                            {selectedPlatform === 'jiomart' ? 'Title' : \n                             selectedPlatform === 'amazon' ? 'Product Title' : \n                             selectedPlatform === 'swiggy' ? 'SKU Description' : \n                             selectedPlatform === 'flipkart' ? 'Product Title' : \n                             selectedPlatform === 'zepto' ? 'SKU Name' : \n                             selectedPlatform === 'bigbasket' ? 'SKU Name' : 'Product Name'}\n                          </TableHead>\n                          <TableHead className=\"w-32 border-r\">\n                            {selectedPlatform === 'amazon' ? 'Brand' : \n                             selectedPlatform === 'swiggy' ? 'Storage Type' : \n                             selectedPlatform === 'flipkart' ? 'Brand' : \n                             selectedPlatform === 'zepto' ? 'City' : \n                             selectedPlatform === 'bigbasket' ? 'City' : 'Category'}\n                          </TableHead>\n                          {selectedPlatform === 'blinkit' && <TableHead className=\"w-32 border-r\">Brand</TableHead>}\n                          {selectedPlatform === 'amazon' && <TableHead className=\"w-32 border-r\">Condition</TableHead>}\n                          {selectedPlatform === 'swiggy' && <TableHead className=\"w-32 border-r\">L1 Category</TableHead>}\n                          {selectedPlatform === 'swiggy' && <TableHead className=\"w-32 border-r\">L2 Category</TableHead>}\n                          {selectedPlatform === 'swiggy' && <TableHead className=\"w-32 border-r\">City</TableHead>}\n                          {selectedPlatform === 'swiggy' && <TableHead className=\"w-32 border-r\">Facility</TableHead>}\n                          {selectedPlatform === 'flipkart' && <TableHead className=\"w-32 border-r\">Warehouse</TableHead>}\n                          {selectedPlatform === 'zepto' && <TableHead className=\"w-32 border-r\">Brand</TableHead>}\n                          {selectedPlatform === 'zepto' && <TableHead className=\"w-32 border-r\">Category</TableHead>}\n                          {selectedPlatform === 'zepto' && <TableHead className=\"w-32 border-r\">EAN</TableHead>}\n                          {selectedPlatform === 'bigbasket' && <TableHead className=\"w-32 border-r\">Brand</TableHead>}\n                          {selectedPlatform === 'bigbasket' && <TableHead className=\"w-32 border-r\">Weight</TableHead>}\n                          {selectedPlatform === 'bigbasket' && <TableHead className=\"w-32 border-r\">Category</TableHead>}\n                          <TableHead className=\"w-24 border-r\">\n                            {selectedPlatform === 'jiomart' ? 'Status' : \n                             selectedPlatform === 'amazon' ? 'Units Available' : \n                             selectedPlatform === 'swiggy' ? 'Days on Hand' : \n                             selectedPlatform === 'flipkart' ? 'Price' : \n                             selectedPlatform === 'zepto' ? 'Units' : \n                             selectedPlatform === 'bigbasket' ? 'Pack Type' : 'Size'}\n                          </TableHead>\n                          {selectedPlatform === 'jiomart' ? (\n                            <>\n                              <TableHead className=\"text-right w-24 border-r\">Sellable</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">Unsellable</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">In Transit</TableHead>\n                              <TableHead className=\"text-right w-24\">Orders</TableHead>\n                            </>\n                          ) : selectedPlatform === 'amazon' ? (\n                            <>\n                              <TableHead className=\"text-right w-24 border-r\">Open PO Qty</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">Lead Time (days)</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">Unsellable Units</TableHead>\n                              <TableHead className=\"text-right w-24\">Net Received Value</TableHead>\n                            </>\n                          ) : selectedPlatform === 'swiggy' ? (\n                            <>\n                              <TableHead className=\"text-right w-24 border-r\">Warehouse Qty</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">Open PO Qty</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">Potential Loss</TableHead>\n                              <TableHead className=\"text-right w-24\">Business Category</TableHead>\n                            </>\n                          ) : selectedPlatform === 'flipkart' ? (\n                            <>\n                              <TableHead className=\"text-right w-24 border-r\">Live on Website</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">7D Sales</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">30D Sales</TableHead>\n                              <TableHead className=\"text-right w-24\">B2B Scheduled</TableHead>\n                            </>\n                          ) : selectedPlatform === 'zepto' ? (\n                            <>\n                              <TableHead className=\"text-right w-24 border-r\">MRP (₹)</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">Selling Price</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">Pack Size</TableHead>\n                              <TableHead className=\"text-right w-24\">Report Date</TableHead>\n                            </>\n                          ) : selectedPlatform === 'bigbasket' ? (\n                            <>\n                              <TableHead className=\"text-right w-24 border-r\">SOH</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">SOH Value (₹)</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">Mid Category</TableHead>\n                              <TableHead className=\"text-right w-24\">Leaf Category</TableHead>\n                            </>\n                          ) : (\n                            <>\n                              <TableHead className=\"text-right w-24 border-r\">Stock</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">Available</TableHead>\n                              <TableHead className=\"text-right w-24 border-r\">Reserved</TableHead>\n                              <TableHead className=\"text-right w-24\">Damaged</TableHead>\n                            </>\n                          )}\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {parsedData.items.map((item, index) => (\n                          <TableRow key={index} className=\"hover:bg-gray-50\">\n                            {selectedPlatform === 'jiomart' && (\n                              <TableCell className=\"font-mono text-xs border-r\">{item.rfc_id}</TableCell>\n                            )}\n                            <TableCell className=\"font-mono text-xs border-r\">\n                              {selectedPlatform === 'amazon' ? item.asin : \n                               selectedPlatform === 'swiggy' ? item.sku_code : \n                               selectedPlatform === 'flipkart' ? item.sku : \n                               selectedPlatform === 'zepto' ? item.skuCode : \n                               selectedPlatform === 'bigbasket' ? item.sku_id : (item.sku_id || item.fnsku)}\n                            </TableCell>\n                            <TableCell className=\"border-r\" title={\n                              selectedPlatform === 'jiomart' ? item.title : \n                              selectedPlatform === 'amazon' ? item.product_name : \n                              selectedPlatform === 'swiggy' ? item.sku_description : \n                              selectedPlatform === 'flipkart' ? item.title : \n                              selectedPlatform === 'zepto' ? item.skuName : \n                              selectedPlatform === 'bigbasket' ? item.sku_name : item.product_name\n                            }>\n                              <div className=\"max-w-[250px] truncate text-sm\">\n                                {selectedPlatform === 'jiomart' ? item.title : \n                                 selectedPlatform === 'amazon' ? item.product_name : \n                                 selectedPlatform === 'swiggy' ? item.sku_description : \n                                 selectedPlatform === 'flipkart' ? item.title : \n                                 selectedPlatform === 'zepto' ? item.skuName : \n                                 selectedPlatform === 'bigbasket' ? item.sku_name : item.product_name}\n                              </div>\n                            </TableCell>\n                            <TableCell className=\"text-sm border-r\">\n                              {selectedPlatform === 'amazon' ? item.brand : \n                               selectedPlatform === 'swiggy' ? item.storage_type : \n                               selectedPlatform === 'flipkart' ? item.brand : \n                               selectedPlatform === 'zepto' ? item.city : \n                               selectedPlatform === 'bigbasket' ? item.city : item.category}\n                            </TableCell>\n                            {selectedPlatform === 'blinkit' && (\n                              <TableCell className=\"text-sm border-r\">{item.brand}</TableCell>\n                            )}\n                            {selectedPlatform === 'amazon' && (\n                              <TableCell className=\"text-sm border-r\">{item.condition}</TableCell>\n                            )}\n                            {selectedPlatform === 'swiggy' && (\n                              <TableCell className=\"text-sm border-r\">{item.l1_category}</TableCell>\n                            )}\n                            {selectedPlatform === 'swiggy' && (\n                              <TableCell className=\"text-sm border-r\">{item.l2_category}</TableCell>\n                            )}\n                            {selectedPlatform === 'swiggy' && (\n                              <TableCell className=\"text-sm border-r\">{item.city}</TableCell>\n                            )}\n                            {selectedPlatform === 'swiggy' && (\n                              <TableCell className=\"text-sm border-r\">{item.facility_name}</TableCell>\n                            )}\n                            {selectedPlatform === 'flipkart' && (\n                              <TableCell className=\"text-sm border-r\">{item.warehouseId}</TableCell>\n                            )}\n                            {selectedPlatform === 'zepto' && (\n                              <TableCell className=\"text-sm border-r\">{item.brand}</TableCell>\n                            )}\n                            {selectedPlatform === 'zepto' && (\n                              <TableCell className=\"text-sm border-r\">{item.category}</TableCell>\n                            )}\n                            {selectedPlatform === 'zepto' && (\n                              <TableCell className=\"text-sm border-r\">{item.ean}</TableCell>\n                            )}\n                            {selectedPlatform === 'bigbasket' && (\n                              <TableCell className=\"text-sm border-r\">{item.brand_name}</TableCell>\n                            )}\n                            {selectedPlatform === 'bigbasket' && (\n                              <TableCell className=\"text-sm border-r\">{item.sku_weight}</TableCell>\n                            )}\n                            {selectedPlatform === 'bigbasket' && (\n                              <TableCell className=\"text-sm border-r\">{item.top_category_name}</TableCell>\n                            )}\n                            <TableCell className=\"border-r\">\n                              {selectedPlatform === 'jiomart' ? (\n                                <span className={`px-2 py-1 text-xs rounded-full ${\n                                  item.product_status === 'Active' \n                                    ? 'bg-green-100 text-green-800' \n                                    : 'bg-gray-100 text-gray-800'\n                                }`}>\n                                  {item.product_status}\n                                </span>\n                              ) : selectedPlatform === 'amazon' ? (\n                                <span className=\"text-sm font-mono\">{parseInt(item.units_available || '0').toLocaleString()}</span>\n                              ) : selectedPlatform === 'swiggy' ? (\n                                <span className=\"text-sm\">{item.days_on_hand || 0}</span>\n                              ) : selectedPlatform === 'flipkart' ? (\n                                <span className=\"text-sm\">₹{parseInt(item.flipkartSellingPrice || '0').toLocaleString()}</span>\n                              ) : selectedPlatform === 'zepto' ? (\n                                <span className=\"text-sm font-mono\">{item.units || 0}</span>\n                              ) : selectedPlatform === 'bigbasket' ? (\n                                <span className=\"text-sm\">{item.sku_pack_type}</span>\n                              ) : (\n                                <span className=\"text-sm\">{item.size}</span>\n                              )}\n                            </TableCell>\n                            {selectedPlatform === 'jiomart' ? (\n                              <>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.total_sellable_inv || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.total_unsellable_inv || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.mtd_fwd_intransit || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm\">\n                                  {parseInt(item.mtd_order_count || '0').toLocaleString()}\n                                </TableCell>\n                              </>\n                            ) : selectedPlatform === 'amazon' ? (\n                              <>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.inbound_quantity || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseFloat(item.last_updated_at || '0').toFixed(1)}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.unfulfillable_quantity || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm\">\n                                  {item.total_value ? `₹${parseFloat(item.total_value).toLocaleString()}` : '₹0'}\n                                </TableCell>\n                              </>\n                            ) : selectedPlatform === 'swiggy' ? (\n                              <>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.warehouse_qty_available || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.open_po_quantity || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  ₹{parseFloat(item.potential_gmv_loss || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-sm\">\n                                  {item.business_category}\n                                </TableCell>\n                              </>\n                            ) : selectedPlatform === 'flipkart' ? (\n                              <>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.liveOnWebsite || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.sales7D || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.sales30D || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm\">\n                                  {parseInt(item.b2bScheduled || '0').toLocaleString()}\n                                </TableCell>\n                              </>\n                            ) : selectedPlatform === 'zepto' ? (\n                              <>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  ₹{parseFloat(item.mrp || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  ₹{parseFloat(item.sellingPrice || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {item.packSize || '-'}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm\">\n                                  {item.reportDate ? format(new Date(item.reportDate), 'MMM dd') : '-'}\n                                </TableCell>\n                              </>\n                            ) : selectedPlatform === 'bigbasket' ? (\n                              <>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseFloat(item.soh || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  ₹{parseFloat(item.soh_value || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-sm border-r\">\n                                  {item.mid_category_name}\n                                </TableCell>\n                                <TableCell className=\"text-sm\">\n                                  {item.leaf_category_name}\n                                </TableCell>\n                              </>\n                            ) : (\n                              <>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.stock_on_hand || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.available_quantity || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm border-r\">\n                                  {parseInt(item.reserved_quantity || '0').toLocaleString()}\n                                </TableCell>\n                                <TableCell className=\"text-right text-sm\">\n                                  {parseInt(item.damaged_quantity || '0').toLocaleString()}\n                                </TableCell>\n                              </>\n                            )}\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons - Mobile Responsive */}\n          <Card className=\"mt-4\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex flex-col sm:flex-row gap-3 sm:justify-between sm:items-center\">\n                <Button \n                  variant=\"outline\" \n                  onClick={goBack} \n                  className=\"flex items-center justify-center space-x-2 w-full sm:w-auto min-h-[48px]\"\n                  size=\"lg\"\n                >\n                  <ArrowLeft className=\"w-4 h-4\" />\n                  <span>Back</span>\n                </Button>\n                <div className=\"flex flex-col sm:flex-row gap-3\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={resetToStart} \n                    className=\"flex items-center justify-center space-x-2 w-full sm:w-auto min-h-[48px]\"\n                    size=\"lg\"\n                  >\n                    <RotateCcw className=\"w-4 h-4\" />\n                    <span>Start Over</span>\n                  </Button>\n                  <Button\n                    onClick={() => importMutation.mutate()}\n                    disabled={importMutation.isPending || !parsedData.items?.length}\n                    className=\"bg-green-600 hover:bg-green-700 text-white flex items-center justify-center space-x-2 px-6 py-3 text-base sm:text-lg font-semibold shadow-lg w-full sm:w-auto min-h-[48px]\"\n                    size=\"lg\"\n                  >\n                    {importMutation.isPending ? (\n                      <>\n                        <div className=\"w-5 h-5 animate-spin rounded-full border-2 border-white border-t-transparent\" />\n                        <span>Importing...</span>\n                      </>\n                    ) : (\n                      <>\n                        <Database className=\"w-5 h-5\" />\n                        <span className=\"hidden sm:inline\">Import to Database</span>\n                        <span className=\"sm:hidden\">Import</span>\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":69005},"server/jiomart-inventory-parser.ts":{"content":"import * as csv from 'csv-parse';\n\nexport interface JioMartInventoryRow {\n  rfc_id: string;\n  rfc_name: string;\n  sku_id: string;\n  title: string;\n  category: string;\n  product_status: string;\n  last_updated_at: string;\n  total_sellable_inv: string;\n  total_unsellable_inv: string;\n  fc_dmg_inv: string;\n  lsp_dmg_inv: string;\n  cust_dmg_inv: string;\n  recvd_dmg: string;\n  expired_inv: string;\n  other_unsellable_inv: string;\n  mtd_fwd_intransit: string;\n  mtd_delvd_cust: string;\n  mtd_ret_intransit: string;\n  mtd_order_count: string;\n}\n\nexport interface ParsedJioMartInventoryData {\n  platform: string;\n  businessUnit: string;\n  periodType: 'daily' | 'range';\n  reportDate?: string;\n  periodStart?: string;\n  periodEnd?: string;\n  totalItems: number;\n  items: JioMartInventoryRow[];\n  summary: {\n    totalProducts: number;\n    totalSellableInventory: number;\n    totalUnsellableInventory: number;\n    totalIntransit: number;\n    totalOrders: number;\n  };\n}\n\nexport async function parseJioMartInventoryCsv(\n  csvContent: string,\n  businessUnit: string,\n  periodType: 'daily' | 'range',\n  reportDate?: string,\n  periodStart?: string,\n  periodEnd?: string\n): Promise<ParsedJioMartInventoryData> {\n  \n  return new Promise((resolve, reject) => {\n    const items: JioMartInventoryRow[] = [];\n    \n    csv.parse(csvContent, {\n      columns: true,\n      skip_empty_lines: true,\n      delimiter: ',',\n      quote: '\"',\n      escape: '\"',\n      trim: true\n    }, (err, records) => {\n      if (err) {\n        console.error('CSV parsing error:', err);\n        reject(new Error(`Failed to parse CSV: ${err.message}`));\n        return;\n      }\n\n      try {\n        if (!records || records.length === 0) {\n          reject(new Error('No data found in CSV file'));\n          return;\n        }\n\n        // Process each record\n        records.forEach((record: any, index: number) => {\n          // Clean and map the record\n          const item: JioMartInventoryRow = {\n            rfc_id: record['RFC ID'] || '',\n            rfc_name: record['RFC Name'] || '',\n            sku_id: record['SKU ID'] || '',\n            title: record['Title'] || '',\n            category: record['Category'] || '',\n            product_status: record['Product Status'] || '',\n            last_updated_at: record['Last updated at'] || '',\n            total_sellable_inv: record['TOTAL_SELLABLE_INV'] || '0',\n            total_unsellable_inv: record['TOTAL_UNSELLABLE_INV'] || '0',\n            fc_dmg_inv: record['FC_DMG_INV'] || '0',\n            lsp_dmg_inv: record['LSP_DMG_INV'] || '0',\n            cust_dmg_inv: record['CUST_DMG_INV'] || '0',\n            recvd_dmg: record['RECVD_DMG'] || '0',\n            expired_inv: record['EXPIRED_INV'] || '0',\n            other_unsellable_inv: record['OTHER_UNSELLABLE_INV'] || '0',\n            mtd_fwd_intransit: record['MTD_FWD_INTRANSIT'] || '0',\n            mtd_delvd_cust: record['MTD_DELVD_CUST'] || '0',\n            mtd_ret_intransit: record['MTD_RET_INTRANSIT'] || '0',\n            mtd_order_count: record['MTD_ORDER_COUNT'] || '0'\n          };\n\n          // Validate required fields\n          if (!item.sku_id) {\n            console.warn(`Row ${index + 1}: Missing SKU ID, skipping`);\n            return;\n          }\n\n          items.push(item);\n        });\n\n        if (items.length === 0) {\n          reject(new Error('No valid inventory data found'));\n          return;\n        }\n\n        // Calculate summary statistics\n        const summary = {\n          totalProducts: items.length,\n          totalSellableInventory: items.reduce((sum, item) => sum + parseInt(item.total_sellable_inv || '0'), 0),\n          totalUnsellableInventory: items.reduce((sum, item) => sum + parseInt(item.total_unsellable_inv || '0'), 0),\n          totalIntransit: items.reduce((sum, item) => sum + parseInt(item.mtd_fwd_intransit || '0'), 0),\n          totalOrders: items.reduce((sum, item) => sum + parseInt(item.mtd_order_count || '0'), 0)\n        };\n\n        const result: ParsedJioMartInventoryData = {\n          platform: 'jiomart',\n          businessUnit,\n          periodType,\n          reportDate,\n          periodStart,\n          periodEnd,\n          totalItems: items.length,\n          items,\n          summary\n        };\n\n        console.log(`Successfully parsed ${items.length} Jio Mart inventory records`);\n        resolve(result);\n\n      } catch (error) {\n        console.error('Error processing records:', error);\n        reject(new Error(`Failed to process inventory data: ${error instanceof Error ? error.message : 'Unknown error'}`));\n      }\n    });\n  });\n}","size_bytes":4574},"CLAUDE_CODE_GUIDE.md":{"content":"# Claude Code Integration Guide\n\n## Overview\n\nClaude Code CLI has been integrated into your terminal for AI-powered coding assistance using your Claude subscription. This setup bypasses API costs by using subscription-based authentication.\n\n## Setup Instructions\n\n### 1. Check Current Status\n```bash\nclaude config ls\n```\n\n### 2. Authentication Setup\n\nIf not authenticated, you'll need to set up Claude Code with your subscription:\n\n#### Option A: Interactive Setup (if supported)\n```bash\nclaude login\n```\nFollow the prompts to authenticate with your Claude subscription.\n\n#### Option B: Manual Token Setup\nIf you have an authentication token:\n```bash\nclaude config set -g auth.token \"your-token-here\"\n```\n\n### 3. Test the Integration\nOnce authenticated, test Claude Code in the terminal:\n```bash\nclaude \"hello world\"\n```\n\n## Using Claude Code in the Terminal\n\n### Basic Usage\nYou can use Claude Code directly in the terminal with these commands:\n\n```bash\n# Basic AI query\nclaude \"analyze this project structure\"\n\n# Code analysis\nclaude \"review this function for bugs\"\n\n# Project help\nclaude \"explain the database schema\"\n\n# Development assistance\nclaude \"suggest improvements for this API\"\n```\n\n### Available Options\n```bash\n# Use specific model\nclaude --model sonnet \"your prompt\"\n\n# Allow specific tools\nclaude --allowedTools \"Bash,Edit\" \"your prompt\"\n\n# Set timeout\nclaude --timeout 60 \"complex analysis task\"\n```\n\n## Integration Features\n\n### Terminal Interface\n- **Command**: `claude [your prompt]`\n- **Status Display**: Shows authentication status in the terminal welcome message\n- **Response Formatting**: Claude responses are highlighted with special formatting\n- **Execution Time**: Shows response time for each query\n\n### Technical Details\n- Uses Claude Code's non-interactive mode (`--print` flag) to bypass terminal limitations\n- Integrates with your existing project context and working directory\n- Supports all Claude Code features except interactive mode\n- Automatically uses your subscription authentication\n\n## Troubleshooting\n\n### Common Issues\n\n1. **\"Raw mode not supported\" error**\n   - This is expected in Replit environment\n   - Use the integrated terminal commands instead of direct `claude` interactive mode\n\n2. **Authentication errors**\n   - Run `claude config ls` to check status\n   - Re-authenticate if needed with `claude login`\n\n3. **Command not found**\n   - Claude Code CLI is pre-installed globally\n   - Check with `which claude`\n\n4. **Permission issues**\n   - Ensure you have a valid Claude subscription\n   - Contact Anthropic support if authentication continues to fail\n\n### Status Checking\n- **Green status**: ✅ Authenticated and ready\n- **Red status**: ❌ Authentication required\n- **Unknown status**: ⚠️ Check terminal for details\n\n## Example Workflows\n\n### Code Review\n```bash\nclaude \"review the database schema in shared/schema.ts\"\nclaude \"analyze the API routes for security issues\"\n```\n\n### Development Help\n```bash\nclaude \"help me optimize this SQL query\"\nclaude \"suggest better error handling for this function\"\n```\n\n### Project Analysis\n```bash\nclaude \"explain the overall architecture of this e-commerce system\"\nclaude \"identify potential performance bottlenecks\"\n```\n\n## Benefits\n\n- **Cost Effective**: Uses your Claude subscription instead of API charges\n- **Integrated**: Works seamlessly within your existing development environment\n- **Context Aware**: Understands your project structure and current working directory\n- **Full Featured**: Access to all Claude Code capabilities except interactive mode\n\n## Need Help?\n\nIf you continue to have authentication issues:\n1. Verify your Claude subscription is active\n2. Try the authentication setup steps again\n3. Contact Anthropic support for subscription-related issues\n\nThe integration is designed to work around Replit's terminal limitations while providing full Claude Code functionality through your subscription.","size_bytes":3918},"examine_flipkart.js":{"content":"import XLSX from 'xlsx';\nimport fs from 'fs';\n\n// Read the Flipkart file\nconst filePath = './attached_assets/flipkart SC_1754917958254.xlsx';\nconsole.log('Reading Flipkart file:', filePath);\n\ntry {\n  const buffer = fs.readFileSync(filePath);\n  const workbook = XLSX.read(buffer, { type: 'buffer' });\n  \n  console.log('Sheet names:', workbook.SheetNames);\n  \n  const sheetName = workbook.SheetNames[0];\n  const sheet = workbook.Sheets[sheetName];\n  \n  // Get headers\n  const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n  console.log('Number of rows:', jsonData.length);\n  console.log('Headers (first row):', JSON.stringify(jsonData[0], null, 2));\n  \n  if (jsonData.length > 1) {\n    console.log('\\nFirst data row:', JSON.stringify(jsonData[1], null, 2));\n  }\n  \n  if (jsonData.length > 2) {\n    console.log('\\nSecond data row:', JSON.stringify(jsonData[2], null, 2));\n  }\n  \n  // Check for date columns\n  const headers = jsonData[0];\n  const dateColumns = [];\n  const dateRegex = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$|^\\d{4}-\\d{2}-\\d{2}$/;\n  \n  headers.forEach((header, index) => {\n    if (header && (dateRegex.test(header.toString()) || header.toString().includes('/'))) {\n      dateColumns.push({\n        index,\n        header: header.toString()\n      });\n    }\n  });\n  \n  console.log(`\\nFound ${dateColumns.length} date columns:`);\n  dateColumns.slice(0, 10).forEach(col => {\n    console.log(`  Index ${col.index}: ${col.header}`);\n  });\n  \n} catch (error) {\n  console.error('Error reading file:', error.message);\n}","size_bytes":1521},"scripts/test-system-access.sh":{"content":"#!/bin/bash\n\necho \"=== Enhanced Terminal System Access Test ===\"\necho \"\"\n\necho \"📁 Current Directory:\"\npwd\necho \"\"\n\necho \"💻 System Information:\"\necho \"Platform: $(uname -s)\"\necho \"Architecture: $(uname -m)\"\necho \"Hostname: $(hostname)\"\necho \"\"\n\necho \"🌐 Network Connectivity:\"\necho \"Testing internet connection...\"\nping -c 3 google.com > /dev/null 2>&1 && echo \"✅ Internet: Connected\" || echo \"❌ Internet: Disconnected\"\n\necho \"Getting public IP address...\"\nPUBLIC_IP=$(curl -s ifconfig.me 2>/dev/null || echo \"Unable to fetch\")\necho \"Public IP: $PUBLIC_IP\"\n\necho \"Testing DNS resolution...\"\nnslookup google.com > /dev/null 2>&1 && echo \"✅ DNS: Working\" || echo \"❌ DNS: Failed\"\necho \"\"\n\necho \"📊 System Resources:\"\necho \"Disk usage:\"\ndf -h | head -5\necho \"\"\necho \"Memory usage:\"\nfree -h 2>/dev/null || echo \"Memory info not available on this system\"\necho \"\"\n\necho \"🔧 Development Tools:\"\necho \"Node.js: $(node --version 2>/dev/null || echo 'Not installed')\"\necho \"npm: $(npm --version 2>/dev/null || echo 'Not installed')\" \necho \"Git: $(git --version 2>/dev/null || echo 'Not installed')\"\necho \"Python: $(python3 --version 2>/dev/null || echo 'Not installed')\"\necho \"curl: $(curl --version 2>/dev/null | head -1 || echo 'Not installed')\"\necho \"\"\n\necho \"📋 Environment Variables (Project-related):\"\necho \"DATABASE_URL: ${DATABASE_URL:+[SET]} ${DATABASE_URL:-[NOT SET]}\"\necho \"PROJECT_ROOT: ${PROJECT_ROOT:-$(pwd)}\"\necho \"\"\n\necho \"🗂️  Project Structure:\"\necho \"Files in current directory:\"\nls -la | head -10\necho \"\"\n\necho \"🚀 System Access Test Complete!\"\necho \"This terminal has full system access and can run any command.\"\necho \"\"\necho \"Try these commands:\"\necho \"• ls -la                 (list files with details)\"\necho \"• ps aux                 (running processes)\"\necho \"• git status             (git repository status)\"\necho \"• npm run dev            (run development server)\"\necho \"• curl ifconfig.me       (get public IP)\"\necho \"• cat package.json       (view project config)\"","size_bytes":2021},"server/amazon-inventory-parser.ts":{"content":"import * as XLSX from 'xlsx';\nimport { parse } from 'csv-parse';\n\nexport interface AmazonInventoryRow {\n  asin: string;\n  product_name: string;\n  sku: string;\n  fnsku: string;\n  category: string;\n  brand: string;\n  size: string;\n  unit: string;\n  warehouse_location: string;\n  condition: string;\n  fulfillment_channel: string;\n  units_available: string;\n  reserved_quantity: string;\n  inbound_quantity: string;\n  researching_quantity: string;\n  unfulfillable_quantity: string;\n  supplier_name: string;\n  cost_per_unit: string;\n  total_value: string;\n  last_updated_at: string;\n  attachment_path: string;\n}\n\nexport interface ParsedAmazonInventoryData {\n  platform: 'amazon';\n  businessUnit: string;\n  periodType: 'daily' | 'range';\n  reportDate?: string;\n  periodStart?: string;\n  periodEnd?: string;\n  totalItems: number;\n  items: AmazonInventoryRow[];\n  summary: {\n    totalProducts: number;\n    totalUnitsAvailable: number;\n    totalReservedQuantity: number;\n    totalInboundQuantity: number;\n    totalUnfulfillableQuantity: number;\n    totalValue: number;\n  };\n}\n\n// Helper function to clean numeric values\nfunction cleanNumericValue(value: string | undefined): string {\n  if (!value || value === '' || value === undefined) return '0';\n  // Remove commas and other non-numeric characters except decimals\n  const cleaned = value.replace(/[^0-9.-]/g, '');\n  // If result is empty or just a dash, return '0'\n  if (!cleaned || cleaned === '-' || cleaned === '.') return '0';\n  // Parse as float and convert back to string to ensure it's a valid number\n  const parsed = parseFloat(cleaned);\n  return isNaN(parsed) ? '0' : parsed.toString();\n}\n\nexport async function parseAmazonInventoryFile(\n  fileBuffer: Buffer,\n  filename: string,\n  businessUnit: string,\n  periodType: 'daily' | 'range',\n  reportDate?: Date,\n  periodStart?: Date | null,\n  periodEnd?: Date | null\n): Promise<ParsedAmazonInventoryData> {\n  \n  const items: AmazonInventoryRow[] = [];\n  let csvContent = '';\n\n  try {\n    // Handle different file formats\n    if (filename.toLowerCase().endsWith('.xlsx') || filename.toLowerCase().endsWith('.xls')) {\n      console.log('Processing Amazon inventory XLSX file');\n      const workbook = XLSX.read(fileBuffer, { type: 'buffer' });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      csvContent = XLSX.utils.sheet_to_csv(worksheet);\n    } else if (filename.toLowerCase().endsWith('.csv')) {\n      console.log('Processing Amazon inventory CSV file');\n      csvContent = fileBuffer.toString('utf-8');\n    } else {\n      throw new Error('Unsupported file format. Please upload CSV or XLSX files.');\n    }\n\n    return new Promise((resolve, reject) => {\n      parse(csvContent, {\n        columns: true,\n        skip_empty_lines: true,\n        delimiter: ',',\n        quote: '\"',\n        escape: '\"',\n        trim: true\n      }, (err: any, records: any) => {\n        if (err) {\n          console.error('CSV parsing error:', err);\n          reject(new Error(`Failed to parse file: ${err.message}`));\n          return;\n        }\n\n        try {\n          if (!records || records.length === 0) {\n            reject(new Error('No data found in file'));\n            return;\n          }\n\n          console.log(`Processing ${records.length} records from Amazon inventory file`);\n          console.log('First record keys:', Object.keys(records[0] || {}));\n\n          // Process each record\n          for (const record of records) {\n            const recordData = record as any;\n\n            // Debug: Log first few records to understand structure\n            if (items.length < 3) {\n              console.log(`Record ${items.length + 1}:`, recordData);\n            }\n\n            // Skip header rows - check if this is a header row\n            const isHeaderRow = recordData['Programme=[Retail]'] === 'ASIN' || \n                               recordData['Distributor View=[Manufacturing]'] === 'Product Title' ||\n                               recordData['View By=[ASIN]'] === 'Brand';\n            \n            if (isHeaderRow) {\n              console.log('Skipping header row:', recordData);\n              continue;\n            }\n\n            // Handle the specific Amazon sales report format\n            const hasAsin = recordData['Programme=[Retail]'] || recordData.asin || recordData.ASIN || recordData['ASIN'] || recordData.item_id || recordData.Item_ID;\n            const hasProductName = recordData['Distributor View=[Manufacturing]'] || recordData.product_name || recordData['Product Name'] || recordData.item_name || recordData.Item_Name || recordData['Item Name'];\n\n            if (!hasAsin && !hasProductName) {\n              console.log('Skipping empty row:', recordData);\n              continue;\n            }\n\n            // Skip rows with empty values in key fields (common in Amazon reports)\n            if ((!recordData['Programme=[Retail]'] || recordData['Programme=[Retail]'].trim() === '') && \n                (!recordData['Distributor View=[Manufacturing]'] || recordData['Distributor View=[Manufacturing]'].trim() === '')) {\n              console.log('Skipping empty row:', recordData);\n              continue;\n            }\n\n            // Skip rows that still contain header-like data\n            if (recordData['Programme=[Retail]']?.includes('ASIN') || \n                recordData['Distributor View=[Manufacturing]']?.includes('Product Title')) {\n              console.log('Skipping header-like row:', recordData);\n              continue;\n            }\n\n            const item: AmazonInventoryRow = {\n              // Map Amazon sales report format to standard inventory fields\n              asin: recordData['Programme=[Retail]'] || recordData.asin || recordData.ASIN || recordData['ASIN'] || recordData.item_id || recordData.Item_ID || '',\n              product_name: recordData['Distributor View=[Manufacturing]'] || recordData.product_name || recordData['Product Name'] || recordData.item_name || recordData.Item_Name || recordData['Item Name'] || '',\n              sku: recordData['View By=[ASIN]'] || recordData.sku || recordData.SKU || recordData['SKU'] || recordData.seller_sku || recordData['Seller SKU'] || '',\n              fnsku: recordData['Programme=[Retail]'] || recordData.fnsku || recordData.FNSKU || recordData['FNSKU'] || recordData.amazon_sku || recordData['Amazon SKU'] || '',\n              category: recordData['Countries=[IN]'] || recordData.category || recordData.Category || recordData.product_category || recordData['Product Category'] || 'General',\n              brand: recordData['View By=[ASIN]'] || recordData.brand || recordData.Brand || recordData.manufacturer || recordData.Manufacturer || '',\n              size: recordData.size || recordData.Size || recordData.dimensions || recordData.Dimensions || '',\n              unit: recordData.unit || recordData.Unit || recordData.uom || recordData.UOM || 'Units',\n              warehouse_location: recordData.warehouse_location || recordData['Warehouse Location'] || recordData.location || recordData.Location || recordData.fulfillment_center || recordData['Fulfillment Center'] || '',\n              condition: recordData.condition || recordData.Condition || recordData.item_condition || recordData['Item Condition'] || 'New',\n              fulfillment_channel: 'Amazon FBA',\n              // For Amazon sales report format, map available fields to inventory-like structure\n              // Clean numeric values by removing commas and converting to numbers\n              units_available: cleanNumericValue(recordData['Currency=[INR]']) || '1', // Net Received Units\n              reserved_quantity: '0', // Not available in this report type\n              inbound_quantity: cleanNumericValue(recordData['Reporting Range=[Custom]']) || '0', // Open Purchase Order Quantity\n              researching_quantity: '0',\n              unfulfillable_quantity: cleanNumericValue(recordData['']) || '0', // Unsellable On-Hand Units\n              supplier_name: 'Jivo Wellness',\n              cost_per_unit: '0', // Not available in this report format\n              total_value: cleanNumericValue(recordData['Locale=[en_IN]']) || '0', // Net Received value\n              last_updated_at: recordData.last_updated_at || recordData['Last Updated'] || recordData.updated_at || recordData['Updated At'] || '',\n              attachment_path: filename\n            };\n\n            items.push(item);\n          }\n\n          if (items.length === 0) {\n            console.log('No valid items found. Total records processed:', records.length);\n            reject(new Error('No valid inventory records found in file. Please ensure your file has columns like ASIN, Product Name, Units Available, etc.'));\n            return;\n          }\n\n          console.log(`Successfully processed ${items.length} Amazon inventory items`);\n\n          // Calculate summary statistics\n          const totalUnitsAvailable = items.reduce((sum, item) => sum + (parseInt(item.units_available) || 0), 0);\n          const totalReservedQuantity = items.reduce((sum, item) => sum + (parseInt(item.reserved_quantity) || 0), 0);\n          const totalInboundQuantity = items.reduce((sum, item) => sum + (parseInt(item.inbound_quantity) || 0), 0);\n          const totalUnfulfillableQuantity = items.reduce((sum, item) => sum + (parseInt(item.unfulfillable_quantity) || 0), 0);\n          const totalValue = items.reduce((sum, item) => sum + (parseFloat(item.total_value) || 0), 0);\n\n          const result: ParsedAmazonInventoryData = {\n            platform: 'amazon',\n            businessUnit,\n            periodType,\n            reportDate: reportDate?.toISOString(),\n            periodStart: periodStart?.toISOString(),\n            periodEnd: periodEnd?.toISOString(),\n            totalItems: items.length,\n            items,\n            summary: {\n              totalProducts: items.length,\n              totalUnitsAvailable,\n              totalReservedQuantity,\n              totalInboundQuantity,\n              totalUnfulfillableQuantity,\n              totalValue\n            }\n          };\n\n          console.log(`Successfully parsed ${items.length} Amazon inventory records`);\n          resolve(result);\n\n        } catch (error) {\n          console.error('Error processing Amazon inventory data:', error);\n          reject(new Error(`Failed to process inventory data: ${error instanceof Error ? error.message : 'Unknown error'}`));\n        }\n      });\n    });\n\n  } catch (error) {\n    console.error('Error parsing Amazon inventory file:', error);\n    throw new Error(`Failed to parse Amazon inventory file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}","size_bytes":10677},"server/blinkit-inventory-parser.ts":{"content":"import * as csv from 'csv-parse';\n\nexport interface BlinkitInventoryRow {\n  sku_id: string;\n  product_name: string;\n  category: string;\n  subcategory: string;\n  brand: string;\n  size: string;\n  unit: string;\n  stock_on_hand: string;\n  reserved_quantity: string;\n  available_quantity: string;\n  inbound_quantity: string;\n  outbound_quantity: string;\n  damaged_quantity: string;\n  expired_quantity: string;\n  last_updated_at: string;\n  warehouse_location: string;\n  supplier_name: string;\n}\n\nexport interface ParsedBlinkitInventoryData {\n  platform: string;\n  businessUnit: string;\n  periodType: 'daily' | 'range';\n  reportDate?: string;\n  periodStart?: string;\n  periodEnd?: string;\n  totalItems: number;\n  items: BlinkitInventoryRow[];\n  summary: {\n    totalProducts: number;\n    totalStockOnHand: number;\n    totalAvailableQuantity: number;\n    totalReservedQuantity: number;\n    totalDamagedQuantity: number;\n    totalExpiredQuantity: number;\n  };\n}\n\nexport async function parseBlinkitInventoryCsv(\n  csvContent: string,\n  businessUnit: string,\n  periodType: 'daily' | 'range',\n  reportDate?: Date,\n  periodStart?: Date | null,\n  periodEnd?: Date | null\n): Promise<ParsedBlinkitInventoryData> {\n  \n  return new Promise((resolve, reject) => {\n    const items: BlinkitInventoryRow[] = [];\n    \n    csv.parse(csvContent, {\n      columns: true,\n      skip_empty_lines: true,\n      delimiter: ',',\n      quote: '\"',\n      escape: '\"',\n      trim: true\n    }, (err, records) => {\n      if (err) {\n        console.error('CSV parsing error:', err);\n        reject(new Error(`Failed to parse CSV: ${err.message}`));\n        return;\n      }\n\n      try {\n        if (!records || records.length === 0) {\n          reject(new Error('No data found in CSV file'));\n          return;\n        }\n\n        console.log(`Processing ${records.length} records from Blinkit inventory CSV`);\n        console.log('First record keys:', Object.keys(records[0] || {}));\n        \n        // Process each record\n        for (const record of records) {\n          // Cast record to any to handle dynamic property access\n          const recordData = record as any;\n          \n          // Debug: Log first few records to understand structure\n          if (items.length < 3) {\n            console.log(`Record ${items.length + 1}:`, recordData);\n          }\n          \n          // Skip empty rows - check multiple possible field names\n          const hasSkuId = recordData.sku_id || recordData.SKU_ID || recordData['SKU ID'] || recordData.item_id || recordData.Item_ID;\n          const hasProductName = recordData.product_name || recordData.Product_Name || recordData['Product Name'] || recordData.item_name || recordData.Item_Name;\n          \n          if (!hasSkuId && !hasProductName) {\n            console.log('Skipping empty row:', recordData);\n            continue;\n          }\n\n          const item: BlinkitInventoryRow = {\n            sku_id: recordData.sku_id || recordData.SKU_ID || recordData['SKU ID'] || recordData.item_id || recordData.Item_ID || '',\n            product_name: recordData.product_name || recordData.Product_Name || recordData['Product Name'] || recordData.item_name || recordData.Item_Name || '',\n            category: recordData.category || recordData.Category || '',\n            subcategory: recordData.subcategory || recordData.Subcategory || recordData['Sub Category'] || '',\n            brand: recordData.brand || recordData.Brand || recordData.manufacturer_name || recordData.Manufacturer_Name || '',\n            size: recordData.size || recordData.Size || '',\n            unit: recordData.unit || recordData.Unit || '',\n            stock_on_hand: recordData.stock_on_hand || recordData.Stock_On_Hand || recordData['Stock on Hand'] || recordData.qty_sold || '0',\n            reserved_quantity: recordData.reserved_quantity || recordData.Reserved_Quantity || recordData['Reserved Quantity'] || '0',\n            available_quantity: recordData.available_quantity || recordData.Available_Quantity || recordData['Available Quantity'] || '0',\n            inbound_quantity: recordData.inbound_quantity || recordData.Inbound_Quantity || recordData['Inbound Quantity'] || '0',\n            outbound_quantity: recordData.outbound_quantity || recordData.Outbound_Quantity || recordData['Outbound Quantity'] || '0',\n            damaged_quantity: recordData.damaged_quantity || recordData.Damaged_Quantity || recordData['Damaged Quantity'] || '0',\n            expired_quantity: recordData.expired_quantity || recordData.Expired_Quantity || recordData['Expired Quantity'] || '0',\n            last_updated_at: recordData.last_updated_at || recordData.Last_Updated_At || recordData['Last Updated'] || recordData.date || '',\n            warehouse_location: recordData.warehouse_location || recordData.Warehouse_Location || recordData['Warehouse Location'] || recordData.city_name || recordData.City_Name || '',\n            supplier_name: recordData.supplier_name || recordData.Supplier_Name || recordData['Supplier Name'] || recordData.manufacturer_name || recordData.Manufacturer_Name || ''\n          };\n\n          items.push(item);\n        }\n\n        if (items.length === 0) {\n          console.log('No valid items found. Total records processed:', records.length);\n          reject(new Error('No valid inventory records found in CSV. Please ensure your CSV has columns like sku_id, product_name, stock_on_hand, etc.'));\n          return;\n        }\n\n        console.log(`Successfully processed ${items.length} Blinkit inventory items`);\n\n        // Calculate summary statistics\n        const totalStockOnHand = items.reduce((sum, item) => sum + (parseInt(item.stock_on_hand) || 0), 0);\n        const totalAvailableQuantity = items.reduce((sum, item) => sum + (parseInt(item.available_quantity) || 0), 0);\n        const totalReservedQuantity = items.reduce((sum, item) => sum + (parseInt(item.reserved_quantity) || 0), 0);\n        const totalDamagedQuantity = items.reduce((sum, item) => sum + (parseInt(item.damaged_quantity) || 0), 0);\n        const totalExpiredQuantity = items.reduce((sum, item) => sum + (parseInt(item.expired_quantity) || 0), 0);\n\n        const result: ParsedBlinkitInventoryData = {\n          platform: 'blinkit',\n          businessUnit,\n          periodType,\n          reportDate: reportDate?.toISOString(),\n          periodStart: periodStart?.toISOString(),\n          periodEnd: periodEnd?.toISOString(),\n          totalItems: items.length,\n          items,\n          summary: {\n            totalProducts: items.length,\n            totalStockOnHand,\n            totalAvailableQuantity,\n            totalReservedQuantity,\n            totalDamagedQuantity,\n            totalExpiredQuantity\n          }\n        };\n\n        console.log(`Successfully parsed ${items.length} Blinkit inventory records`);\n        resolve(result);\n\n      } catch (error) {\n        console.error('Error processing Blinkit inventory CSV data:', error);\n        reject(new Error(`Failed to process inventory data: ${error instanceof Error ? error.message : 'Unknown error'}`));\n      }\n    });\n  });\n}","size_bytes":7085},"server/flipkart-parser.ts":{"content":"import * as XLSX from 'xlsx';\n\nexport interface FlipkartSecondarySalesData {\n  tenantId: string;\n  retailerName: string;\n  retailerCode: string;\n  fsn: string;\n  productName: string;\n  category: string;\n  subCategory: string;\n  brand: string;\n  mrp: number;\n  sellingPrice: number;\n  salesData: Array<{\n    date: string;\n    qty: number;\n  }>;\n  totalSalesQty: number;\n  totalSalesValue: number;\n}\n\nexport interface ParsedFlipkartSecondarySalesData {\n  platform: string;\n  businessUnit: string;\n  periodType: string;\n  reportDate?: string;\n  periodStart?: string;\n  periodEnd?: string;\n  totalItems: number;\n  totalValue: number;\n  uniqueProducts: number;\n  data: FlipkartSecondarySalesData[];\n}\n\nexport function parseFlipkartSecondaryData(buffer: Buffer, periodType: string, businessUnit: string, startDate?: string, endDate?: string): ParsedFlipkartSecondarySalesData {\n  try {\n    const workbook = XLSX.read(buffer, { type: 'buffer' });\n    const sheetName = workbook.SheetNames[0];\n    const sheet = workbook.Sheets[sheetName];\n    \n    // Get all cell data as JSON\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n    \n    if (!jsonData || jsonData.length < 2) {\n      throw new Error('Invalid file format: No data rows found');\n    }\n    \n    const headers = jsonData[0] as string[];\n    const dataRows = jsonData.slice(1) as any[][];\n    \n    // Find column indices for static fields based on actual Flipkart headers\n    const tenantIdIndex = headers.findIndex(h => h && h.toLowerCase().includes('tenant'));\n    const retailerIdIndex = headers.findIndex(h => h && h.toLowerCase().includes('retailer id'));\n    const retailerNameIndex = headers.findIndex(h => h && h.toLowerCase().includes('retailer name'));\n    const fsnIndex = headers.findIndex(h => h && h.toLowerCase().includes('fsn'));\n    const productNameIndex = headers.findIndex(h => h && h.toLowerCase().includes('product title')); // Changed from 'product name'\n    const categoryIndex = headers.findIndex(h => h && h.toLowerCase().includes('category') && !h.toLowerCase().includes('sub'));\n    const verticalIndex = headers.findIndex(h => h && h.toLowerCase().includes('vertical'));\n    const brandIndex = headers.findIndex(h => h && h.toLowerCase().includes('brand'));\n    const eanIndex = headers.findIndex(h => h && h.toLowerCase().includes('ean'));\n    const hsnIndex = headers.findIndex(h => h && h.toLowerCase().includes('hsn'));\n    const styleCodeIndex = headers.findIndex(h => h && h.toLowerCase().includes('style code'));\n    const lastCalculatedAtIndex = headers.findIndex(h => h && h.toLowerCase().includes('lastcalculatedat'));\n    \n    // Find date columns (Flipkart uses YYYY-MM-DD format starting from index 7)\n    const dateColumns: Array<{ index: number; date: string }> = [];\n    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    \n    headers.forEach((header, index) => {\n      if (header && dateRegex.test(header.toString())) {\n        dateColumns.push({\n          index,\n          date: header.toString()\n        });\n      }\n    });\n    \n    console.log(`Found ${dateColumns.length} date columns in Flipkart file`);\n    \n    if (dateColumns.length === 0) {\n      throw new Error('No date columns found in the file');\n    }\n    \n    // Calculate date range based on period type\n    let calculatedStartDate = startDate;\n    let calculatedEndDate = endDate;\n    \n    if (periodType === '2-month') {\n      const today = new Date();\n      const dayOfYear = Math.floor((today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));\n      \n      const start = new Date(today);\n      start.setMonth(start.getMonth() - 2);\n      start.setDate(start.getDate() + (dayOfYear % 30));\n      \n      const end = new Date(today);\n      end.setDate(end.getDate() + (dayOfYear % 30));\n      \n      calculatedStartDate = start.toISOString().split('T')[0];\n      calculatedEndDate = end.toISOString().split('T')[0];\n    }\n    \n    const parsedData: FlipkartSecondarySalesData[] = [];\n    \n    for (const row of dataRows) {\n      if (!row || row.length === 0) continue;\n      \n      // Extract basic product information based on actual Flipkart file structure\n      const tenantId = row[tenantIdIndex]?.toString() || '';\n      const retailerId = row[retailerIdIndex]?.toString() || '';\n      const retailerName = row[retailerNameIndex]?.toString() || '';\n      const fsn = row[fsnIndex]?.toString() || '';\n      const productName = row[productNameIndex]?.toString() || ''; // This will now get \"Product Title\"\n      const category = row[categoryIndex]?.toString() || '';\n      const vertical = row[verticalIndex]?.toString() || '';\n      const brand = row[brandIndex]?.toString() || '';\n      const ean = row[eanIndex]?.toString() || '';\n      const hsn = row[hsnIndex]?.toString() || '';\n      const styleCode = row[styleCodeIndex]?.toString() || '';\n      \n      // Flipkart doesn't have MRP and selling price in their file structure\n      const mrp = 0; // Not available in Flipkart files\n      const sellingPrice = 0; // Not available in Flipkart files\n      \n      // Extract sales data from date columns\n      const salesData: Array<{ date: string; qty: number }> = [];\n      let totalSalesQty = 0;\n      \n      for (const dateCol of dateColumns) {\n        const qty = parseInt(row[dateCol.index]?.toString() || '0') || 0;\n        if (qty > 0) {\n          salesData.push({\n            date: dateCol.date,\n            qty\n          });\n          totalSalesQty += qty;\n        }\n      }\n      \n      const totalSalesValue = totalSalesQty * sellingPrice;\n      \n      if (totalSalesQty > 0) { // Only include rows with sales\n        parsedData.push({\n          tenantId,\n          retailerName,\n          retailerCode: retailerId, // Using retailerId as retailerCode\n          fsn,\n          productName,\n          category,\n          subCategory: vertical, // Using vertical as subCategory\n          brand,\n          mrp,\n          sellingPrice,\n          salesData,\n          totalSalesQty,\n          totalSalesValue\n        });\n      }\n    }\n    \n    const totalValue = parsedData.reduce((sum, item) => sum + item.totalSalesValue, 0);\n    const uniqueProducts = new Set(parsedData.map(item => item.fsn)).size;\n    \n    return {\n      platform: 'flipkart-grocery',\n      businessUnit,\n      periodType,\n      reportDate: periodType === 'daily' ? calculatedStartDate : undefined,\n      periodStart: periodType !== 'daily' ? calculatedStartDate : undefined,\n      periodEnd: periodType !== 'daily' ? calculatedEndDate : undefined,\n      totalItems: parsedData.length,\n      totalValue,\n      uniqueProducts,\n      data: parsedData\n    };\n    \n  } catch (error) {\n    console.error('Error parsing Flipkart secondary sales data:', error);\n    throw new Error(`Failed to parse Flipkart file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}","size_bytes":6872},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/secondary-sales/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":7790},"server/swiggy-inventory-parser.ts":{"content":"import { parse } from 'csv-parse/sync';\n\nexport interface SwiggyInventoryData {\n  platform: string;\n  businessUnit: string;\n  periodType: string;\n  items: SwiggyInventoryRecord[];\n  summary: {\n    totalItems: number;\n    totalWarehouseQty: number;\n    totalOpenPoQty: number;\n    totalPotentialGmvLoss: number;\n    uniqueFacilities: number;\n    uniqueCities: number;\n  };\n  reportDate?: Date;\n  periodStart?: Date;\n  periodEnd?: Date;\n}\n\nexport interface SwiggyInventoryRecord {\n  storage_type: string;\n  facility_name: string;\n  city: string;\n  sku_code: string;\n  sku_description: string;\n  l1_category: string;\n  l2_category: string;\n  shelf_life_days?: number;\n  business_category: string;\n  days_on_hand?: number;\n  potential_gmv_loss?: number;\n  open_pos?: string;\n  open_po_quantity?: number;\n  warehouse_qty_available?: number;\n}\n\nexport function parseSwiggyInventoryCsv(\n  csvContent: string,\n  businessUnit: string,\n  periodType: string,\n  reportDate?: Date,\n  periodStart?: Date,\n  periodEnd?: Date\n): SwiggyInventoryData {\n  console.log(\"Parsing Swiggy inventory CSV...\");\n  \n  try {\n    // Parse CSV with headers\n    const records = parse(csvContent, {\n      columns: true,\n      skip_empty_lines: true,\n      trim: true\n    }) as Record<string, string>[];\n\n    console.log(`Processing ${records.length} records from Swiggy inventory file`);\n\n    if (records.length === 0) {\n      throw new Error(\"No data found in CSV file\");\n    }\n\n    // Log the first record to see the structure\n    console.log(\"First record keys:\", Object.keys(records[0]));\n    console.log(\"Sample record:\", records[0]);\n\n    const items: SwiggyInventoryRecord[] = [];\n    let totalWarehouseQty = 0;\n    let totalOpenPoQty = 0;\n    let totalPotentialGmvLoss = 0;\n    const facilities = new Set<string>();\n    const cities = new Set<string>();\n\n    for (const record of records) {\n      try {\n        // Parse numeric values safely\n        const shelfLifeDays = record.ShelfLifeDays ? parseInt(record.ShelfLifeDays) : undefined;\n        const daysOnHand = record.DaysOnHand ? parseInt(record.DaysOnHand) : undefined;\n        const potentialGmvLoss = record.PotentialGmvLoss ? parseFloat(record.PotentialGmvLoss) : undefined;\n        const openPoQuantity = record.OpenPoQuantity ? parseInt(record.OpenPoQuantity) : undefined;\n        const warehouseQtyAvailable = record.WarehouseQtyAvailable ? parseInt(record.WarehouseQtyAvailable) : undefined;\n\n        // Clean and format Open POs field\n        let cleanOpenPos = record.OpenPos || '';\n        if (cleanOpenPos && cleanOpenPos !== '[]') {\n          // Remove square brackets and extra quotes if present\n          cleanOpenPos = cleanOpenPos.replace(/^\\[|\\]$/g, '').replace(/\"/g, '');\n        } else if (cleanOpenPos === '[]') {\n          cleanOpenPos = '';\n        }\n\n        const inventoryItem: SwiggyInventoryRecord = {\n          storage_type: record.StorageType || '',\n          facility_name: record.FacilityName || '',\n          city: record.City || '',\n          sku_code: record.SkuCode || '',\n          sku_description: record.SkuDescription || '',\n          l1_category: record.L1 || '',\n          l2_category: record.L2 || '',\n          shelf_life_days: shelfLifeDays,\n          business_category: record.BusinessCategory || '',\n          days_on_hand: daysOnHand,\n          potential_gmv_loss: potentialGmvLoss,\n          open_pos: cleanOpenPos,\n          open_po_quantity: openPoQuantity,\n          warehouse_qty_available: warehouseQtyAvailable\n        };\n\n        items.push(inventoryItem);\n\n        // Update totals for summary\n        if (warehouseQtyAvailable) totalWarehouseQty += warehouseQtyAvailable;\n        if (openPoQuantity) totalOpenPoQty += openPoQuantity;\n        if (potentialGmvLoss) totalPotentialGmvLoss += potentialGmvLoss;\n        \n        // Track unique facilities and cities\n        if (record.FacilityName) facilities.add(record.FacilityName);\n        if (record.City) cities.add(record.City);\n\n      } catch (itemError) {\n        console.error(\"Error processing Swiggy inventory item:\", itemError, record);\n        // Continue processing other items\n      }\n    }\n\n    console.log(`Successfully processed ${items.length} Swiggy inventory items`);\n\n    const result: SwiggyInventoryData = {\n      platform: \"swiggy\",\n      businessUnit,\n      periodType,\n      items,\n      summary: {\n        totalItems: items.length,\n        totalWarehouseQty,\n        totalOpenPoQty,\n        totalPotentialGmvLoss,\n        uniqueFacilities: facilities.size,\n        uniqueCities: cities.size\n      },\n      reportDate,\n      periodStart,\n      periodEnd\n    };\n\n    console.log(\"Swiggy inventory parsing completed successfully\");\n    console.log(\"Summary:\", result.summary);\n\n    return result;\n\n  } catch (error) {\n    console.error(\"Error parsing Swiggy inventory CSV:\", error);\n    throw new Error(`Failed to parse Swiggy inventory CSV: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}","size_bytes":4971},"server/terminal-server.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { spawn, ChildProcess } from 'child_process';\nimport { Server } from 'http';\nimport os from 'os';\nimport path from 'path';\n\nexport function setupTerminalWebSocket(server: Server) {\n  const wss = new WebSocketServer({ \n    server, \n    path: '/terminal-ws' \n  });\n\n  wss.on('connection', (ws: WebSocket) => {\n    console.log('REAL TERMINAL WebSocket connection established - UNRESTRICTED ACCESS');\n    \n    // REAL TERMINAL WITH FULL SYSTEM ACCESS - NO SANDBOXING\n    const shell = process.platform === 'win32' ? 'powershell.exe' : '/bin/bash';\n    const shellArgs = process.platform === 'win32' ? ['-NoProfile', '-Command', '-'] : ['--login', '-i']; // Interactive login shell\n    \n    // UNRESTRICTED TERMINAL - FULL SYSTEM AND NETWORK ACCESS\n    const terminalProcess = spawn(shell, shellArgs, {\n      cwd: process.cwd(),\n      env: {\n        ...process.env, // Inherit ALL environment variables\n        TERM: 'xterm-256color',\n        COLORTERM: 'truecolor',\n        SHELL: shell,\n        HOME: os.homedir(),\n        USER: process.env.USER || process.env.USERNAME || os.userInfo().username,\n        // Keep original PATH - no restrictions\n        PATH: process.env.PATH,\n        // Network access (inherit existing proxy settings)\n        HTTP_PROXY: process.env.HTTP_PROXY || '',\n        HTTPS_PROXY: process.env.HTTPS_PROXY || '',\n        NO_PROXY: process.env.NO_PROXY || '',\n        // Project context\n        PROJECT_ROOT: process.cwd(),\n        DATABASE_URL: process.env.DATABASE_URL || '',\n      },\n      stdio: ['pipe', 'pipe', 'pipe'],\n      detached: false,\n      // Enable full system access\n      uid: process.getuid && process.getuid(),\n      gid: process.getgid && process.getgid(),\n    });\n\n    // Send terminal output to WebSocket\n    terminalProcess.stdout?.on('data', (data) => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify({\n          type: 'output',\n          data: data.toString()\n        }));\n      }\n    });\n\n    terminalProcess.stderr?.on('data', (data) => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify({\n          type: 'error',\n          data: data.toString()\n        }));\n      }\n    });\n\n    // Handle terminal exit\n    terminalProcess.on('exit', (code) => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify({\n          type: 'exit',\n          code: code || 0\n        }));\n      }\n    });\n\n    // Handle WebSocket messages (user input)\n    ws.on('message', (message) => {\n      try {\n        const { type, data } = JSON.parse(message.toString());\n        \n        switch (type) {\n          case 'input':\n            terminalProcess.stdin?.write(data);\n            break;\n          case 'command':\n            // Execute commands with FULL SYSTEM ACCESS - NO RESTRICTIONS\n            console.log(`UNRESTRICTED TERMINAL: Executing: ${data}`);\n            terminalProcess.stdin?.write(`${data}\\n`);\n            break;\n          default:\n            console.warn('Unknown terminal message type:', type);\n        }\n      } catch (error) {\n        console.error('Error processing terminal message:', error);\n      }\n    });\n\n    // Handle WebSocket close\n    ws.on('close', () => {\n      console.log('Terminal WebSocket connection closed');\n      terminalProcess.kill('SIGTERM');\n    });\n\n    // Handle terminal errors\n    terminalProcess.on('error', (error) => {\n      console.error('Terminal process error:', error);\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: `Terminal Error: ${error.message}`\n        }));\n      }\n    });\n\n    // Send welcome message with REAL system info\n    const welcomeMsg = `\n╭─────── REAL TERMINAL - UNRESTRICTED ACCESS ───────╮\n│ Platform: ${process.platform} | Shell: ${shell}\n│ User: ${os.userInfo().username} | Home: ${os.homedir()}\n│ Working Dir: ${process.cwd()}\n│ PID: ${process.pid} | UID: ${process.getuid && process.getuid()}\n│ FULL SYSTEM ACCESS - NO SANDBOXING\n╰─────────────────────────────────────────────────────╯\n\n🌐 NETWORK ACCESS AVAILABLE:\n• curl ifconfig.me (get public IP)\n• wget google.com (download files)  \n• ping 8.8.8.8 (test connectivity)\n• ssh user@server (remote connections)\n• git clone <repo> (clone repositories)\n\n🔧 DEVELOPMENT TOOLS:\n• npm install (install packages)\n• npm run dev (start development server)\n• git push/pull (version control)\n• docker ps (container management)\n• python, node, php (interpreters)\n\n🤖 CLAUDE CODE AI (Subscription-based):\n• claude (start Claude Code with subscription auth)\n• claude --version (check version)\n• claude auth status (check authentication status)\n• FIRST TIME SETUP: Run 'claude' then use '/login' inside\n• SELECT: \"Claude app (requires Pro/Max subscription)\"\n• USAGE: claude \"analyze this project structure\"\n• USAGE: claude \"help me fix this bug\"\n• USAGE: claude \"create a new component\"\n\n💻 SYSTEM COMMANDS:\n• sudo apt install (install system packages)\n• ps aux | grep process (process management)\n• top, htop (system monitoring)\n• df -h, free -h (disk/memory usage)\n• systemctl status (service management)\n\n📁 FILE SYSTEM ACCESS:\n• ls -la, cd, mkdir, rm -rf (file operations)\n• nano, vim, emacs (text editors)\n• chmod, chown (permissions)\n• find, grep, awk (search/text processing)\n\nType ANY command - you have COMPLETE system access!\nReal shell ready...\n`;\n\n    ws.send(JSON.stringify({\n      type: 'connected',\n      message: welcomeMsg\n    }));\n  });\n\n  return wss;\n}","size_bytes":5749},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":2866},"client/src/pages/EnhancedTerminal.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  Menu, X, Code, Folder, FolderOpen, FileText, \n  Terminal as TerminalIcon, Minimize2, Maximize2, \n  Trash2, Play, Square, RefreshCw \n} from \"lucide-react\";\n\ninterface TerminalMessage {\n  id: string;\n  type: 'output' | 'error' | 'input' | 'system';\n  content: string;\n  timestamp: Date;\n}\n\ninterface FileTreeItem {\n  name: string;\n  path: string;\n  type: 'file' | 'directory';\n  children?: FileTreeItem[];\n}\n\ninterface OpenTab {\n  id: string;\n  name: string;\n  path: string;\n  content: string;\n}\n\nexport default function EnhancedTerminal() {\n  const [sidebarVisible, setSidebarVisible] = useState(true);\n  const [terminalMinimized, setTerminalMinimized] = useState(false);\n  const [terminalHeight, setTerminalHeight] = useState(300);\n  const [messages, setMessages] = useState<TerminalMessage[]>([]);\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  \n  // File explorer state\n  const [fileTree, setFileTree] = useState<FileTreeItem[]>([]);\n  const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set());\n  const [openTabs, setOpenTabs] = useState<OpenTab[]>([]);\n  const [activeTab, setActiveTab] = useState<string | null>(null);\n\n  const wsRef = useRef<WebSocket | null>(null);\n  const terminalRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    connectTerminal();\n    loadFileTree();\n    \n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  // Auto-scroll terminal\n  useEffect(() => {\n    if (terminalRef.current) {\n      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const connectTerminal = () => {\n    if (isConnecting || isConnected) return;\n    \n    setIsConnecting(true);\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/terminal-ws`;\n    \n    try {\n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = () => {\n        setIsConnected(true);\n        setIsConnecting(false);\n        addMessage('system', 'Connected to enhanced terminal with full system access');\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          switch (message.type) {\n            case 'output':\n              addMessage('output', message.data);\n              break;\n            case 'error':\n              addMessage('error', message.data);\n              break;\n            case 'connected':\n              addMessage('system', message.message);\n              break;\n            case 'exit':\n              addMessage('system', `Process exited with code: ${message.code}`);\n              break;\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.onclose = () => {\n        setIsConnected(false);\n        setIsConnecting(false);\n        addMessage('system', 'Terminal connection closed');\n      };\n\n      ws.onerror = (error) => {\n        setIsConnecting(false);\n        addMessage('error', `WebSocket error: ${error}`);\n      };\n    } catch (error) {\n      setIsConnecting(false);\n      addMessage('error', `Failed to connect: ${error}`);\n    }\n  };\n\n  const addMessage = (type: TerminalMessage['type'], content: string) => {\n    const message: TerminalMessage = {\n      id: Math.random().toString(36).substr(2, 9),\n      type,\n      content,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, message]);\n  };\n\n  const sendCommand = (command: string) => {\n    if (!wsRef.current || wsRef.current.readyState !== WebSocket.OPEN) {\n      addMessage('error', 'Terminal not connected. Click Reconnect.');\n      return;\n    }\n\n    addMessage('input', `$ ${command}`);\n    \n    // Send command to REAL terminal - no restrictions\n    wsRef.current.send(JSON.stringify({\n      type: 'command',\n      data: command\n    }));\n    \n    setCurrentInput(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      if (currentInput.trim()) {\n        sendCommand(currentInput.trim());\n      }\n    }\n  };\n\n  const loadFileTree = async () => {\n    try {\n      const response = await fetch('/api/terminal/files', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ path: '.' })\n      });\n      const data = await response.json();\n      setFileTree(data);\n    } catch (error) {\n      console.error('Error loading file tree:', error);\n    }\n  };\n\n  const toggleFolder = (path: string) => {\n    setExpandedFolders(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(path)) {\n        newSet.delete(path);\n      } else {\n        newSet.add(path);\n      }\n      return newSet;\n    });\n  };\n\n  const openFile = async (filePath: string) => {\n    try {\n      const response = await fetch('/api/terminal/read-file', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ filePath })\n      });\n      const data = await response.json();\n      \n      const tabId = filePath;\n      const fileName = filePath.split('/').pop() || filePath;\n      \n      setOpenTabs(prev => {\n        const existing = prev.find(tab => tab.id === tabId);\n        if (existing) {\n          return prev;\n        }\n        return [...prev, {\n          id: tabId,\n          name: fileName,\n          path: filePath,\n          content: data.content\n        }];\n      });\n      \n      setActiveTab(tabId);\n    } catch (error) {\n      console.error('Error opening file:', error);\n    }\n  };\n\n  const closeTab = (tabId: string) => {\n    setOpenTabs(prev => prev.filter(tab => tab.id !== tabId));\n    if (activeTab === tabId) {\n      const remainingTabs = openTabs.filter(tab => tab.id !== tabId);\n      setActiveTab(remainingTabs.length > 0 ? remainingTabs[remainingTabs.length - 1].id : null);\n    }\n  };\n\n  const getFileIcon = (fileName: string, type: 'file' | 'directory') => {\n    if (type === 'directory') {\n      return expandedFolders.has(fileName) ? <FolderOpen size={16} /> : <Folder size={16} />;\n    }\n    \n    const ext = fileName.split('.').pop()?.toLowerCase();\n    switch (ext) {\n      case 'ts': case 'tsx': case 'js': case 'jsx':\n        return <FileText size={16} className=\"text-blue-600\" />;\n      case 'json':\n        return <FileText size={16} className=\"text-yellow-600\" />;\n      case 'css': case 'scss':\n        return <FileText size={16} className=\"text-purple-600\" />;\n      case 'html':\n        return <FileText size={16} className=\"text-orange-600\" />;\n      case 'md':\n        return <FileText size={16} className=\"text-gray-600\" />;\n      default:\n        return <FileText size={16} className=\"text-gray-500\" />;\n    }\n  };\n\n  const clearTerminal = () => {\n    setMessages([]);\n  };\n\n  const renderFileTree = (items: FileTreeItem[], level = 0) => {\n    return items.map((item) => (\n      <div key={item.path}>\n        <div\n          className={cn(\n            \"flex items-center gap-1 px-2 py-1 text-sm cursor-pointer hover:bg-gray-100 select-none\",\n            activeTab && openTabs.find(tab => tab.id === activeTab)?.path === item.path && \"bg-blue-100\"\n          )}\n          style={{ paddingLeft: `${level * 12 + 8}px` }}\n          onClick={() => {\n            if (item.type === 'file') {\n              openFile(item.path);\n            } else {\n              toggleFolder(item.path);\n            }\n          }}\n        >\n          {getFileIcon(item.name, item.type)}\n          <span className=\"ml-1 truncate\">{item.name}</span>\n        </div>\n        {item.type === 'directory' && expandedFolders.has(item.path) && item.children && (\n          renderFileTree(item.children, level + 1)\n        )}\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"h-screen flex flex-col bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b px-4 py-2 flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Code size={20} className=\"text-blue-600\" />\n            <h1 className=\"text-lg font-semibold\">Enhanced Terminal IDE</h1>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className={cn(\n              \"w-2 h-2 rounded-full\",\n              isConnected ? \"bg-green-500\" : isConnecting ? \"bg-yellow-500\" : \"bg-red-500\"\n            )} />\n            <span className=\"text-sm text-gray-600\">\n              {isConnected ? \"Connected\" : isConnecting ? \"Connecting...\" : \"Disconnected\"}\n            </span>\n          </div>\n        </div>\n        <div className=\"flex gap-2\">\n          {!isConnected && (\n            <Button\n              size=\"sm\"\n              onClick={connectTerminal}\n              disabled={isConnecting}\n              className=\"gap-2\"\n            >\n              <RefreshCw size={14} className={isConnecting ? \"animate-spin\" : \"\"} />\n              {isConnecting ? \"Connecting...\" : \"Reconnect\"}\n            </Button>\n          )}\n          {!sidebarVisible && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => setSidebarVisible(true)}\n            >\n              <Menu size={16} />\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Sidebar */}\n        {sidebarVisible && (\n          <div className=\"w-64 bg-white border-r flex flex-col\">\n            <div className=\"p-3 border-b flex items-center justify-between\">\n              <span className=\"font-medium text-sm\">File Explorer</span>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                className=\"h-6 w-6 p-0\"\n                onClick={() => setSidebarVisible(false)}\n              >\n                <X size={14} />\n              </Button>\n            </div>\n            <ScrollArea className=\"flex-1\">\n              <div className=\"p-2\">\n                {renderFileTree(fileTree)}\n              </div>\n            </ScrollArea>\n          </div>\n        )}\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* File Tabs */}\n          {openTabs.length > 0 && (\n            <div className=\"bg-gray-100 border-b flex overflow-x-auto\">\n              {openTabs.map((tab) => (\n                <div\n                  key={tab.id}\n                  className={cn(\n                    \"flex items-center gap-2 px-3 py-2 border-r cursor-pointer text-sm whitespace-nowrap\",\n                    activeTab === tab.id ? \"bg-white border-b-2 border-blue-500\" : \"hover:bg-gray-200\"\n                  )}\n                  onClick={() => setActiveTab(tab.id)}\n                >\n                  <span>{tab.name}</span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"h-4 w-4 p-0 hover:bg-gray-300\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      closeTab(tab.id);\n                    }}\n                  >\n                    <X size={12} />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Editor/Content Panel */}\n          <div className=\"flex-1 flex flex-col bg-white\">\n            {activeTab ? (\n              <ScrollArea className=\"flex-1\">\n                <pre className=\"p-4 text-sm font-mono whitespace-pre-wrap text-gray-800 leading-relaxed\">\n                  {openTabs.find(tab => tab.id === activeTab)?.content || ''}\n                </pre>\n              </ScrollArea>\n            ) : (\n              <div className=\"flex-1 flex items-center justify-center text-gray-500\">\n                <div className=\"text-center\">\n                  <Code size={48} className=\"mx-auto mb-4 opacity-50\" />\n                  <p className=\"text-lg font-medium\">Enhanced Terminal IDE</p>\n                  <p className=\"text-sm mt-2\">\n                    {sidebarVisible ? \n                      \"Open a file from the explorer or use the terminal below\" : \n                      \"Click the menu button to show file explorer\"\n                    }\n                  </p>\n                  <p className=\"text-xs mt-4 text-gray-400\">\n                    Full system terminal access with WebSocket connection\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Enhanced Terminal Panel */}\n          <div \n            className=\"border-t bg-white text-gray-800 flex flex-col relative\"\n            style={{ height: terminalMinimized ? '32px' : `${terminalHeight}px` }}\n          >\n            {/* Resize Handle */}\n            {!terminalMinimized && (\n              <div\n                className=\"absolute top-0 left-0 right-0 h-1 bg-gray-200 hover:bg-gray-300 cursor-row-resize\"\n                onMouseDown={(e) => {\n                  e.preventDefault();\n                  const startY = e.clientY;\n                  const startHeight = terminalHeight;\n                  \n                  const handleMouseMove = (e: MouseEvent) => {\n                    const deltaY = startY - e.clientY;\n                    const newHeight = Math.max(200, Math.min(600, startHeight + deltaY));\n                    setTerminalHeight(newHeight);\n                  };\n                  \n                  const handleMouseUp = () => {\n                    document.removeEventListener('mousemove', handleMouseMove);\n                    document.removeEventListener('mouseup', handleMouseUp);\n                  };\n                  \n                  document.addEventListener('mousemove', handleMouseMove);\n                  document.addEventListener('mouseup', handleMouseUp);\n                }}\n              />\n            )}\n            \n            <div className=\"flex items-center justify-between p-2 bg-gray-100 border-b text-xs cursor-pointer\" onClick={() => setTerminalMinimized(!terminalMinimized)}>\n              <div className=\"flex items-center gap-2\">\n                <TerminalIcon size={14} />\n                <span className=\"font-medium\">Enhanced Terminal</span>\n                <div className={cn(\n                  \"w-2 h-2 rounded-full\",\n                  isConnected ? \"bg-green-500\" : \"bg-red-500\"\n                )} />\n                <span className=\"text-gray-600\">\n                  {isConnected ? \"Connected\" : \"Disconnected\"}\n                </span>\n              </div>\n              <div className=\"flex gap-1\">\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"h-6 w-6 p-0 text-gray-600 hover:bg-gray-200\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    clearTerminal();\n                  }}\n                >\n                  <Trash2 size={12} />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"h-6 w-6 p-0 text-gray-600 hover:bg-gray-200\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setTerminalMinimized(!terminalMinimized);\n                  }}\n                >\n                  {terminalMinimized ? <Maximize2 size={12} /> : <Minimize2 size={12} />}\n                </Button>\n              </div>\n            </div>\n            \n            {!terminalMinimized && (\n              <>\n                {/* Terminal Output */}\n                <ScrollArea className=\"flex-1 bg-gray-50\" ref={terminalRef}>\n                  <div className=\"p-3 font-mono text-sm space-y-1\">\n                    {messages.length === 0 && (\n                      <div className=\"text-green-600\">\n                        <div className=\"font-semibold\">Enhanced Terminal Ready!</div>\n                        <div className=\"text-gray-600 mt-2 text-xs space-y-1 leading-relaxed\">\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                            UNRESTRICTED SYSTEM ACCESS - Real terminal, no sandboxing\n                          </div>\n                          <div className=\"mt-3 space-y-1\">\n                            <div>🌐 <strong>Network:</strong> curl ifconfig.me, wget, ping, ssh</div>\n                            <div>💻 <strong>System:</strong> ps aux, top, df -h, sudo commands</div>\n                            <div>🔧 <strong>Dev:</strong> git, npm, node, python, docker</div>\n                            <div>📁 <strong>Files:</strong> ls -la, rm -rf, chmod, nano, vim</div>\n                            <div>🚀 <strong>Test:</strong> bash scripts/test-system-access.sh</div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {messages.map((message) => (\n                      <div key={message.id} className={cn(\n                        \"whitespace-pre-wrap font-mono\",\n                        message.type === 'input' && \"text-blue-600 font-semibold\",\n                        message.type === 'error' && \"text-red-600\",\n                        message.type === 'system' && \"text-orange-600 italic\",\n                        message.type === 'output' && \"text-gray-800\"\n                      )}>\n                        {message.content}\n                      </div>\n                    ))}\n                  </div>\n                </ScrollArea>\n\n                {/* Command Input */}\n                <div className=\"border-t p-3 bg-white flex items-center gap-2\">\n                  <span className=\"text-blue-600 text-sm font-mono font-bold\">$</span>\n                  <Input\n                    ref={inputRef}\n                    value={currentInput}\n                    onChange={(e) => setCurrentInput(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    className=\"flex-1 font-mono text-sm border-gray-200 focus:border-blue-500 focus:ring-1 focus:ring-blue-500\"\n                    placeholder={isConnected ? \"Type ANY command - FULL ACCESS (try: curl ifconfig.me)\" : \"Connect to terminal first\"}\n                    disabled={!isConnected}\n                  />\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"h-8 w-8 p-0 border-blue-200 hover:bg-blue-50\"\n                    onClick={() => sendCommand(currentInput)}\n                    disabled={!isConnected || !currentInput.trim()}\n                  >\n                    <Play size={12} />\n                  </Button>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":19303},"client/src/pages/SqlQuery.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Play, Download, Database, Clock, AlertTriangle, CheckCircle } from 'lucide-react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface QueryResult {\n  columns: string[];\n  rows: any[][];\n  rowCount: number;\n  executionTime: number;\n}\n\ninterface QueryHistory {\n  id: string;\n  query: string;\n  timestamp: string;\n  status: 'success' | 'error';\n  rowCount?: number;\n  executionTime?: number;\n}\n\n\n\nconst sampleQueries = [\n  {\n    title: \"Total Sales by Platform\",\n    query: `SELECT \n  'Amazon' as platform,\n  COUNT(*) as total_orders,\n  SUM(total_sales_value) as total_revenue\nFROM \"SC_Amazon_JW_Daily\"\nUNION ALL\nSELECT \n  'Flipkart' as platform,\n  COUNT(*) as total_orders, \n  SUM(total_sales_value) as total_revenue\nFROM \"SC_FlipKart_JM_2Month\"\nORDER BY total_revenue DESC;`\n  },\n  {\n    title: \"Top Products by Sales Quantity\",\n    query: `SELECT \n  product_name,\n  SUM(total_sales_qty) as total_quantity,\n  SUM(total_sales_value) as total_value\nFROM \"SC_FlipKart_JM_2Month\"\nWHERE product_name IS NOT NULL AND product_name != ''\nGROUP BY product_name\nORDER BY total_quantity DESC\nLIMIT 10;`\n  },\n  {\n    title: \"Monthly Sales Trend\",\n    query: `SELECT \n  DATE_TRUNC('month', report_date) as month,\n  COUNT(*) as orders,\n  SUM(total_sales_value) as revenue\nFROM \"SC_Amazon_JW_Daily\"\nWHERE report_date >= CURRENT_DATE - INTERVAL '6 months'\nGROUP BY DATE_TRUNC('month', report_date)\nORDER BY month DESC;`\n  },\n  {\n    title: \"Inventory Status by Platform\",\n    query: `SELECT \n  'Jio Mart' as platform,\n  COUNT(*) as total_items,\n  SUM(CAST(available_qty AS NUMERIC)) as total_available\nFROM \"INV_JioMart_JM_Daily\"\nUNION ALL\nSELECT \n  'Blinkit' as platform,\n  COUNT(*) as total_items,\n  SUM(CAST(available_qty AS NUMERIC)) as total_available  \nFROM \"INV_Blinkit_JM_Daily\"\nORDER BY total_available DESC;`\n  }\n];\n\nexport default function SqlQuery() {\n  const [query, setQuery] = useState('');\n  const [queryHistory, setQueryHistory] = useState<QueryHistory[]>([]);\n\n  const queryClient = useQueryClient();\n\n  const executeQueryMutation = useMutation({\n    mutationFn: async (sqlQuery: string) => {\n      const response = await fetch('/api/sql-query/execute', {\n        method: 'POST',\n        body: JSON.stringify({ query: sqlQuery }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Query execution failed');\n      }\n      \n      return response.json() as Promise<QueryResult>;\n    },\n    onSuccess: (data, variables) => {\n      const newEntry: QueryHistory = {\n        id: Date.now().toString(),\n        query: variables,\n        timestamp: new Date().toISOString(),\n        status: 'success',\n        rowCount: data.rowCount,\n        executionTime: data.executionTime\n      };\n      setQueryHistory(prev => [newEntry, ...prev.slice(0, 9)]);\n    },\n    onError: (error: any, variables) => {\n      const newEntry: QueryHistory = {\n        id: Date.now().toString(),\n        query: variables,\n        timestamp: new Date().toISOString(),\n        status: 'error'\n      };\n      setQueryHistory(prev => [newEntry, ...prev.slice(0, 9)]);\n    }\n  });\n\n  const tablesQuery = useQuery({\n    queryKey: ['/api/sql-query/tables'],\n    queryFn: async () => {\n      const response = await fetch('/api/sql-query/tables');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tables');\n      }\n      return response.json() as Promise<string[]>;\n    }\n  });\n\n  const handleExecuteQuery = () => {\n    if (!query.trim()) return;\n    executeQueryMutation.mutate(query.trim());\n  };\n\n  const handleSampleQuery = (sampleQuery: string) => {\n    setQuery(sampleQuery);\n  };\n\n\n\n  const downloadResults = () => {\n    if (!executeQueryMutation.data) return;\n    \n    const { columns, rows } = executeQueryMutation.data;\n    const csvContent = [\n      columns.join(','),\n      ...rows.map(row => row.map(cell => \n        typeof cell === 'string' && cell.includes(',') ? `\"${cell}\"` : cell\n      ).join(','))\n    ].join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `query-results-${new Date().toISOString().split('T')[0]}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">SQL Query Runner</h1>\n          <p className=\"text-gray-600 mt-1\">Execute custom SQL queries against your database</p>\n        </div>\n        <Badge variant=\"secondary\" className=\"flex items-center gap-2\">\n          <Database size={16} />\n          Development Database\n        </Badge>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Query Editor */}\n        <div className=\"lg:col-span-2 space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Play size={20} />\n                Query Editor\n              </CardTitle>\n              <CardDescription>\n                Write and execute SQL queries. Only SELECT statements are allowed for security.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Textarea\n                placeholder=\"SELECT * FROM your_table LIMIT 10;\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                className=\"min-h-[200px] font-mono text-sm\"\n              />\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Button \n                    onClick={handleExecuteQuery}\n                    disabled={!query.trim() || executeQueryMutation.isPending}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <Play size={16} />\n                    {executeQueryMutation.isPending ? 'Executing...' : 'Execute Query'}\n                  </Button>\n                  {executeQueryMutation.data && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={downloadResults}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Download size={16} />\n                      Download CSV\n                    </Button>\n                  )}\n                </div>\n                {executeQueryMutation.data && (\n                  <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                    <span className=\"flex items-center gap-1\">\n                      <Clock size={14} />\n                      {executeQueryMutation.data.executionTime}ms\n                    </span>\n                    <span>{executeQueryMutation.data.rowCount} rows</span>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Results */}\n          {executeQueryMutation.error && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                {(executeQueryMutation.error as any)?.message || 'Query execution failed'}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {executeQueryMutation.data && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CheckCircle size={20} />\n                  Query Results\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ScrollArea className=\"h-[400px] w-full\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        {executeQueryMutation.data.columns.map((column) => (\n                          <TableHead key={column} className=\"font-semibold\">\n                            {column}\n                          </TableHead>\n                        ))}\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {executeQueryMutation.data.rows.map((row, index) => (\n                        <TableRow key={index}>\n                          {row.map((cell, cellIndex) => (\n                            <TableCell key={cellIndex} className=\"font-mono text-sm\">\n                              {cell === null ? (\n                                <span className=\"text-gray-400 italic\">null</span>\n                              ) : (\n                                String(cell)\n                              )}\n                            </TableCell>\n                          ))}\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-4\">\n          <Tabs defaultValue=\"tables\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"tables\">Tables</TabsTrigger>\n              <TabsTrigger value=\"samples\">Samples</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"tables\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Database Tables</CardTitle>\n                  <CardDescription>Available tables in your database</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className=\"h-[400px] w-full\">\n                    <div className=\"pr-4\">\n                      {tablesQuery.isLoading ? (\n                        <div className=\"text-sm text-gray-500\">Loading tables...</div>\n                      ) : tablesQuery.data ? (\n                        <div className=\"space-y-2\">\n                          {tablesQuery.data.map((table) => (\n                            <div\n                              key={table}\n                              className=\"p-3 rounded bg-gray-50 hover:bg-gray-100 cursor-pointer transition-colors border\"\n                              onClick={() => setQuery(`SELECT * FROM \"${table}\" LIMIT 10;`)}\n                            >\n                              <span className=\"font-mono text-sm break-all\">{table}</span>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-sm text-gray-500\">Failed to load tables</div>\n                      )}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"samples\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Sample Queries</CardTitle>\n                  <CardDescription>Common reporting queries</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className=\"h-[400px] w-full\">\n                    <div className=\"pr-4 space-y-3\">\n                      {sampleQueries.map((sample, index) => (\n                        <div\n                          key={index}\n                          className=\"p-3 rounded border hover:bg-gray-50 cursor-pointer transition-colors\"\n                          onClick={() => handleSampleQuery(sample.query)}\n                        >\n                          <h4 className=\"font-medium text-sm text-gray-900\">{sample.title}</h4>\n                          <p className=\"text-xs text-gray-500 mt-1 font-mono break-all\">\n                            {sample.query.split('\\n')[0]}...\n                          </p>\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n\n          </Tabs>\n\n          {/* Query History */}\n          {queryHistory.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Recent Queries</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ScrollArea className=\"h-[300px] w-full\">\n                  <div className=\"pr-4 space-y-2\">\n                    {queryHistory.map((item) => (\n                      <div\n                        key={item.id}\n                        className=\"p-3 rounded border cursor-pointer hover:bg-gray-50 transition-colors\"\n                        onClick={() => setQuery(item.query)}\n                      >\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <Badge\n                            variant={item.status === 'success' ? 'default' : 'destructive'}\n                            className=\"text-xs\"\n                          >\n                            {item.status}\n                          </Badge>\n                          <span className=\"text-xs text-gray-500\">\n                            {new Date(item.timestamp).toLocaleTimeString()}\n                          </span>\n                        </div>\n                        <p className=\"text-xs font-mono text-gray-600 break-all\">\n                          {item.query.replace(/\\s+/g, ' ')}\n                        </p>\n                        {item.rowCount !== undefined && (\n                          <p className=\"text-xs text-gray-500 mt-2\">\n                            {item.rowCount} rows, {item.executionTime}ms\n                          </p>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14857},"client/src/pages/Terminal.tsx":{"content":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { \n  Terminal as TerminalIcon, \n  ChevronUp,\n  ChevronDown\n} from 'lucide-react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface TerminalCommand {\n  id: string;\n  command: string;\n  output: string;\n  timestamp: string;\n  status: 'success' | 'error';\n  executionTime?: number;\n}\n\nexport default function Terminal() {\n  const [commandHistory, setCommandHistory] = useState<TerminalCommand[]>([]);\n  const [currentCommand, setCurrentCommand] = useState('');\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const terminalRef = useRef<HTMLDivElement>(null);\n  const terminalInputRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n\n  // Auto-focus terminal input\n  useEffect(() => {\n    if (terminalInputRef.current) {\n      terminalInputRef.current.focus();\n    }\n  }, []);\n\n  // Scroll to bottom when new commands are added\n  useEffect(() => {\n    if (terminalRef.current) {\n      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;\n    }\n  }, [commandHistory]);\n\n  // Execute terminal commands\n  const executeCommand = useMutation({\n    mutationFn: async (command: string) => {\n      const response = await apiRequest(`/api/terminal/execute`, {\n        method: 'POST',\n        body: { command }\n      });\n      return response;\n    },\n    onSuccess: (data, command) => {\n      const newCommand: TerminalCommand = {\n        id: Date.now().toString(),\n        command,\n        output: data.output || '',\n        timestamp: new Date().toISOString(),\n        status: data.exitCode === 0 ? 'success' : 'error',\n        executionTime: data.executionTime\n      };\n      setCommandHistory(prev => [...prev, newCommand]);\n      setCurrentCommand('');\n    },\n    onError: (error: any, command) => {\n      const newCommand: TerminalCommand = {\n        id: Date.now().toString(),\n        command,\n        output: error.message || 'Command failed',\n        timestamp: new Date().toISOString(),\n        status: 'error'\n      };\n      setCommandHistory(prev => [...prev, newCommand]);\n      setCurrentCommand('');\n    }\n  });\n\n  // Claude Code query mutation\n  const claudeCodeQuery = useMutation({\n    mutationFn: async (prompt: string) => {\n      const response = await apiRequest(`/api/claude-code/query`, {\n        method: 'POST',\n        body: { prompt }\n      });\n      return response;\n    },\n    onSuccess: (data, prompt) => {\n      const newCommand: TerminalCommand = {\n        id: Date.now().toString(),\n        command: `claude ${prompt}`,\n        output: data.response || 'No response from Claude',\n        timestamp: new Date().toISOString(),\n        status: 'success'\n      };\n      setCommandHistory(prev => [...prev, newCommand]);\n      setCurrentCommand('');\n    },\n    onError: (error: any, prompt) => {\n      const newCommand: TerminalCommand = {\n        id: Date.now().toString(),\n        command: `claude ${prompt}`,\n        output: error.message || 'Claude query failed',\n        timestamp: new Date().toISOString(),\n        status: 'error'\n      };\n      setCommandHistory(prev => [...prev, newCommand]);\n      setCurrentCommand('');\n    }\n  });\n\n  const handleTerminalSubmit = useCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && currentCommand.trim()) {\n      e.preventDefault();\n      \n      if (currentCommand.startsWith('claude ')) {\n        const prompt = currentCommand.slice(7).trim();\n        if (prompt) {\n          claudeCodeQuery.mutate(prompt);\n        }\n      } else {\n        executeCommand.mutate(currentCommand.trim());\n      }\n    }\n  }, [currentCommand, executeCommand, claudeCodeQuery]);\n\n  const clearTerminal = () => {\n    setCommandHistory([]);\n  };\n\n  // Fullscreen terminal view\n  if (isFullscreen) {\n    return (\n      <div className=\"h-screen bg-white text-black flex flex-col\">\n        {/* Terminal Header */}\n        <div className=\"h-10 bg-gray-100 border-b border-gray-300 flex items-center justify-between px-4\">\n          <div className=\"flex items-center gap-2\">\n            <TerminalIcon className=\"h-4 w-4\" />\n            <span className=\"text-sm font-medium\">Terminal</span>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsFullscreen(false)}\n            className=\"h-6 w-6 p-0 text-gray-600 hover:text-black\"\n          >\n            <ChevronDown className=\"h-3 w-3\" />\n          </Button>\n        </div>\n\n        {/* Terminal Content */}\n        <div className=\"flex-1 p-4 font-mono text-sm overflow-y-auto\" ref={terminalRef}>\n          {commandHistory.length === 0 && (\n            <div className=\"text-gray-600 mb-4\">\n              <div>Welcome to Terminal</div>\n              <div className=\"text-xs mt-1\">Type commands or use 'claude [prompt]' for AI assistance</div>\n            </div>\n          )}\n          \n          {commandHistory.map((cmd) => (\n            <div key={cmd.id} className=\"mb-3\">\n              <div className=\"flex items-center gap-2 text-black\">\n                <span>$</span>\n                <span>{cmd.command}</span>\n              </div>\n              <pre className=\"text-gray-700 text-xs whitespace-pre-wrap mt-1 pl-3\">\n                {cmd.output}\n              </pre>\n            </div>\n          ))}\n          \n          {(executeCommand.isPending || claudeCodeQuery.isPending) && (\n            <div className=\"flex items-center gap-2 text-gray-600 mb-3\">\n              <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-gray-600\"></div>\n              <span className=\"text-sm\">Executing...</span>\n            </div>\n          )}\n\n          {/* Terminal Input Line */}\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-black\">$</span>\n            <input\n              ref={terminalInputRef}\n              type=\"text\"\n              value={currentCommand}\n              onChange={(e) => setCurrentCommand(e.target.value)}\n              onKeyDown={handleTerminalSubmit}\n              placeholder=\"Type command here...\"\n              className=\"flex-1 bg-transparent text-black border-none outline-none placeholder-gray-400 font-mono text-sm\"\n              disabled={executeCommand.isPending || claudeCodeQuery.isPending}\n              autoFocus\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Regular terminal view (also clean and simple)\n  return (\n    <div className=\"h-screen bg-white text-black flex flex-col\">\n      {/* Clean Terminal Header */}\n      <div className=\"h-10 bg-gray-100 border-b border-gray-300 flex items-center justify-between px-4\">\n        <div className=\"flex items-center gap-2\">\n          <TerminalIcon className=\"h-4 w-4\" />\n          <span className=\"text-sm font-medium\">Terminal</span>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setIsFullscreen(true)}\n          className=\"h-6 w-6 p-0 text-gray-600 hover:text-black\"\n        >\n          <ChevronUp className=\"h-3 w-3\" />\n        </Button>\n      </div>\n\n      {/* Clean Terminal Content */}\n      <div className=\"flex-1 p-4 font-mono text-sm overflow-y-auto\" ref={terminalRef}>\n        {commandHistory.length === 0 && (\n          <div className=\"text-gray-600 mb-4\">\n            <div>Welcome to Terminal</div>\n            <div className=\"text-xs mt-1\">Type commands or use 'claude [prompt]' for AI assistance</div>\n          </div>\n        )}\n        \n        {commandHistory.map((cmd) => (\n          <div key={cmd.id} className=\"mb-3\">\n            <div className=\"flex items-center gap-2 text-black\">\n              <span>$</span>\n              <span>{cmd.command}</span>\n            </div>\n            <pre className=\"text-gray-700 text-xs whitespace-pre-wrap mt-1 pl-3\">\n              {cmd.output}\n            </pre>\n          </div>\n        ))}\n        \n        {(executeCommand.isPending || claudeCodeQuery.isPending) && (\n          <div className=\"flex items-center gap-2 text-gray-600 mb-3\">\n            <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-gray-600\"></div>\n            <span className=\"text-sm\">Executing...</span>\n          </div>\n        )}\n\n        {/* Terminal Input Line */}\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-black\">$</span>\n          <input\n            ref={terminalInputRef}\n            type=\"text\"\n            value={currentCommand}\n            onChange={(e) => setCurrentCommand(e.target.value)}\n            onKeyDown={handleTerminalSubmit}\n            placeholder=\"Type command here...\"\n            className=\"flex-1 bg-transparent text-black border-none outline-none placeholder-gray-400 font-mono text-sm\"\n            disabled={executeCommand.isPending || claudeCodeQuery.isPending}\n            autoFocus\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9015},"server/claude-code-wrapper.ts":{"content":"import { spawn, ChildProcess } from 'child_process';\nimport { promisify } from 'util';\nimport { exec } from 'child_process';\n\nconst execAsync = promisify(exec);\n\nexport interface ClaudeCodeResponse {\n  success: boolean;\n  output: string;\n  error?: string;\n  executionTime: number;\n}\n\nexport class ClaudeCodeWrapper {\n  private isConfigured: boolean = false;\n\n  constructor() {\n    this.checkConfiguration();\n  }\n\n  private async checkConfiguration(): Promise<void> {\n    try {\n      // Check if Claude Code is authenticated\n      const { stdout, stderr } = await execAsync('claude config ls 2>/dev/null || echo \"not_configured\"');\n      this.isConfigured = !stdout.includes('not_configured') && !stderr;\n    } catch (error) {\n      this.isConfigured = false;\n    }\n  }\n\n  public async executeQuery(prompt: string, options: {\n    workingDirectory?: string;\n    timeout?: number;\n    allowedTools?: string[];\n    model?: string;\n  } = {}): Promise<ClaudeCodeResponse> {\n    const startTime = Date.now();\n\n    try {\n      // If not configured, return helpful setup instructions\n      if (!this.isConfigured) {\n        return {\n          success: false,\n          output: '',\n          error: `Claude Code needs authentication. Please run these commands in the terminal:\n\n1. First, try: claude config ls\n2. If not authenticated, you need to set up authentication with your Claude subscription\n3. Note: Interactive mode doesn't work in this environment, but we can use --print mode\n\nAlternative: You can use Claude Code in non-interactive mode once authenticated.`,\n          executionTime: Date.now() - startTime\n        };\n      }\n\n      // Build the command\n      const claudeArgs = [\n        '--print',\n        '--output-format', 'text',\n        ...(options.model ? ['--model', options.model] : []),\n        ...(options.allowedTools ? ['--allowedTools', ...options.allowedTools] : []),\n        prompt\n      ];\n\n      // Execute Claude Code in non-interactive mode\n      const result = await this.runClaudeCommand(claudeArgs, {\n        cwd: options.workingDirectory || process.cwd(),\n        timeout: options.timeout || 30000\n      });\n\n      return {\n        success: result.exitCode === 0,\n        output: result.stdout,\n        error: result.exitCode !== 0 ? result.stderr : undefined,\n        executionTime: Date.now() - startTime\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        output: '',\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n        executionTime: Date.now() - startTime\n      };\n    }\n  }\n\n  private runClaudeCommand(args: string[], options: {\n    cwd: string;\n    timeout: number;\n  }): Promise<{ stdout: string; stderr: string; exitCode: number }> {\n    return new Promise((resolve) => {\n      const child = spawn('claude', args, {\n        cwd: options.cwd,\n        env: {\n          ...process.env,\n          // Disable interactive features\n          CI: 'true',\n          NO_COLOR: '1'\n        },\n        stdio: ['pipe', 'pipe', 'pipe']\n      });\n\n      let stdout = '';\n      let stderr = '';\n      let isResolved = false;\n\n      // Set up timeout\n      const timeoutId = setTimeout(() => {\n        if (!isResolved) {\n          isResolved = true;\n          child.kill('SIGTERM');\n          resolve({\n            stdout,\n            stderr: stderr + '\\nCommand timed out',\n            exitCode: 124\n          });\n        }\n      }, options.timeout);\n\n      child.stdout?.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr?.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      child.on('close', (code) => {\n        if (!isResolved) {\n          isResolved = true;\n          clearTimeout(timeoutId);\n          resolve({\n            stdout,\n            stderr,\n            exitCode: code || 0\n          });\n        }\n      });\n\n      child.on('error', (error) => {\n        if (!isResolved) {\n          isResolved = true;\n          clearTimeout(timeoutId);\n          resolve({\n            stdout,\n            stderr: stderr + error.message,\n            exitCode: 1\n          });\n        }\n      });\n    });\n  }\n\n  public async getAuthStatus(): Promise<string> {\n    try {\n      const { stdout, stderr } = await execAsync('claude config ls 2>&1');\n      if (stderr.includes('Error') || stdout.includes('not found')) {\n        return 'Not authenticated - run setup in terminal';\n      }\n      return 'Authenticated and ready';\n    } catch (error) {\n      return 'Unknown status - check terminal';\n    }\n  }\n\n  public getSetupInstructions(): string {\n    return `\nTo set up Claude Code with your subscription:\n\n1. **Check current status:**\n   claude config ls\n\n2. **If not authenticated, you have these options:**\n   \n   Option A - Manual config (if you have auth token):\n   claude config set -g auth.token \"your-token-here\"\n   \n   Option B - Try the print mode directly:\n   claude --print \"hello world\"\n   \n3. **Once authenticated, you can use:**\n   claude --print \"your prompt here\"\n   claude --print --model sonnet \"your prompt\"\n   claude --print --allowedTools \"Bash,Edit\" \"your prompt\"\n\nNote: Interactive mode (claude without --print) doesn't work in this environment.\nUse the --print flag for all commands.\n`;\n  }\n}\n\nexport const claudeCodeWrapper = new ClaudeCodeWrapper();","size_bytes":5316},"server/flipkart-inventory-parser.ts":{"content":"import Papa from 'papaparse';\nimport { InsertFlipkartInventoryDaily } from '@shared/schema';\n\ninterface FlipkartInventoryCSVRow {\n  'Warehouse Id': string;\n  'SKU': string;\n  'Title': string;\n  'Listing Id': string;\n  'FSN': string;\n  'Brand': string;\n  'Flipkart Selling Price': string;\n  'Live on Website': string;\n  'Sales 7D': string;\n  'Sales 14D': string;\n  'Sales 30D': string;\n  'Sales 60D': string;\n  'Sales 90D': string;\n  'B2B Scheduled': string;\n  'Transfers Scheduled': string;\n  'B2B Shipped': string;\n  'Transfers Shipped': string;\n  'B2B Receiving': string;\n  'Transfers Receiving': string;\n  'Reserved for Orders and Recalls': string;\n  'Reserved for Internal Processing': string;\n  'Returns Processing': string;\n  'Orders to Dispatch': string;\n  'Recalls to Dispatch': string;\n  'Damaged': string;\n  'QC Reject': string;\n  'Catalog Reject': string;\n  'Returns Reject': string;\n  'Seller Return Reject': string;\n  'Miscellaneous': string;\n  'Length (in cm)': string;\n  'Breadth (in cm)': string;\n  'Height (in cm)': string;\n  'Weight (in kg)': string;\n  'Fulfilment Type': string;\n  'F Assured Badge': string;\n}\n\nexport function parseFlipkartInventoryCSV(\n  csvContent: string,\n  attachmentPath?: string,\n  reportDate?: Date\n): InsertFlipkartInventoryDaily[] {\n  console.log('Starting FlipKart inventory CSV parsing...');\n  \n  const parseResult = Papa.parse<FlipkartInventoryCSVRow>(csvContent, {\n    header: true,\n    skipEmptyLines: true,\n    transformHeader: (header) => header.trim()\n  });\n\n  if (parseResult.errors.length > 0) {\n    console.error('CSV parsing errors:', parseResult.errors);\n    throw new Error(`CSV parsing failed: ${parseResult.errors[0]?.message}`);\n  }\n\n  console.log(`Found ${parseResult.data.length} FlipKart inventory rows`);\n\n  const parseNumber = (value: string | undefined): number | undefined => {\n    if (!value || value === '' || value === 'null' || value === 'undefined') return undefined;\n    const parsed = parseFloat(value.replace(/,/g, ''));\n    return isNaN(parsed) ? undefined : parsed;\n  };\n\n  const parseInteger = (value: string | undefined): number | undefined => {\n    if (!value || value === '' || value === 'null' || value === 'undefined') return undefined;\n    const parsed = parseInt(value.replace(/,/g, ''), 10);\n    return isNaN(parsed) ? undefined : parsed;\n  };\n\n  const parseDecimal = (value: string | undefined): string | undefined => {\n    if (!value || value === '' || value === 'null' || value === 'undefined') return undefined;\n    const parsed = parseFloat(value.replace(/,/g, ''));\n    return isNaN(parsed) ? undefined : parsed.toString();\n  };\n\n  const processedData: InsertFlipkartInventoryDaily[] = [];\n\n  parseResult.data.forEach((row, index) => {\n    try {\n      // Skip empty rows or rows with missing essential data\n      if (!row['Warehouse Id'] && !row['SKU']) {\n        console.log(`Skipping empty row at index ${index}`);\n        return;\n      }\n\n      const processedRow: InsertFlipkartInventoryDaily = {\n        report_date: reportDate || new Date(),\n        attachment_path: attachmentPath || null,\n        warehouseId: row['Warehouse Id']?.trim() || null,\n        sku: row['SKU']?.trim() || null,\n        title: row['Title']?.trim() || null,\n        listingId: row['Listing Id']?.trim() || null,\n        fsn: row['FSN']?.trim() || null,\n        brand: row['Brand']?.trim() || null,\n        flipkartSellingPrice: parseDecimal(row['Flipkart Selling Price']) || null,\n        liveOnWebsite: parseInteger(row['Live on Website']) || null,\n        sales7D: parseInteger(row['Sales 7D']) || null,\n        sales14D: parseInteger(row['Sales 14D']) || null,\n        sales30D: parseInteger(row['Sales 30D']) || null,\n        sales60D: parseInteger(row['Sales 60D']) || null,\n        sales90D: parseInteger(row['Sales 90D']) || null,\n        b2bScheduled: parseInteger(row['B2B Scheduled']) || null,\n        transfersScheduled: parseInteger(row['Transfers Scheduled']) || null,\n        b2bShipped: parseInteger(row['B2B Shipped']) || null,\n        transfersShipped: parseInteger(row['Transfers Shipped']) || null,\n        b2bReceiving: parseInteger(row['B2B Receiving']) || null,\n        transfersReceiving: parseInteger(row['Transfers Receiving']) || null,\n        reservedForOrdersAndRecalls: parseInteger(row['Reserved for Orders and Recalls']) || null,\n        reservedForInternalProcessing: parseInteger(row['Reserved for Internal Processing']) || null,\n        returnsProcessing: parseInteger(row['Returns Processing']) || null,\n        ordersToDispatch: parseInteger(row['Orders to Dispatch']) || null,\n        recallsToDispatch: parseInteger(row['Recalls to Dispatch']) || null,\n        damaged: parseInteger(row['Damaged']) || null,\n        qcReject: parseInteger(row['QC Reject']) || null,\n        catalogReject: parseInteger(row['Catalog Reject']) || null,\n        returnsReject: parseInteger(row['Returns Reject']) || null,\n        sellerReturnReject: parseInteger(row['Seller Return Reject']) || null,\n        miscellaneous: parseInteger(row['Miscellaneous']) || null,\n        lengthCm: parseDecimal(row['Length (in cm)']) || null,\n        breadthCm: parseDecimal(row['Breadth (in cm)']) || null,\n        heightCm: parseDecimal(row['Height (in cm)']) || null,\n        weightKg: parseDecimal(row['Weight (in kg)']) || null,\n        fulfilmentType: row['Fulfilment Type']?.trim() || null,\n        fAssuredBadge: row['F Assured Badge']?.trim() || null\n      };\n\n      processedData.push(processedRow);\n    } catch (error) {\n      console.error(`Error processing row ${index}:`, error);\n      console.error('Row data:', row);\n      // Continue processing other rows\n    }\n  });\n\n  console.log(`Successfully processed ${processedData.length} FlipKart inventory records`);\n  return processedData;\n}","size_bytes":5786},"server/zepto-inventory-parser.ts":{"content":"import Papa from \"papaparse\";\nimport { InsertZeptoInventoryDaily, InsertZeptoInventoryRange } from \"@shared/schema\";\n\ninterface ZeptoInventoryRow {\n  \"City\": string;\n  \"SKU Name\": string;\n  \"SKU Code\": string;\n  \"EAN\": string;\n  \"SKU Category\": string;\n  \"SKU Sub Category\": string;\n  \"Brand Name\": string;\n  \"Manufacturer Name\": string;\n  \"Manufacturer ID\": string;\n  \"Units\": string;\n}\n\nexport function parseZeptoInventory(csvContent: string, reportDate?: Date, periodStart?: Date, periodEnd?: Date): {\n  dailyData: InsertZeptoInventoryDaily[];\n  rangeData: InsertZeptoInventoryRange[];\n  summary: {\n    totalRecords: number;\n    totalUnits: number;\n    uniqueCities: number;\n    uniqueSKUs: number;\n  };\n} {\n  console.log(\"Starting Zepto inventory CSV parsing...\");\n\n  const parseResult = Papa.parse<ZeptoInventoryRow>(csvContent, {\n    header: true,\n    skipEmptyLines: true,\n    delimiter: \",\",\n    quoteChar: '\"'\n  });\n\n  if (parseResult.errors.length > 0) {\n    console.error(\"CSV parsing errors:\", parseResult.errors);\n    throw new Error(`CSV parsing failed: ${parseResult.errors[0]?.message || 'Unknown error'}`);\n  }\n\n  const rows = parseResult.data;\n  console.log(`Found ${rows.length} Zepto inventory rows`);\n\n  const dailyData: InsertZeptoInventoryDaily[] = [];\n  const rangeData: InsertZeptoInventoryRange[] = [];\n  \n  let totalUnits = 0;\n  const uniqueCities = new Set<string>();\n  const uniqueSKUs = new Set<string>();\n\n  for (const row of rows) {\n    // Skip rows with missing essential data\n    if (!row[\"City\"] && !row[\"SKU Name\"] && !row[\"SKU Code\"]) {\n      continue;\n    }\n\n    const units = parseInt(row[\"Units\"] || \"0\", 10) || 0;\n    totalUnits += units;\n    \n    if (row[\"City\"]) uniqueCities.add(row[\"City\"]);\n    if (row[\"SKU Code\"]) uniqueSKUs.add(row[\"SKU Code\"]);\n\n    // Create daily record\n    if (reportDate) {\n      const dailyRecord: InsertZeptoInventoryDaily = {\n        report_date: reportDate,\n        city: row[\"City\"] || null,\n        sku_name: row[\"SKU Name\"] || null,\n        sku_code: row[\"SKU Code\"] || null,\n        ean: row[\"EAN\"] || null,\n        sku_category: row[\"SKU Category\"] || null,\n        sku_sub_category: row[\"SKU Sub Category\"] || null,\n        brand_name: row[\"Brand Name\"] || null,\n        manufacturer_name: row[\"Manufacturer Name\"] || null,\n        manufacturer_id: row[\"Manufacturer ID\"] || null,\n        units: units\n      };\n      dailyData.push(dailyRecord);\n    }\n\n    // Create range record\n    if (periodStart && periodEnd) {\n      const rangeRecord: InsertZeptoInventoryRange = {\n        period_start: periodStart,\n        period_end: periodEnd,\n        city: row[\"City\"] || null,\n        sku_name: row[\"SKU Name\"] || null,\n        sku_code: row[\"SKU Code\"] || null,\n        ean: row[\"EAN\"] || null,\n        sku_category: row[\"SKU Category\"] || null,\n        sku_sub_category: row[\"SKU Sub Category\"] || null,\n        brand_name: row[\"Brand Name\"] || null,\n        manufacturer_name: row[\"Manufacturer Name\"] || null,\n        manufacturer_id: row[\"Manufacturer ID\"] || null,\n        units: units\n      };\n      rangeData.push(rangeRecord);\n    }\n  }\n\n  console.log(`Successfully processed ${dailyData.length + rangeData.length} Zepto inventory records`);\n\n  return {\n    dailyData,\n    rangeData,\n    summary: {\n      totalRecords: rows.length,\n      totalUnits,\n      uniqueCities: uniqueCities.size,\n      uniqueSKUs: uniqueSKUs.size\n    }\n  };\n}\n\nexport function validateZeptoInventoryData(data: any[]): boolean {\n  if (!Array.isArray(data) || data.length === 0) {\n    return false;\n  }\n\n  // Check if it has the required Zepto columns\n  const requiredColumns = [\"City\", \"SKU Name\", \"SKU Code\", \"Brand Name\", \"Units\"];\n  const firstRow = data[0];\n  \n  if (!firstRow || typeof firstRow !== 'object') {\n    return false;\n  }\n\n  return requiredColumns.some(col => col in firstRow);\n}","size_bytes":3855},"server/bigbasket-inventory-parser.ts":{"content":"import { parse } from 'csv-parse/sync';\n\nexport interface BigBasketInventoryItem {\n  city: string;\n  sku_id: string;\n  brand_name: string;\n  sku_name: string;\n  sku_weight: string;\n  sku_pack_type: string;\n  sku_description: string;\n  top_category_name: string;\n  mid_category_name: string;\n  leaf_category_name: string;\n  soh: number;\n  soh_value: number;\n}\n\nexport function parseBigBasketInventoryCsv(csvContent: string): BigBasketInventoryItem[] {\n  console.log('Starting BigBasket inventory CSV parsing...');\n  \n  try {\n    const records = parse(csvContent, {\n      columns: true,\n      skip_empty_lines: true,\n      delimiter: ',',\n      trim: true\n    });\n    \n    console.log(`Found ${records.length} BigBasket inventory rows`);\n    \n    const items: BigBasketInventoryItem[] = [];\n    \n    for (const record of records) {\n      // Parse numeric values safely\n      const soh = parseFloat(record.soh) || 0;\n      const soh_value = parseFloat(record.soh_value) || 0;\n      \n      const item: BigBasketInventoryItem = {\n        city: record.city || '',\n        sku_id: record.sku_id || '',\n        brand_name: record.brand_name || '',\n        sku_name: record.sku_name || '',\n        sku_weight: record.sku_weight || '',\n        sku_pack_type: record.sku_pack_type || '',\n        sku_description: record.sku_description || '',\n        top_category_name: record.top_category_name || '',\n        mid_category_name: record.mid_category_name || '',\n        leaf_category_name: record.leaf_category_name || '',\n        soh,\n        soh_value\n      };\n      \n      items.push(item);\n    }\n    \n    console.log(`Successfully processed ${items.length} BigBasket inventory records`);\n    return items;\n  } catch (error) {\n    console.error('Error parsing BigBasket inventory CSV:', error);\n    throw new Error(`Failed to parse BigBasket inventory CSV: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}","size_bytes":1916},"client/src/components/layout/responsive-layout.tsx":{"content":"import { useState, ReactNode } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  ChartLine, \n  ShoppingCart, \n  Truck, \n  Upload, \n  Package, \n  Store, \n  User,\n  Database,\n  Menu,\n  X\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { MobileHeader } from \"./mobile-header\";\n\ntype NavigationItem = {\n  name: string;\n  href: string;\n  icon: any;\n  active: boolean;\n  description?: string;\n  comingSoon?: boolean;\n};\n\nconst navigation: NavigationItem[] = [\n  {\n    name: \"Dashboard\",\n    href: \"/\",\n    icon: ChartLine,\n    active: true\n  },\n  {\n    name: \"Platform PO\",\n    href: \"/platform-po\",\n    icon: ShoppingCart,\n    active: true,\n    description: \"Create, upload & manage platform orders\"\n  },\n  {\n    name: \"Distributor PO\",\n    href: \"/distributor-po\",\n    icon: Truck,\n    active: true,\n    description: \"Create & manage distributor purchase orders\"\n  },\n  {\n    name: \"Secondary Sales\",\n    href: \"/secondary-sales\",\n    icon: Upload,\n    active: true,\n    description: \"Upload & manage secondary sales data from platforms\"\n  },\n  {\n    name: \"Inventory\",\n    href: \"/inventory\",\n    icon: Package,\n    active: true,\n    description: \"Upload & manage inventory data from platforms\"\n  },\n  {\n    name: \"SAP Sync\",\n    href: \"/sap-sync\", \n    icon: Database,\n    active: true,\n    description: \"Sync item master data from SAP B1 Hanna ERP\"\n  },\n  {\n    name: \"SQL Query\",\n    href: \"/sql-query\",\n    icon: Database,\n    active: true,\n    description: \"Execute custom SQL queries and explore data\"\n  }\n];\n\ninterface ResponsiveLayoutProps {\n  children: ReactNode;\n}\n\nexport function ResponsiveLayout({ children }: ResponsiveLayoutProps) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [location] = useLocation();\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  const closeMobileMenu = () => {\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-gray-50\">\n      {/* Mobile Menu Overlay */}\n      {isMobileMenuOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n          onClick={closeMobileMenu}\n        />\n      )}\n\n      {/* Desktop Sidebar */}\n      <div className=\"hidden lg:flex lg:w-64 lg:flex-col lg:fixed lg:inset-y-0\">\n        <div className=\"flex-1 flex flex-col min-h-0 bg-white shadow-lg border-r border-gray-200\">\n          {/* Logo Section */}\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <Store className=\"text-white text-lg\" size={20} />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">POJivo E-Com</h1>\n              </div>\n            </div>\n          </div>\n          \n          {/* Navigation Section */}\n          <nav className=\"flex-1 px-4 py-6 space-y-2 overflow-y-auto\" style={{scrollbarWidth: 'thin'}}>\n            {navigation.map((item) => {\n              const isActive = location === item.href;\n              const Icon = item.icon;\n\n              return (\n                <Link key={item.name} to={item.href}>\n                  <div className={cn(\n                    \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-all duration-200\",\n                    isActive ? \"text-primary bg-blue-50 border border-blue-200 font-medium shadow-sm\" : \"text-gray-700 hover:bg-gray-50 hover:text-primary\",\n                    !item.active && \"opacity-50 pointer-events-none\"\n                  )}>\n                    <Icon size={20} />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"font-medium\">{item.name}</span>\n                        {item.comingSoon && (\n                          <span className=\"px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full\">Coming Soon</span>\n                        )}\n                      </div>\n                      {item.description && (\n                        <p className=\"text-xs text-gray-500 mt-1\">{item.description}</p>\n                      )}\n                    </div>\n                  </div>\n                </Link>\n              );\n            })}\n          </nav>\n          \n          {/* User Section */}\n          <div className=\"p-4 border-t border-gray-200\">\n            <div className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors duration-200\">\n              <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center\">\n                <User size={16} className=\"text-gray-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-900\">Admin User</p>\n                <p className=\"text-xs text-gray-500\">System Administrator</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Drawer */}\n      <div className={cn(\n        \"fixed inset-y-0 left-0 z-50 w-80 bg-white shadow-xl transform transition-transform duration-300 ease-in-out lg:hidden\",\n        isMobileMenuOpen ? \"translate-x-0\" : \"-translate-x-full\"\n      )}>\n        <div className=\"flex flex-col h-full\">\n          {/* Mobile Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Store className=\"text-white\" size={18} />\n              </div>\n              <h1 className=\"text-lg font-semibold text-gray-900\">POJivo E-Com</h1>\n            </div>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={closeMobileMenu}\n              className=\"h-8 w-8 p-0 hover:bg-gray-100\"\n            >\n              <X size={20} />\n            </Button>\n          </div>\n\n          {/* Mobile Navigation */}\n          <nav className=\"flex-1 px-4 py-4 space-y-1 overflow-y-auto\">\n            {navigation.map((item) => {\n              const isActive = location === item.href;\n              const Icon = item.icon;\n\n              return (\n                <Link key={item.name} to={item.href} onClick={closeMobileMenu}>\n                  <div className={cn(\n                    \"flex items-center space-x-3 px-4 py-4 rounded-xl transition-all duration-200\",\n                    isActive ? \"text-primary bg-blue-50 border border-blue-200 font-medium shadow-sm\" : \"text-gray-700 hover:bg-gray-50 hover:text-primary active:bg-gray-100\",\n                    !item.active && \"opacity-50 pointer-events-none\"\n                  )}>\n                    <Icon size={22} />\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"font-medium truncate\">{item.name}</span>\n                        {item.comingSoon && (\n                          <span className=\"px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full whitespace-nowrap\">Coming Soon</span>\n                        )}\n                      </div>\n                      {item.description && (\n                        <p className=\"text-xs text-gray-500 mt-1 leading-relaxed\">{item.description}</p>\n                      )}\n                    </div>\n                  </div>\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* Mobile User Section */}\n          <div className=\"p-4 border-t border-gray-200\">\n            <div className=\"flex items-center space-x-3 p-3 rounded-xl hover:bg-gray-50 cursor-pointer transition-colors duration-200\">\n              <div className=\"w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center\">\n                <User size={18} className=\"text-gray-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-900\">Admin User</p>\n                <p className=\"text-xs text-gray-500\">System Administrator</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content Area */}\n      <div className=\"flex-1 flex flex-col lg:ml-64 min-w-0\">\n        {/* Mobile Header */}\n        <div className=\"lg:hidden\">\n          <MobileHeader onMenuClick={toggleMobileMenu} />\n        </div>\n\n        {/* Page Content */}\n        <div className=\"flex-1 overflow-auto bg-gray-50\">\n          <div className=\"h-full\">\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8790},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, loginUserSchema } from \"@shared/schema\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Eye, EyeOff, User, Mail, Building, Phone, UserCircle, Shield } from \"lucide-react\";\nimport { Redirect } from \"wouter\";\nimport { z } from \"zod\";\n\nconst registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(6, \"Confirm password must be at least 6 characters\")\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const loginForm = useForm({\n    resolver: zodResolver(loginUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      full_name: \"\",\n      phone: \"\",\n      department: \"E-Com\" as \"E-Com\" | \"IT Six\",\n      role: \"user\",\n      is_active: true,\n    },\n  });\n\n  // Redirect if already authenticated\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const onLogin = (data: z.infer<typeof loginUserSchema>) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: z.infer<typeof registerSchema>) => {\n    const { confirmPassword, ...registerData } = data;\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-blue-600 rounded-2xl mb-4\">\n            <Shield className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">POJivo E-Com</h1>\n          <p className=\"text-gray-600\">E-commerce Purchase Order Management</p>\n        </div>\n\n        <Card className=\"shadow-2xl border-0\">\n          <CardHeader className=\"space-y-1 pb-4\">\n            <CardTitle className=\"text-2xl text-center text-gray-900\">Welcome</CardTitle>\n            <CardDescription className=\"text-center\">\n              Sign in to your account or create a new one\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"login\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"login\" className=\"text-sm\">Login</TabsTrigger>\n                <TabsTrigger value=\"register\" className=\"text-sm\">Register</TabsTrigger>\n              </TabsList>\n\n              {/* Login Tab */}\n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <Form {...loginForm}>\n                  <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                    <FormField\n                      control={loginForm.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-sm font-medium\">Username</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                              <Input\n                                placeholder=\"Enter your username\"\n                                className=\"pl-10 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500\"\n                                {...field}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={loginForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-sm font-medium\">Password</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Input\n                                type={showPassword ? \"text\" : \"password\"}\n                                placeholder=\"Enter your password\"\n                                className=\"h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 pr-10\"\n                                {...field}\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"absolute right-0 top-0 h-12 px-3 py-2 hover:bg-transparent\"\n                                onClick={() => setShowPassword(!showPassword)}\n                              >\n                                {showPassword ? (\n                                  <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                                ) : (\n                                  <Eye className=\"h-4 w-4 text-gray-400\" />\n                                )}\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full h-12 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg\"\n                      disabled={loginMutation.isPending}\n                    >\n                      {loginMutation.isPending ? (\n                        <div className=\"flex items-center\">\n                          <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                          Signing in...\n                        </div>\n                      ) : (\n                        \"Sign In\"\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n\n              {/* Register Tab */}\n              <TabsContent value=\"register\" className=\"space-y-4\">\n                <Form {...registerForm}>\n                  <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 gap-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium\">Username</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                                <Input\n                                  placeholder=\"Choose a username\"\n                                  className=\"pl-10 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500\"\n                                  {...field}\n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium\">Email</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                                <Input\n                                  type=\"email\"\n                                  placeholder=\"Enter your email\"\n                                  className=\"pl-10 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500\"\n                                  {...field}\n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"full_name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium\">Full Name</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <UserCircle className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                                <Input\n                                  placeholder=\"Enter your full name\"\n                                  className=\"pl-10 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500\"\n                                  {...field}\n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <FormField\n                          control={registerForm.control}\n                          name=\"phone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-sm font-medium\">Phone</FormLabel>\n                              <FormControl>\n                                <div className=\"relative\">\n                                  <Phone className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                                  <Input\n                                    placeholder=\"Phone number\"\n                                    className=\"pl-10 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500\"\n                                    {...field}\n                                  />\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={registerForm.control}\n                          name=\"department\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-sm font-medium\">Department</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger className=\"h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500\">\n                                    <div className=\"flex items-center\">\n                                      <Building className=\"mr-2 h-4 w-4 text-gray-400\" />\n                                      <SelectValue placeholder=\"Select department\" />\n                                    </div>\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"E-Com\">E-Com</SelectItem>\n                                  <SelectItem value=\"IT Six\">IT Six</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium\">Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  type={showPassword ? \"text\" : \"password\"}\n                                  placeholder=\"Create a password\"\n                                  className=\"h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 pr-10\"\n                                  {...field}\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-12 px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowPassword(!showPassword)}\n                                >\n                                  {showPassword ? (\n                                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"confirmPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium\">Confirm Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  type={showConfirmPassword ? \"text\" : \"password\"}\n                                  placeholder=\"Confirm your password\"\n                                  className=\"h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 pr-10\"\n                                  {...field}\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-12 px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                                >\n                                  {showConfirmPassword ? (\n                                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full h-12 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg\"\n                      disabled={registerMutation.isPending}\n                    >\n                      {registerMutation.isPending ? (\n                        <div className=\"flex items-center\">\n                          <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                          Creating account...\n                        </div>\n                      ) : (\n                        \"Create Account\"\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center mt-8\">\n          <p className=\"text-sm text-gray-600\">\n            Secure e-commerce management platform\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17736},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser, loginUserSchema, LoginUser, changePasswordSchema, ChangePassword, updateUserSchema, UpdateUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginUser>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n  updateProfileMutation: UseMutationResult<SelectUser, Error, UpdateUser>;\n  changePasswordMutation: UseMutationResult<{message: string}, Error, ChangePassword>;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  \n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginUser) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      if (!res.ok) {\n        const errorText = await res.text();\n        throw new Error(errorText || \"Login failed\");\n      }\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: `Logged in as ${user.username}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.error || \"Registration failed\");\n      }\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Account created!\",\n        description: `Welcome ${user.username}! Your account has been successfully created.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (updateData: UpdateUser) => {\n      const res = await apiRequest(\"PUT\", \"/api/user/profile\", updateData);\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.error || \"Profile update failed\");\n      }\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Profile updated!\",\n        description: \"Your profile information has been successfully updated.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (passwordData: ChangePassword) => {\n      const res = await apiRequest(\"PUT\", \"/api/user/password\", passwordData);\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.error || \"Password change failed\");\n      }\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password updated!\",\n        description: \"Your password has been successfully changed.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Password change failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n        updateProfileMutation,\n        changePasswordMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":5201},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser, insertUserSchema, loginUserSchema, changePasswordSchema, updateUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"your-secret-key-here-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        }\n        \n        // Update last login\n        await storage.updateLastLogin(user.id);\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  \n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      // Handle both UUID strings and numeric IDs\n      const user = typeof id === 'string' ? \n        await storage.getUserById(id) : \n        await storage.getUser(id);\n      done(null, user || null);\n    } catch (error) {\n      console.error(\"User deserialization error:\", error);\n      done(null, null); // Don't propagate error, just return null user\n    }\n  });\n\n  // Register endpoint\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ error: \"Username already exists\" });\n      }\n\n      // Check if email already exists\n      if (validatedData.email) {\n        const existingEmail = await storage.getUserByEmail(validatedData.email);\n        if (existingEmail) {\n          return res.status(400).json({ error: \"Email already exists\" });\n        }\n      }\n\n      // Create user with hashed password\n      const user = await storage.createUser({\n        ...validatedData,\n        password: await hashPassword(validatedData.password),\n        created_at: new Date(),\n        updated_at: new Date(),\n        last_login: new Date(),\n      });\n\n      // Login the user\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input data\", details: error.errors });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ error: \"Registration failed\" });\n    }\n  });\n\n  // Login endpoint\n  app.post(\"/api/login\", (req, res, next) => {\n    try {\n      const validatedData = loginUserSchema.parse(req.body);\n      \n      passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n        if (err) return next(err);\n        if (!user) {\n          return res.status(401).send(\"Invalid username or password\");\n        }\n        \n        req.login(user, (err) => {\n          if (err) return next(err);\n          res.status(200).json(user);\n        });\n      })(req, res, next);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input data\", details: error.errors });\n      }\n      res.status(400).json({ error: \"Invalid request\" });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n\n  // Update user profile endpoint\n  app.put(\"/api/user/profile\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n      \n      const validatedData = updateUserSchema.parse(req.body);\n      const updatedUser = await storage.updateUser(req.user!.id, validatedData);\n      \n      res.json(updatedUser);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input data\", details: error.errors });\n      }\n      console.error(\"Profile update error:\", error);\n      res.status(500).json({ error: \"Profile update failed\" });\n    }\n  });\n\n  // Change password endpoint\n  app.put(\"/api/user/password\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n      \n      const validatedData = changePasswordSchema.parse(req.body);\n      const user = await storage.getUser(req.user!.id);\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Verify current password\n      const isCurrentPasswordValid = await comparePasswords(\n        validatedData.currentPassword,\n        user.password\n      );\n      \n      if (!isCurrentPasswordValid) {\n        return res.status(400).json({ error: \"Current password is incorrect\" });\n      }\n\n      // Update password\n      const hashedNewPassword = await hashPassword(validatedData.newPassword);\n      await storage.changePassword(req.user!.id, hashedNewPassword);\n      \n      res.json({ message: \"Password changed successfully\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input data\", details: error.errors });\n      }\n      console.error(\"Password change error:\", error);\n      res.status(500).json({ error: \"Password change failed\" });\n    }\n  });\n\n  // Update profile endpoint\n  app.put(\"/api/profile\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const validatedData = updateUserSchema.parse(req.body);\n      \n      // Check if email is being changed and if it's already taken\n      if (validatedData.email && validatedData.email !== req.user.email) {\n        const existingEmail = await storage.getUserByEmail(validatedData.email);\n        if (existingEmail) {\n          return res.status(400).json({ error: \"Email already exists\" });\n        }\n      }\n      \n      const updatedUser = await storage.updateUser(req.user.id, validatedData);\n      res.json(updatedUser);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input data\", details: error.errors });\n      }\n      console.error(\"Profile update error:\", error);\n      res.status(500).json({ error: \"Profile update failed\" });\n    }\n  });\n\n  // Change password endpoint\n  app.post(\"/api/change-password\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const validatedData = changePasswordSchema.parse(req.body);\n      \n      // Verify current password\n      const user = await storage.getUser(req.user.id);\n      if (!user || !(await comparePasswords(validatedData.currentPassword, user.password))) {\n        return res.status(400).json({ error: \"Current password is incorrect\" });\n      }\n      \n      // Update password\n      const hashedNewPassword = await hashPassword(validatedData.newPassword);\n      await storage.changePassword(req.user.id, hashedNewPassword);\n      \n      res.json({ message: \"Password changed successfully\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input data\", details: error.errors });\n      }\n      console.error(\"Password change error:\", error);\n      res.status(500).json({ error: \"Password change failed\" });\n    }\n  });\n}","size_bytes":8935}}}