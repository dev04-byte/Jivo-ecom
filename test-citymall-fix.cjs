// Test and fix CityMall database tables
const { Pool } = require('pg');
const fs = require('fs');

// Database connection (same as server/db.ts)
const connectionString = process.env.DATABASE_URL ||
  'postgresql://postgres:password@localhost:5432/jivo_ecom';

const pool = new Pool({
  connectionString,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : undefined
});

async function fixAndTestCityMall() {
  try {
    console.log('üîß Fixing CityMall database tables...');

    // Check if tables exist at all
    const tablesExist = await pool.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
      AND table_name IN ('city_mall_po_header', 'city_mall_po_lines')
    `);

    console.log('üìã Found tables:', tablesExist.rows.map(r => r.table_name));

    if (tablesExist.rows.length === 0) {
      console.log('‚ùå CityMall tables do not exist! Creating them...');

      // Create tables from scratch
      await pool.query(`
        CREATE TABLE IF NOT EXISTS city_mall_po_header (
          id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
          po_number VARCHAR(50) NOT NULL,
          po_date TIMESTAMP,
          po_expiry_date TIMESTAMP,
          vendor_name VARCHAR(255),
          vendor_gstin VARCHAR(50),
          vendor_code VARCHAR(50),
          status VARCHAR(20) DEFAULT 'Open',
          total_quantity INTEGER DEFAULT 0,
          total_base_amount DECIMAL(15,2) DEFAULT 0,
          total_igst_amount DECIMAL(15,2) DEFAULT 0,
          total_cess_amount DECIMAL(15,2) DEFAULT 0,
          total_amount DECIMAL(15,2) DEFAULT 0,
          unique_hsn_codes TEXT[],
          created_by VARCHAR(100),
          uploaded_by VARCHAR(100),
          created_at TIMESTAMP DEFAULT NOW(),
          updated_at TIMESTAMP DEFAULT NOW()
        )
      `);

      await pool.query(`
        CREATE TABLE IF NOT EXISTS city_mall_po_lines (
          id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
          po_header_id INTEGER REFERENCES city_mall_po_header(id) ON DELETE CASCADE,
          line_number INTEGER NOT NULL,
          article_id VARCHAR(50),
          article_name TEXT,
          hsn_code VARCHAR(20),
          mrp DECIMAL(10,2),
          base_cost_price DECIMAL(10,2),
          quantity INTEGER DEFAULT 0,
          base_amount DECIMAL(15,2),
          igst_percent DECIMAL(5,2),
          cess_percent DECIMAL(5,2),
          igst_amount DECIMAL(10,2),
          cess_amount DECIMAL(10,2),
          total_amount DECIMAL(15,2),
          status VARCHAR(20) DEFAULT 'Pending',
          created_by VARCHAR(100),
          created_at TIMESTAMP DEFAULT NOW()
        )
      `);

      console.log('‚úÖ CityMall tables created successfully!');
    } else {
      console.log('‚úÖ CityMall tables exist, checking structure...');

      // Check current structure
      const headerColumns = await pool.query(`
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns
        WHERE table_name = 'city_mall_po_header'
        ORDER BY ordinal_position
      `);

      console.log('üìã Current city_mall_po_header columns:');
      headerColumns.rows.forEach(col => {
        console.log(`  - ${col.column_name}: ${col.data_type} (${col.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
      });

      // Check if required columns exist
      const requiredColumns = ['po_date', 'po_expiry_date', 'vendor_name', 'vendor_gstin', 'vendor_code'];
      const existingColumns = headerColumns.rows.map(r => r.column_name);
      const missingColumns = requiredColumns.filter(col => !existingColumns.includes(col));

      if (missingColumns.length > 0) {
        console.log('‚ö†Ô∏è Missing columns:', missingColumns);
        console.log('üîß Adding missing columns...');

        for (const column of missingColumns) {
          let alterQuery = '';
          switch (column) {
            case 'po_date':
            case 'po_expiry_date':
              alterQuery = `ALTER TABLE city_mall_po_header ADD COLUMN ${column} TIMESTAMP`;
              break;
            case 'vendor_name':
              alterQuery = `ALTER TABLE city_mall_po_header ADD COLUMN ${column} VARCHAR(255)`;
              break;
            case 'vendor_gstin':
            case 'vendor_code':
              alterQuery = `ALTER TABLE city_mall_po_header ADD COLUMN ${column} VARCHAR(50)`;
              break;
          }

          if (alterQuery) {
            try {
              await pool.query(alterQuery);
              console.log(`‚úÖ Added column: ${column}`);
            } catch (error) {
              console.error(`‚ùå Failed to add column ${column}:`, error.message);
            }
          }
        }
      } else {
        console.log('‚úÖ All required columns exist');
      }
    }

    // Test insertion
    console.log('üß™ Testing data insertion...');

    const testHeader = {
      po_number: 'TEST-CM-' + Date.now(),
      po_date: new Date(),
      vendor_name: 'Test Vendor',
      vendor_gstin: 'TEST123456789',
      status: 'Open',
      total_quantity: 10,
      total_amount: 1000.00,
      created_by: 'test-user'
    };

    const insertResult = await pool.query(`
      INSERT INTO city_mall_po_header (po_number, po_date, vendor_name, vendor_gstin, status, total_quantity, total_amount, created_by)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      RETURNING *
    `, [testHeader.po_number, testHeader.po_date, testHeader.vendor_name, testHeader.vendor_gstin,
        testHeader.status, testHeader.total_quantity, testHeader.total_amount, testHeader.created_by]);

    console.log('‚úÖ Header inserted successfully:', insertResult.rows[0].id);

    const testLine = {
      po_header_id: insertResult.rows[0].id,
      line_number: 1,
      article_id: 'ART001',
      article_name: 'Test Article',
      hsn_code: '12345678',
      quantity: 5,
      mrp: 100.00,
      base_cost_price: 80.00,
      total_amount: 400.00
    };

    const lineResult = await pool.query(`
      INSERT INTO city_mall_po_lines (po_header_id, line_number, article_id, article_name, hsn_code, quantity, mrp, base_cost_price, total_amount)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      RETURNING *
    `, [testLine.po_header_id, testLine.line_number, testLine.article_id, testLine.article_name,
        testLine.hsn_code, testLine.quantity, testLine.mrp, testLine.base_cost_price, testLine.total_amount]);

    console.log('‚úÖ Line inserted successfully:', lineResult.rows[0].id);

    // Clean up test data
    await pool.query('DELETE FROM city_mall_po_lines WHERE po_header_id = $1', [insertResult.rows[0].id]);
    await pool.query('DELETE FROM city_mall_po_header WHERE id = $1', [insertResult.rows[0].id]);

    console.log('üßπ Test data cleaned up');

    // Check final data count
    const headerCount = await pool.query('SELECT COUNT(*) FROM city_mall_po_header');
    const linesCount = await pool.query('SELECT COUNT(*) FROM city_mall_po_lines');

    console.log(`üìä Current data: ${headerCount.rows[0].count} headers, ${linesCount.rows[0].count} lines`);
    console.log('üéâ CityMall database test completed successfully!');

  } catch (error) {
    console.error('‚ùå Database test failed:', error);
  } finally {
    await pool.end();
  }
}

fixAndTestCityMall();