import { pgTable, index, varchar, json, timestamp, integer, text, numeric, serial, date, foreignKey, check, boolean, unique, char, bigint, bigserial, jsonb, inet, pgSequence } from "drizzle-orm/pg-core"
import { sql } from "drizzle-orm"


export const districtsIdSeq = pgSequence("districts_id_seq", {  startWith: "1", increment: "1", minValue: "1", maxValue: "2147483647", cache: "1", cycle: false })

export const session = pgTable("session", {
	sid: varchar().primaryKey().notNull(),
	sess: json().notNull(),
	expire: timestamp({ precision: 6, mode: 'string' }).notNull(),
}, (table) => [
	index("IDX_session_expire").using("btree", table.expire.asc().nullsLast().op("timestamp_ops")),
	index("idx_session_expire").using("btree", table.expire.asc().nullsLast().op("timestamp_ops")),
]);

export const invJioMartJmRange = pgTable("INV_JioMart_JM_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""INV_JioMart_JM_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	rfcId: text("rfc_id"),
	rfcName: text("rfc_name"),
	skuId: text("sku_id").notNull(),
	title: text(),
	category: text(),
	productStatus: text("product_status"),
	lastUpdatedAt: timestamp("last_updated_at", { mode: 'string' }),
	totalSellableInv: integer("total_sellable_inv"),
	totalUnsellableInv: integer("total_unsellable_inv"),
	fcDmgInv: integer("fc_dmg_inv"),
	lspDmgInv: integer("lsp_dmg_inv"),
	custDmgInv: integer("cust_dmg_inv"),
	recvdDmg: integer("recvd_dmg"),
	expiredInv: integer("expired_inv"),
	otherUnsellableInv: integer("other_unsellable_inv"),
	mtdFwdIntransit: integer("mtd_fwd_intransit"),
	mtdDelvdCust: integer("mtd_delvd_cust"),
	mtdRetIntransit: integer("mtd_ret_intransit"),
	mtdOrderCount: integer("mtd_order_count"),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const invSwiggyJmDaily = pgTable("INV_Swiggy_JM_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""INV_Swiggy_JM_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	storageType: text("storage_type"),
	facilityName: text("facility_name"),
	city: text(),
	skuCode: text("sku_code"),
	skuDescription: text("sku_description"),
	l1Category: text("l1_category"),
	l2Category: text("l2_category"),
	shelfLifeDays: integer("shelf_life_days"),
	businessCategory: text("business_category"),
	daysOnHand: integer("days_on_hand"),
	potentialGmvLoss: numeric("potential_gmv_loss", { precision: 10, scale:  2 }),
	openPos: text("open_pos"),
	openPoQuantity: integer("open_po_quantity"),
	warehouseQtyAvailable: integer("warehouse_qty_available"),
	lastUpdatedAt: timestamp("last_updated_at", { mode: 'string' }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const invSwiggyJmRange = pgTable("INV_Swiggy_JM_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""INV_Swiggy_JM_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	storageType: text("storage_type"),
	facilityName: text("facility_name"),
	city: text(),
	skuCode: text("sku_code"),
	skuDescription: text("sku_description"),
	l1Category: text("l1_category"),
	l2Category: text("l2_category"),
	shelfLifeDays: integer("shelf_life_days"),
	businessCategory: text("business_category"),
	daysOnHand: integer("days_on_hand"),
	potentialGmvLoss: numeric("potential_gmv_loss", { precision: 10, scale:  2 }),
	openPos: text("open_pos"),
	openPoQuantity: integer("open_po_quantity"),
	warehouseQtyAvailable: integer("warehouse_qty_available"),
	lastUpdatedAt: timestamp("last_updated_at", { mode: 'string' }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const invZeptoJmDaily = pgTable("INV_Zepto_JM_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""INV_Zepto_JM_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	city: varchar({ length: 100 }),
	skuName: text("sku_name"),
	skuCode: varchar("sku_code", { length: 200 }),
	ean: varchar({ length: 50 }),
	skuCategory: varchar("sku_category", { length: 100 }),
	skuSubCategory: varchar("sku_sub_category", { length: 100 }),
	brandName: varchar("brand_name", { length: 100 }),
	manufacturerName: varchar("manufacturer_name", { length: 200 }),
	manufacturerId: varchar("manufacturer_id", { length: 100 }),
	units: integer(),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const invZeptoJmRange = pgTable("INV_Zepto_JM_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""INV_Zepto_JM_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	city: varchar({ length: 100 }),
	skuName: text("sku_name"),
	skuCode: varchar("sku_code", { length: 200 }),
	ean: varchar({ length: 50 }),
	skuCategory: varchar("sku_category", { length: 100 }),
	skuSubCategory: varchar("sku_sub_category", { length: 100 }),
	brandName: varchar("brand_name", { length: 100 }),
	manufacturerName: varchar("manufacturer_name", { length: 200 }),
	manufacturerId: varchar("manufacturer_id", { length: 100 }),
	units: integer(),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const scAmJwDaily = pgTable("SC_AM_JW_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_AM_JW_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	asin: varchar({ length: 50 }).notNull(),
	productTitle: text("product_title").notNull(),
	brand: varchar({ length: 100 }),
	orderedRevenue: numeric("ordered_revenue", { precision: 15, scale:  2 }),
	orderedUnits: integer("ordered_units"),
	shippedRevenue: numeric("shipped_revenue", { precision: 15, scale:  2 }),
	shippedCogs: numeric("shipped_cogs", { precision: 15, scale:  2 }),
	shippedUnits: integer("shipped_units"),
	customerReturns: integer("customer_returns"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
	attachmentPath: text("attachment_path"),
});

export const scAmJwRange = pgTable("SC_AM_JW_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_AM_JW_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	asin: varchar({ length: 50 }).notNull(),
	productTitle: text("product_title").notNull(),
	brand: varchar({ length: 100 }),
	orderedRevenue: numeric("ordered_revenue", { precision: 15, scale:  2 }),
	orderedUnits: integer("ordered_units"),
	shippedRevenue: numeric("shipped_revenue", { precision: 15, scale:  2 }),
	shippedCogs: numeric("shipped_cogs", { precision: 15, scale:  2 }),
	shippedUnits: integer("shipped_units"),
	customerReturns: integer("customer_returns"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
	attachmentPath: text("attachment_path"),
});

export const scAmJmDaily = pgTable("SC_AM_JM_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_AM_JM_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	asin: varchar({ length: 50 }).notNull(),
	productTitle: text("product_title").notNull(),
	brand: varchar({ length: 100 }),
	orderedRevenue: numeric("ordered_revenue", { precision: 15, scale:  2 }),
	orderedUnits: integer("ordered_units"),
	shippedRevenue: numeric("shipped_revenue", { precision: 15, scale:  2 }),
	shippedCogs: numeric("shipped_cogs", { precision: 15, scale:  2 }),
	shippedUnits: integer("shipped_units"),
	customerReturns: integer("customer_returns"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
	attachmentPath: text("attachment_path"),
});

export const scBigBasketJmRange = pgTable("SC_BigBasket_JM_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_BigBasket_JM_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	dateRange: text("date_range"),
	sourceCityName: text("source_city_name"),
	brandName: text("brand_name"),
	topSlug: text("top_slug"),
	midSlug: text("mid_slug"),
	leafSlug: text("leaf_slug"),
	sourceSkuId: text("source_sku_id"),
	skuDescription: text("sku_description"),
	skuWeight: text("sku_weight"),
	totalQuantity: numeric("total_quantity", { precision: 10, scale:  2 }),
	totalMrp: numeric("total_mrp", { precision: 10, scale:  2 }),
	totalSales: numeric("total_sales", { precision: 10, scale:  2 }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const scBlinkitJmDaily = pgTable("SC_Blinkit_JM_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_Blinkit_JM_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	itemId: text("item_id"),
	itemName: text("item_name"),
	manufacturerId: text("manufacturer_id"),
	manufacturerName: text("manufacturer_name"),
	cityId: text("city_id"),
	cityName: text("city_name"),
	category: text(),
	date: timestamp({ mode: 'string' }).notNull(),
	qtySold: numeric("qty_sold", { precision: 10, scale:  2 }),
	mrp: numeric({ precision: 10, scale:  2 }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const scBlinkitJmRange = pgTable("SC_Blinkit_JM_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_Blinkit_JM_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	itemId: text("item_id"),
	itemName: text("item_name"),
	manufacturerId: text("manufacturer_id"),
	manufacturerName: text("manufacturer_name"),
	cityId: text("city_id"),
	cityName: text("city_name"),
	category: text(),
	date: timestamp({ mode: 'string' }).notNull(),
	qtySold: numeric("qty_sold", { precision: 10, scale:  2 }),
	mrp: numeric({ precision: 10, scale:  2 }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const scBigBasketJmDaily = pgTable("SC_BigBasket_JM_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_BigBasket_JM_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	dateRange: text("date_range"),
	sourceCityName: text("source_city_name"),
	brandName: text("brand_name"),
	topSlug: text("top_slug"),
	midSlug: text("mid_slug"),
	leafSlug: text("leaf_slug"),
	sourceSkuId: text("source_sku_id"),
	skuDescription: text("sku_description"),
	skuWeight: text("sku_weight"),
	totalQuantity: numeric("total_quantity", { precision: 10, scale:  2 }),
	totalMrp: numeric("total_mrp", { precision: 10, scale:  2 }),
	totalSales: numeric("total_sales", { precision: 10, scale:  2 }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const scFlipKartChirag2Month = pgTable("SC_FlipKart_CHIRAG_2Month", {
	id: serial().primaryKey().notNull(),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	businessUnit: text("business_unit").notNull(),
	tenantId: text("tenant_id"),
	retailerId: text("retailer_id"),
	retailerName: text("retailer_name"),
	fsn: text(),
	category: text(),
	vertical: text(),
	brand: text(),
	productTitle: text("product_title"),
	ean: text(),
	styleCode: text("style_code"),
	isbn: text(),
	publisher: text(),
	hsn: text(),
	modelId: text("model_id"),
	lastCalculatedAt: text("last_calculated_at"),
	saleDate: timestamp("sale_date", { mode: 'string' }),
	saleQuantity: integer("sale_quantity"),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const scFlipKartJm2Month = pgTable("SC_FlipKart_JM_2Month", {
	id: serial().primaryKey().notNull(),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	businessUnit: text("business_unit").notNull(),
	tenantId: text("tenant_id"),
	retailerId: text("retailer_id"),
	retailerName: text("retailer_name"),
	fsn: text(),
	category: text(),
	vertical: text(),
	brand: text(),
	productTitle: text("product_title"),
	ean: text(),
	styleCode: text("style_code"),
	isbn: text(),
	publisher: text(),
	hsn: text(),
	modelId: text("model_id"),
	lastCalculatedAt: text("last_calculated_at"),
	saleDate: timestamp("sale_date", { mode: 'string' }),
	saleQuantity: integer("sale_quantity"),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const scJioMartCancelJmDaily = pgTable("SC_JioMartCancel_JM_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_JioMartCancel_JM_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	shipmentNumber: text("shipment_number"),
	ean: text(),
	sku: text(),
	product: text(),
	invoiceId: text("invoice_id"),
	invoiceAmount: numeric("invoice_amount", { precision: 10, scale:  2 }),
	quantity: integer(),
	amount: numeric({ precision: 10, scale:  2 }),
	status: text(),
	reason: text(),
	paymentMethod: text("payment_method"),
	fulfillerName: text("fulfiller_name"),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const scJioMartCancelJmRange = pgTable("SC_JioMartCancel_JM_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_JioMartCancel_JM_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	shipmentNumber: text("shipment_number"),
	ean: text(),
	sku: text(),
	product: text(),
	invoiceId: text("invoice_id"),
	invoiceAmount: numeric("invoice_amount", { precision: 10, scale:  2 }),
	quantity: integer(),
	amount: numeric({ precision: 10, scale:  2 }),
	status: text(),
	reason: text(),
	paymentMethod: text("payment_method"),
	fulfillerName: text("fulfiller_name"),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const scJioMartSaleJmDaily = pgTable("SC_JioMartSale_JM_Daily", {
	id: serial().primaryKey().notNull(),
	reportDate: date("report_date"),
	shipmentNumber: varchar("shipment_number", { length: 100 }),
	fulfillmentType: varchar("fulfillment_type", { length: 100 }),
	shipmentCreatedAt: timestamp("shipment_created_at", { mode: 'string' }),
	shipmentStatus: varchar("shipment_status", { length: 50 }),
	fulfillerName: varchar("fulfiller_name", { length: 200 }),
	acceptedAt: timestamp("accepted_at", { mode: 'string' }),
	productTitle: varchar("product_title", { length: 500 }),
	ean: varchar({ length: 50 }),
	sku: varchar({ length: 100 }),
	qty: integer().default(0),
	mrp: numeric({ precision: 10, scale:  2 }).default('0'),
	promotionAmt: numeric("promotion_amt", { precision: 10, scale:  2 }).default('0'),
	shippingCharge: numeric("shipping_charge", { precision: 10, scale:  2 }).default('0'),
	itemTotal: numeric("item_total", { precision: 10, scale:  2 }).default('0'),
	paymentMethodUsed: varchar("payment_method_used", { length: 100 }),
	trackingCode: varchar("tracking_code", { length: 100 }),
	shippingAgentCode: varchar("shipping_agent_code", { length: 100 }),
	invoiceId: varchar("invoice_id", { length: 100 }),
	acceptanceTatDateTime: timestamp("acceptance_tat_date_time", { mode: 'string' }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	attachmentPath: text("attachment_path"),
});

export const scJioMartSaleJmRange = pgTable("SC_JioMartSale_JM_Range", {
	id: serial().primaryKey().notNull(),
	periodStart: date("period_start"),
	periodEnd: date("period_end"),
	shipmentNumber: varchar("shipment_number", { length: 100 }),
	fulfillmentType: varchar("fulfillment_type", { length: 100 }),
	shipmentCreatedAt: timestamp("shipment_created_at", { mode: 'string' }),
	shipmentStatus: varchar("shipment_status", { length: 50 }),
	fulfillerName: varchar("fulfiller_name", { length: 200 }),
	acceptedAt: timestamp("accepted_at", { mode: 'string' }),
	productTitle: varchar("product_title", { length: 500 }),
	ean: varchar({ length: 50 }),
	sku: varchar({ length: 100 }),
	qty: integer().default(0),
	mrp: numeric({ precision: 10, scale:  2 }).default('0'),
	promotionAmt: numeric("promotion_amt", { precision: 10, scale:  2 }).default('0'),
	shippingCharge: numeric("shipping_charge", { precision: 10, scale:  2 }).default('0'),
	itemTotal: numeric("item_total", { precision: 10, scale:  2 }).default('0'),
	paymentMethodUsed: varchar("payment_method_used", { length: 100 }),
	trackingCode: varchar("tracking_code", { length: 100 }),
	shippingAgentCode: varchar("shipping_agent_code", { length: 100 }),
	invoiceId: varchar("invoice_id", { length: 100 }),
	acceptanceTatDateTime: timestamp("acceptance_tat_date_time", { mode: 'string' }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	attachmentPath: text("attachment_path"),
});

export const scSwiggyJmDaily = pgTable("SC_Swiggy_JM_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_Swiggy_JM_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	brand: text(),
	orderedDate: timestamp("ordered_date", { mode: 'string' }).notNull(),
	city: text(),
	areaName: text("area_name"),
	storeId: text("store_id"),
	l1Category: text("l1_category"),
	l2Category: text("l2_category"),
	l3Category: text("l3_category"),
	productName: text("product_name"),
	variant: text(),
	itemCode: text("item_code"),
	combo: text(),
	comboItemCode: text("combo_item_code"),
	comboUnitsSold: numeric("combo_units_sold", { precision: 10, scale:  2 }),
	baseMrp: numeric("base_mrp", { precision: 10, scale:  2 }),
	unitsSold: numeric("units_sold", { precision: 10, scale:  2 }),
	gmv: numeric({ precision: 10, scale:  2 }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const scSwiggyJmRange = pgTable("SC_Swiggy_JM_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_Swiggy_JM_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	brand: text(),
	orderedDate: timestamp("ordered_date", { mode: 'string' }).notNull(),
	city: text(),
	areaName: text("area_name"),
	storeId: text("store_id"),
	l1Category: text("l1_category"),
	l2Category: text("l2_category"),
	l3Category: text("l3_category"),
	productName: text("product_name"),
	variant: text(),
	itemCode: text("item_code"),
	combo: text(),
	comboItemCode: text("combo_item_code"),
	comboUnitsSold: numeric("combo_units_sold", { precision: 10, scale:  2 }),
	baseMrp: numeric("base_mrp", { precision: 10, scale:  2 }),
	unitsSold: numeric("units_sold", { precision: 10, scale:  2 }),
	gmv: numeric({ precision: 10, scale:  2 }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const poAttachments = pgTable("po_attachments", {
	id: serial().primaryKey().notNull(),
	poId: integer("po_id").notNull(),
	poType: varchar("po_type", { length: 50 }).notNull(),
	fileName: varchar("file_name", { length: 255 }).notNull(),
	originalName: varchar("original_name", { length: 255 }).notNull(),
	filePath: text("file_path").notNull(),
	fileSize: integer("file_size").notNull(),
	mimeType: varchar("mime_type", { length: 100 }).notNull(),
	uploadedBy: integer("uploaded_by"),
	uploadedAt: timestamp("uploaded_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	isActive: boolean("is_active").default(true),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	updatedAt: timestamp("updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
}, (table) => [
	index("idx_po_attachments_po_id").using("btree", table.poId.asc().nullsLast().op("int4_ops")),
	index("idx_po_attachments_po_type").using("btree", table.poType.asc().nullsLast().op("text_ops")),
	index("idx_po_attachments_uploaded_by").using("btree", table.uploadedBy.asc().nullsLast().op("int4_ops")),
	foreignKey({
			columns: [table.uploadedBy],
			foreignColumns: [users.id],
			name: "po_attachments_uploaded_by_fkey"
		}),
	check("check_po_type", sql`(po_type)::text = ANY ((ARRAY['platform'::character varying, 'distributor'::character varying])::text[])`),
]);

export const invAmazonJmDaily = pgTable("INV_Amazon_JM_Daily", {
	id: serial().primaryKey().notNull(),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	asin: text().notNull(),
	productName: text("product_name"),
	sku: text(),
	fnsku: text(),
	category: text(),
	brand: text(),
	size: text(),
	unit: text(),
	warehouseLocation: text("warehouse_location"),
	condition: text(),
	fulfillmentChannel: text("fulfillment_channel"),
	unitsAvailable: integer("units_available"),
	reservedQuantity: integer("reserved_quantity"),
	inboundQuantity: integer("inbound_quantity"),
	researchingQuantity: integer("researching_quantity"),
	unfulfillableQuantity: integer("unfulfillable_quantity"),
	supplierName: text("supplier_name"),
	costPerUnit: numeric("cost_per_unit", { precision: 10, scale:  2 }),
	totalValue: numeric("total_value", { precision: 10, scale:  2 }),
	lastUpdatedAt: timestamp("last_updated_at", { mode: 'string' }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	updatedAt: timestamp("updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
});

export const invJioMartJmDaily = pgTable("INV_JioMart_JM_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""INV_JioMart_JM_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	rfcId: text("rfc_id"),
	rfcName: text("rfc_name"),
	skuId: text("sku_id").notNull(),
	title: text(),
	category: text(),
	productStatus: text("product_status"),
	lastUpdatedAt: timestamp("last_updated_at", { mode: 'string' }),
	totalSellableInv: integer("total_sellable_inv"),
	totalUnsellableInv: integer("total_unsellable_inv"),
	fcDmgInv: integer("fc_dmg_inv"),
	lspDmgInv: integer("lsp_dmg_inv"),
	custDmgInv: integer("cust_dmg_inv"),
	recvdDmg: integer("recvd_dmg"),
	expiredInv: integer("expired_inv"),
	otherUnsellableInv: integer("other_unsellable_inv"),
	mtdFwdIntransit: integer("mtd_fwd_intransit"),
	mtdDelvdCust: integer("mtd_delvd_cust"),
	mtdRetIntransit: integer("mtd_ret_intransit"),
	mtdOrderCount: integer("mtd_order_count"),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_inv_jiomart_jm_daily_report_date").using("btree", table.reportDate.asc().nullsLast().op("timestamp_ops")),
]);

export const invFlipKartJmDaily = pgTable("INV_FlipKart_JM_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""INV_FlipKart_JM_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	warehouseId: varchar({ length: 100 }),
	sku: varchar({ length: 200 }),
	title: text(),
	listingId: varchar({ length: 100 }),
	fsn: varchar({ length: 100 }),
	brand: varchar({ length: 100 }),
	flipkartSellingPrice: numeric({ precision: 10, scale:  2 }),
	liveOnWebsite: integer(),
	sales7D: integer(),
	sales14D: integer(),
	sales30D: integer(),
	sales60D: integer(),
	sales90D: integer(),
	b2BScheduled: integer(),
	transfersScheduled: integer(),
	b2BShipped: integer(),
	transfersShipped: integer(),
	b2BReceiving: integer(),
	transfersReceiving: integer(),
	reservedForOrdersAndRecalls: integer(),
	reservedForInternalProcessing: integer(),
	returnsProcessing: integer(),
	ordersToDispatch: integer(),
	recallsToDispatch: integer(),
	damaged: integer(),
	qcReject: integer(),
	catalogReject: integer(),
	returnsReject: integer(),
	sellerReturnReject: integer(),
	miscellaneous: integer(),
	lengthCm: numeric({ precision: 8, scale:  6 }),
	breadthCm: numeric({ precision: 8, scale:  6 }),
	heightCm: numeric({ precision: 8, scale:  6 }),
	weightKg: numeric({ precision: 8, scale:  3 }),
	fulfilmentType: text(),
	fAssuredBadge: varchar({ length: 10 }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_inv_flipkart_jm_daily_report_date").using("btree", table.reportDate.asc().nullsLast().op("timestamp_ops")),
]);

export const scZeptoJmDaily = pgTable("SC_Zepto_JM_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_Zepto_JM_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	date: timestamp({ mode: 'string' }).notNull(),
	skuNumber: text("sku_number"),
	skuName: text("sku_name"),
	ean: text(),
	skuCategory: text("sku_category"),
	skuSubCategory: text("sku_sub_category"),
	brandName: text("brand_name"),
	manufacturerName: text("manufacturer_name"),
	manufacturerId: text("manufacturer_id"),
	city: text(),
	salesQtyUnits: integer("sales_qty_units"),
	mrp: numeric({ precision: 10, scale:  2 }),
	gmv: numeric({ precision: 10, scale:  2 }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const scZeptoJmRange = pgTable("SC_Zepto_JM_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_Zepto_JM_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	date: timestamp({ mode: 'string' }).notNull(),
	skuNumber: text("sku_number"),
	skuName: text("sku_name"),
	ean: text(),
	skuCategory: text("sku_category"),
	skuSubCategory: text("sku_sub_category"),
	brandName: text("brand_name"),
	manufacturerName: text("manufacturer_name"),
	manufacturerId: text("manufacturer_id"),
	city: text(),
	salesQtyUnits: integer("sales_qty_units"),
	mrp: numeric({ precision: 10, scale:  2 }),
	gmv: numeric({ precision: 10, scale:  2 }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const platformPoAttachments = pgTable("platform_po_attachments", {
	id: serial().primaryKey().notNull(),
	poId: integer("po_id").notNull(),
	fileName: text("file_name").notNull(),
	filePath: text("file_path").notNull(),
	fileType: text("file_type"),
	fileSize: integer("file_size"),
	uploadedBy: integer("uploaded_by"),
	uploadedAt: timestamp("uploaded_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	description: text(),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	updatedAt: timestamp("updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
}, (table) => [
	index("idx_platform_po_attachments_po_id").using("btree", table.poId.asc().nullsLast().op("int4_ops")),
	index("idx_platform_po_attachments_uploaded_by").using("btree", table.uploadedBy.asc().nullsLast().op("int4_ops")),
	foreignKey({
			columns: [table.poId],
			foreignColumns: [pfPo.id],
			name: "platform_po_attachments_po_id_fkey"
		}).onDelete("cascade"),
	foreignKey({
			columns: [table.uploadedBy],
			foreignColumns: [users.id],
			name: "platform_po_attachments_uploaded_by_fkey"
		}),
]);

export const cityMallPoLines = pgTable("city_mall_po_lines", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "city_mall_po_lines_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poHeaderId: integer("po_header_id"),
	lineNumber: integer("line_number").notNull(),
	articleId: varchar("article_id", { length: 50 }),
	articleName: text("article_name"),
	hsnCode: varchar("hsn_code", { length: 20 }),
	mrp: numeric({ precision: 10, scale:  2 }),
	baseCostPrice: numeric("base_cost_price", { precision: 10, scale:  2 }),
	quantity: integer().default(0),
	baseAmount: numeric("base_amount", { precision: 15, scale:  2 }),
	igstPercent: numeric("igst_percent", { precision: 5, scale:  2 }),
	cessPercent: numeric("cess_percent", { precision: 5, scale:  2 }),
	igstAmount: numeric("igst_amount", { precision: 10, scale:  2 }),
	cessAmount: numeric("cess_amount", { precision: 10, scale:  2 }),
	totalAmount: numeric("total_amount", { precision: 15, scale:  2 }),
	status: varchar({ length: 20 }).default('Pending'),
	createdBy: varchar("created_by", { length: 100 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	foreignKey({
			columns: [table.poHeaderId],
			foreignColumns: [cityMallPoHeader.id],
			name: "city_mall_po_lines_po_header_id_city_mall_po_header_id_fk"
		}).onDelete("cascade"),
]);

export const dealsharePoItems = pgTable("dealshare_po_items", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "dealshare_po_items_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poHeaderId: integer("po_header_id").notNull(),
	lineNumber: integer("line_number").notNull(),
	sku: varchar({ length: 100 }),
	productName: text("product_name"),
	hsnCode: varchar("hsn_code", { length: 20 }),
	quantity: integer(),
	mrpTaxInclusive: numeric("mrp_tax_inclusive", { precision: 10, scale:  2 }),
	buyingPrice: numeric("buying_price", { precision: 10, scale:  2 }),
	gstPercent: numeric("gst_percent", { precision: 5, scale:  2 }),
	cessPercent: numeric("cess_percent", { precision: 5, scale:  2 }),
	grossAmount: numeric("gross_amount", { precision: 12, scale:  2 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	foreignKey({
			columns: [table.poHeaderId],
			foreignColumns: [dealsharePoHeader.id],
			name: "dealshare_po_items_po_header_id_dealshare_po_header_id_fk"
		}).onDelete("cascade"),
]);

export const companies = pgTable("companies", {
	id: integer().primaryKey().generatedAlwaysAsIdentity({ name: "companies_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	name: varchar({ length: 256 }).notNull(),
}, (table) => [
	unique("companies_name_key").on(table.name),
]);

export const bigbasketPoHeader = pgTable("bigbasket_po_header", {
	id: serial().primaryKey().notNull(),
	poNumber: varchar("po_number", { length: 100 }).notNull(),
	poDate: timestamp("po_date", { mode: 'string' }),
	poExpiryDate: timestamp("po_expiry_date", { mode: 'string' }),
	warehouseAddress: text("warehouse_address"),
	deliveryAddress: text("delivery_address"),
	supplierName: varchar("supplier_name", { length: 255 }),
	supplierAddress: text("supplier_address"),
	supplierGstin: varchar("supplier_gstin", { length: 50 }),
	dcAddress: text("dc_address"),
	dcGstin: varchar("dc_gstin", { length: 50 }),
	totalItems: integer("total_items").default(0),
	totalQuantity: integer("total_quantity").default(0),
	totalBasicCost: numeric("total_basic_cost", { precision: 15, scale:  2 }),
	totalGstAmount: numeric("total_gst_amount", { precision: 15, scale:  2 }),
	totalCessAmount: numeric("total_cess_amount", { precision: 15, scale:  2 }),
	grandTotal: numeric("grand_total", { precision: 15, scale:  2 }),
	status: varchar({ length: 50 }).default('pending'),
	createdBy: varchar("created_by", { length: 100 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	unique("bigbasket_po_header_po_number_unique").on(table.poNumber),
]);

export const cityMallPoHeader = pgTable("city_mall_po_header", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "city_mall_po_header_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poNumber: varchar("po_number", { length: 50 }).notNull(),
	status: varchar({ length: 20 }).default('Open'),
	totalQuantity: integer("total_quantity").default(0),
	totalBaseAmount: numeric("total_base_amount", { precision: 15, scale:  2 }).default('0'),
	totalIgstAmount: numeric("total_igst_amount", { precision: 15, scale:  2 }).default('0'),
	totalCessAmount: numeric("total_cess_amount", { precision: 15, scale:  2 }).default('0'),
	totalAmount: numeric("total_amount", { precision: 15, scale:  2 }).default('0'),
	uniqueHsnCodes: text("unique_hsn_codes").array(),
	createdBy: varchar("created_by", { length: 100 }),
	uploadedBy: varchar("uploaded_by", { length: 100 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const dealsharePoHeader = pgTable("dealshare_po_header", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "dealshare_po_header_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poNumber: varchar("po_number", { length: 100 }).notNull(),
	poCreatedDate: timestamp("po_created_date", { mode: 'string' }),
	poDeliveryDate: timestamp("po_delivery_date", { mode: 'string' }),
	poExpiryDate: timestamp("po_expiry_date", { mode: 'string' }),
	shippedBy: text("shipped_by"),
	shippedByAddress: text("shipped_by_address"),
	shippedByGstin: varchar("shipped_by_gstin", { length: 20 }),
	shippedByPhone: varchar("shipped_by_phone", { length: 20 }),
	vendorCode: varchar("vendor_code", { length: 50 }),
	shippedTo: text("shipped_to"),
	shippedToAddress: text("shipped_to_address"),
	shippedToGstin: varchar("shipped_to_gstin", { length: 20 }),
	billTo: text("bill_to"),
	billToAddress: text("bill_to_address"),
	billToGstin: varchar("bill_to_gstin", { length: 20 }),
	comments: text(),
	totalItems: integer("total_items").default(0),
	totalQuantity: numeric("total_quantity", { precision: 15, scale:  2 }).default('0'),
	totalGrossAmount: numeric("total_gross_amount", { precision: 15, scale:  2 }).default('0'),
	uploadedBy: varchar("uploaded_by", { length: 100 }).default('admin'),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	unique("dealshare_po_header_po_number_unique").on(table.poNumber),
]);

export const distributors = pgTable("distributors", {
	id: serial().primaryKey().notNull(),
	name: varchar({ length: 256 }).notNull(),
}, (table) => [
	unique("distributors_name_key").on(table.name),
]);

export const fileUploadTracking = pgTable("file_upload_tracking", {
	id: serial().primaryKey().notNull(),
	fileHash: varchar("file_hash", { length: 64 }).notNull(),
	originalFilename: text("original_filename").notNull(),
	platform: varchar({ length: 50 }).notNull(),
	businessUnit: varchar("business_unit", { length: 50 }).notNull(),
	periodType: varchar("period_type", { length: 20 }).notNull(),
	uploadType: varchar("upload_type", { length: 50 }).notNull(),
	uploadedAt: timestamp("uploaded_at", { mode: 'string' }).defaultNow(),
	fileSize: integer("file_size"),
	uploaderInfo: text("uploader_info"),
});

export const pfMst = pgTable("pf_mst", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "pf_mst_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	pfName: varchar("pf_name", { length: 100 }).notNull(),
}, (table) => [
	unique("pf_mst_pf_name_unique").on(table.pfName),
]);

export const pfItemMst = pgTable("pf_item_mst", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "pf_item_mst_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	pfItemcode: varchar("pf_itemcode", { length: 100 }).notNull(),
	pfItemname: text("pf_itemname").notNull(),
	pfId: integer("pf_id").notNull(),
	sapId: char("sap_id", { length: 100 }).notNull(),
}, (table) => [
	index("idx_pf_item_mst_pf_id").using("btree", table.pfId.asc().nullsLast().op("int4_ops")),
	index("idx_pf_item_mst_sap_id").using("btree", table.sapId.asc().nullsLast().op("bpchar_ops")),
	foreignKey({
			columns: [table.pfId],
			foreignColumns: [pfMst.id],
			name: "pf_item_mst_pf_id_pf_mst_id_fk"
		}),
]);

export const items = pgTable("items", {
	itemcode: varchar({ length: 50 }).primaryKey().notNull(),
	itemname: varchar({ length: 200 }),
	itmsgrpnam: varchar({ length: 100 }),
	uType: varchar("u_type", { length: 50 }),
	uVariety: varchar("u_variety", { length: 100 }),
	uSubGroup: varchar("u_sub_group", { length: 100 }),
	uBrand: varchar("u_brand", { length: 100 }),
	invntryuom: varchar({ length: 50 }),
	salpackun: numeric({ precision: 18, scale:  6 }),
	uIslitre: char("u_islitre", { length: 1 }),
	uTaxRate: numeric("u_tax_rate", { precision: 10, scale:  2 }),
}, (table) => [
	index("idx_items_itemcode").using("btree", table.itemcode.asc().nullsLast().op("text_ops")),
]);

export const pfOrderItems = pgTable("pf_order_items", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "pf_order_items_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poId: integer("po_id").notNull(),
	itemName: text("item_name").notNull(),
	quantity: integer().notNull(),
	sapCode: varchar("sap_code", { length: 50 }),
	category: varchar({ length: 100 }),
	subcategory: varchar({ length: 100 }),
	basicRate: numeric("basic_rate", { precision: 10, scale:  2 }).notNull(),
	gstRate: numeric("gst_rate", { precision: 5, scale:  2 }).notNull(),
	landingRate: numeric("landing_rate", { precision: 10, scale:  2 }).notNull(),
	status: varchar({ length: 50 }).default('Pending'),
	totalLitres: numeric("total_litres", { precision: 10, scale:  3 }),
	hsnCode: varchar("hsn_code", { length: 20 }),
	invoiceDate: date("invoice_date"),
	invoiceLitre: numeric("invoice_litre", { precision: 14, scale:  2 }),
	invoiceAmount: numeric("invoice_amount", { precision: 14, scale:  2 }),
	invoiceQty: numeric("invoice_qty", { precision: 14, scale:  2 }),
}, (table) => [
	foreignKey({
			columns: [table.poId],
			foreignColumns: [pfPo.id],
			name: "pf_order_items_po_id_pf_po_id_fk"
		}).onDelete("cascade"),
]);

export const districts = pgTable("districts", {
	id: integer().default(sql`nextval('districts_id_seq'::regclass)`).primaryKey().notNull(),
	district: text().notNull(),
	stateId: integer("state_id").notNull(),
});

export const bigbasketPoHeaderLog = pgTable("bigbasket_po_header_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoNumber: varchar("original_po_number", { length: 100 }),
	originalPoDate: timestamp("original_po_date", { mode: 'string' }),
	originalPoExpiryDate: timestamp("original_po_expiry_date", { mode: 'string' }),
	originalWarehouseAddress: text("original_warehouse_address"),
	originalDeliveryAddress: text("original_delivery_address"),
	originalSupplierName: varchar("original_supplier_name", { length: 255 }),
	originalSupplierAddress: text("original_supplier_address"),
	originalSupplierGstin: varchar("original_supplier_gstin", { length: 50 }),
	originalDcAddress: text("original_dc_address"),
	originalDcGstin: varchar("original_dc_gstin", { length: 50 }),
	originalTotalItems: integer("original_total_items").default(0),
	originalTotalQuantity: integer("original_total_quantity").default(0),
	originalTotalBasicCost: numeric("original_total_basic_cost"),
	originalTotalGstAmount: numeric("original_total_gst_amount"),
	originalTotalCessAmount: numeric("original_total_cess_amount"),
	originalGrandTotal: numeric("original_grand_total"),
	originalStatus: varchar("original_status", { length: 50 }).default('pending'),
	originalCreatedBy: varchar("original_created_by", { length: 100 }),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_bigbasket_po_header_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_bigbasket_po_header_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_bigbasket_po_header_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_bigbasket_po_header_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const poMaster = pgTable("po_master", {
	id: serial().primaryKey().notNull(),
	platformId: integer("platform_id").notNull(),
	vendorPoNumber: varchar("vendor_po_number", { length: 256 }).notNull(),
	distributorId: integer("distributor_id").notNull(),
	series: varchar({ length: 250 }).notNull(),
	companyId: integer("company_id").notNull(),
	poDate: timestamp("po_date", { mode: 'string' }).notNull(),
	deliveryDate: timestamp("delivery_date", { mode: 'string' }),
	createOn: timestamp("create_on", { mode: 'string' }).defaultNow().notNull(),
	updatedOn: timestamp("updated_on", { mode: 'string' }).defaultNow().notNull(),
	statusId: integer("status_id").notNull(),
	dispatchDate: timestamp("dispatch_date", { mode: 'string' }),
	createdBy: varchar("created_by", { length: 150 }),
	dispatchFrom: varchar("dispatch_from", { length: 256 }),
	stateId: integer("state_id"),
	districtId: integer("district_id"),
	region: text(),
	area: text(),
	wareHouse: varchar("ware_house", { length: 50 }),
	invoiceDate: timestamp("invoice_date", { mode: 'string' }),
	appointmentDate: timestamp("appointment_date", { mode: 'string' }),
	expiryDate: timestamp("expiry_date", { mode: 'string' }),
}, (table) => [
	index("idx_po_master_create_on").using("btree", table.createOn.asc().nullsLast().op("timestamp_ops")),
	index("idx_po_master_platform_id").using("btree", table.platformId.asc().nullsLast().op("int4_ops")),
	index("idx_po_master_vendor_po_number").using("btree", table.vendorPoNumber.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.companyId],
			foreignColumns: [companies.id],
			name: "po_master_company_id_fkey"
		}),
	foreignKey({
			columns: [table.distributorId],
			foreignColumns: [distributors.id],
			name: "po_master_distributor_id_fkey"
		}),
	foreignKey({
			columns: [table.districtId],
			foreignColumns: [districts.id],
			name: "po_master_district_id_fkey"
		}).onDelete("set null"),
	foreignKey({
			columns: [table.platformId],
			foreignColumns: [platforms.id],
			name: "po_master_platform_id_fkey"
		}),
	foreignKey({
			columns: [table.platformId],
			foreignColumns: [pfMst.id],
			name: "po_master_platform_id_pf_mst_id_fk"
		}),
]);

export const distributorPo = pgTable("distributor_po", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "distributor_po_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poNumber: varchar("po_number", { length: 100 }).notNull(),
	distributorId: integer("distributor_id").notNull(),
	orderDate: timestamp("order_date", { mode: 'string' }).notNull(),
	expiryDate: timestamp("expiry_date", { mode: 'string' }),
	appointmentDate: timestamp("appointment_date", { mode: 'string' }),
	region: varchar({ length: 50 }),
	state: varchar({ length: 50 }),
	city: varchar({ length: 100 }),
	area: varchar({ length: 100 }),
	status: varchar({ length: 20 }).default('Open').notNull(),
	attachment: text(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
	servingDistributor: varchar("serving_distributor", { length: 200 }),
}, (table) => [
	index("idx_distributor_po_serving_distributor").using("btree", table.servingDistributor.asc().nullsLast().op("text_ops")),
	unique("distributor_po_po_number_unique").on(table.poNumber),
]);

export const blinkitPoHeader = pgTable("blinkit_po_header", {
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	id: bigint({ mode: "number" }).primaryKey().generatedAlwaysAsIdentity({ name: "blinkit_po_header_id_seq1", startWith: 1, increment: 1, minValue: 1, maxValue: 9223372036854775807, cache: 1 }),
	poNumber: varchar("po_number", { length: 50 }).notNull(),
	poDate: varchar("po_date", { length: 50 }),
	poType: varchar("po_type", { length: 50 }),
	currency: varchar({ length: 20 }),
	buyerName: varchar("buyer_name", { length: 255 }),
	buyerPan: varchar("buyer_pan", { length: 50 }),
	buyerCin: varchar("buyer_cin", { length: 50 }),
	buyerUnit: varchar("buyer_unit", { length: 255 }),
	buyerContactName: varchar("buyer_contact_name", { length: 100 }),
	buyerContactPhone: varchar("buyer_contact_phone", { length: 50 }),
	vendorNo: varchar("vendor_no", { length: 50 }),
	vendorName: varchar("vendor_name", { length: 255 }),
	vendorPan: varchar("vendor_pan", { length: 50 }),
	vendorGstNo: varchar("vendor_gst_no", { length: 50 }),
	vendorRegisteredAddress: text("vendor_registered_address"),
	vendorContactName: varchar("vendor_contact_name", { length: 100 }),
	vendorContactPhone: varchar("vendor_contact_phone", { length: 50 }),
	vendorContactEmail: varchar("vendor_contact_email", { length: 150 }),
	deliveredBy: varchar("delivered_by", { length: 255 }),
	deliveredToCompany: varchar("delivered_to_company", { length: 255 }),
	deliveredToAddress: text("delivered_to_address"),
	deliveredToGstNo: varchar("delivered_to_gst_no", { length: 50 }),
	spocName: varchar("spoc_name", { length: 100 }),
	spocPhone: varchar("spoc_phone", { length: 50 }),
	spocEmail: varchar("spoc_email", { length: 200 }),
	paymentTerms: varchar("payment_terms", { length: 100 }),
	poExpiryDate: varchar("po_expiry_date", { length: 100 }),
	poDeliveryDate: varchar("po_delivery_date", { length: 100 }),
	totalQuantity: numeric("total_quantity", { precision: 18, scale:  2 }),
	totalItems: integer("total_items"),
	totalWeight: varchar("total_weight", { length: 50 }),
	totalAmount: numeric("total_amount", { precision: 18, scale:  2 }),
	cartDiscount: numeric("cart_discount", { precision: 18, scale:  2 }),
	netAmount: numeric("net_amount", { precision: 18, scale:  2 }),
});

export const secondarySalesHeader = pgTable("secondary_sales_header", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "secondary_sales_header_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	platform: varchar({ length: 50 }).notNull(),
	businessUnit: varchar("business_unit", { length: 50 }).notNull(),
	periodStart: timestamp("period_start", { mode: 'string' }),
	periodEnd: timestamp("period_end", { mode: 'string' }),
	reportGeneratedDate: timestamp("report_generated_date", { mode: 'string' }),
	totalItems: integer("total_items").default(0),
	totalQuantity: numeric("total_quantity", { precision: 15, scale:  2 }).default('0'),
	totalSalesAmount: numeric("total_sales_amount", { precision: 15, scale:  2 }).default('0'),
	totalCommission: numeric("total_commission", { precision: 15, scale:  2 }).default('0'),
	currency: varchar({ length: 10 }).default('INR'),
	status: varchar({ length: 20 }).default('Active'),
	uploadedBy: varchar("uploaded_by", { length: 100 }).default('admin'),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_secondary_sales_header_business_unit").using("btree", table.businessUnit.asc().nullsLast().op("text_ops")),
	index("idx_secondary_sales_header_platform").using("btree", table.platform.asc().nullsLast().op("text_ops")),
]);

export const sapItemMst = pgTable("sap_item_mst", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "sap_item_mst_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	itemcode: varchar({ length: 50 }).notNull(),
	itemname: text().notNull(),
	type: varchar({ length: 50 }),
	itemgroup: varchar({ length: 100 }),
	variety: varchar({ length: 100 }),
	subgroup: varchar({ length: 100 }),
	brand: varchar({ length: 100 }),
	uom: varchar({ length: 20 }),
	taxrate: numeric({ precision: 5, scale:  2 }),
	unitsize: varchar({ length: 50 }),
	isLitre: boolean("is_litre").default(false),
	casePack: integer("case_pack"),
}, (table) => [
	index("idx_sap_item_mst_itemcode").using("btree", table.itemcode.asc().nullsLast().op("text_ops")),
	unique("sap_item_mst_itemcode_unique").on(table.itemcode),
]);

export const sapItemMstApi = pgTable("sap_item_mst_api", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "sap_item_mst_api_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	itemcode: varchar({ length: 50 }).notNull(),
	itemname: text().notNull(),
	type: varchar({ length: 50 }),
	itemgroup: varchar({ length: 100 }),
	variety: varchar({ length: 100 }),
	subgroup: varchar({ length: 100 }),
	brand: varchar({ length: 100 }),
	uom: varchar({ length: 20 }),
	taxrate: numeric({ precision: 5, scale:  2 }),
	unitsize: varchar({ length: 50 }),
	isLitre: boolean("is_litre").default(false),
	casePack: integer("case_pack"),
	lastSynced: timestamp("last_synced", { mode: 'string' }).defaultNow(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	unique("sap_item_mst_api_itemcode_unique").on(table.itemcode),
]);

export const platforms = pgTable("platforms", {
	id: serial().primaryKey().notNull(),
	name: varchar({ length: 256 }).notNull(),
}, (table) => [
	unique("platforms_name_key").on(table.name),
]);

export const statusItem = pgTable("status_item", {
	id: serial().primaryKey().notNull(),
	statusName: varchar("status_name", { length: 50 }).notNull(),
	description: text(),
	requiresInvoiceFields: boolean("requires_invoice_fields").default(false),
	requiresDispatchDate: boolean("requires_dispatch_date").default(false),
	requiresDeliveryDate: boolean("requires_delivery_date").default(false),
	isActive: boolean("is_active").default(true),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	unique("status_item_status_name_key").on(table.statusName),
]);

export const statuses = pgTable("statuses", {
	id: serial().primaryKey().notNull(),
	statusName: varchar("status_name", { length: 50 }).notNull(),
	description: text(),
	isActive: boolean("is_active").default(true),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	unique("statuses_status_name_key").on(table.statusName),
]);

export const pfPo = pgTable("pf_po", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "pf_po_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poNumber: varchar("po_number", { length: 100 }).notNull(),
	platform: integer().notNull(),
	servingDistributor: varchar("serving_distributor", { length: 200 }),
	orderDate: timestamp("order_date", { mode: 'string' }).notNull(),
	expiryDate: timestamp("expiry_date", { mode: 'string' }),
	appointmentDate: timestamp("appointment_date", { mode: 'string' }),
	region: varchar({ length: 50 }),
	state: varchar({ length: 50 }),
	city: varchar({ length: 100 }),
	area: varchar({ length: 100 }),
	status: varchar({ length: 20 }).default('Open').notNull(),
	attachment: text(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
	stateId: integer("state_id"),
	districtId: integer("district_id"),
}, (table) => [
	index("idx_pf_po_order_date").using("btree", table.orderDate.asc().nullsLast().op("timestamp_ops")),
	index("idx_pf_po_platform").using("btree", table.platform.asc().nullsLast().op("int4_ops")),
	index("idx_pf_po_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.districtId],
			foreignColumns: [districts.id],
			name: "pf_po_district_id_fkey"
		}),
	foreignKey({
			columns: [table.platform],
			foreignColumns: [pfMst.id],
			name: "pf_po_platform_pf_mst_id_fk"
		}),
	foreignKey({
			columns: [table.stateId],
			foreignColumns: [states.id],
			name: "pf_po_state_id_fkey"
		}),
	unique("pf_po_po_number_unique").on(table.poNumber),
]);

export const states = pgTable("states", {
	id: serial().primaryKey().notNull(),
	statename: text().notNull(),
	region: varchar({ length: 20 }),
	regionId: integer("region_id"),
}, (table) => [
	unique("states_statename_key").on(table.statename),
]);

export const secondarySalesItems = pgTable("secondary_sales_items", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "secondary_sales_items_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	headerId: integer("header_id").notNull(),
	lineNumber: integer("line_number").notNull(),
	productSku: varchar("product_sku", { length: 100 }),
	productName: text("product_name"),
	productAsin: varchar("product_asin", { length: 50 }),
	category: varchar({ length: 100 }),
	brand: varchar({ length: 100 }),
	quantitySold: integer("quantity_sold"),
	unitPrice: numeric("unit_price", { precision: 10, scale:  2 }),
	totalSales: numeric("total_sales", { precision: 12, scale:  2 }),
	commissionRate: numeric("commission_rate", { precision: 5, scale:  2 }),
	commissionAmount: numeric("commission_amount", { precision: 10, scale:  2 }),
	shippingFee: numeric("shipping_fee", { precision: 10, scale:  2 }),
	promotionDiscount: numeric("promotion_discount", { precision: 10, scale:  2 }),
	netAmount: numeric("net_amount", { precision: 12, scale:  2 }),
	transactionDate: timestamp("transaction_date", { mode: 'string' }),
	orderId: varchar("order_id", { length: 100 }),
	customerLocation: varchar("customer_location", { length: 100 }),
	fulfillmentMethod: varchar("fulfillment_method", { length: 50 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_secondary_sales_items_header_id").using("btree", table.headerId.asc().nullsLast().op("int4_ops")),
	foreignKey({
			columns: [table.headerId],
			foreignColumns: [secondarySalesHeader.id],
			name: "secondary_sales_items_header_id_secondary_sales_header_id_fk"
		}).onDelete("cascade"),
]);

export const zeptoPoLines = pgTable("zepto_po_lines", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "zepto_po_lines_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poHeaderId: integer("po_header_id"),
	lineNumber: integer("line_number").notNull(),
	poNumber: varchar("po_number", { length: 50 }),
	sku: text(),
	brand: varchar({ length: 100 }),
	skuId: varchar("sku_id", { length: 100 }),
	sapId: varchar("sap_id", { length: 50 }),
	hsnCode: varchar("hsn_code", { length: 20 }),
	eanNo: varchar("ean_no", { length: 50 }),
	poQty: integer("po_qty").default(0),
	asnQty: integer("asn_qty").default(0),
	grnQty: integer("grn_qty").default(0),
	remainingQty: integer("remaining_qty").default(0),
	costPrice: numeric("cost_price", { precision: 10, scale:  2 }),
	cgst: numeric({ precision: 10, scale:  2 }),
	sgst: numeric({ precision: 10, scale:  2 }),
	igst: numeric({ precision: 10, scale:  2 }),
	cess: numeric({ precision: 10, scale:  2 }),
	mrp: numeric({ precision: 10, scale:  2 }),
	totalValue: numeric("total_value", { precision: 15, scale:  2 }),
	status: varchar({ length: 20 }).default('Pending'),
	createdBy: varchar("created_by", { length: 100 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	foreignKey({
			columns: [table.poHeaderId],
			foreignColumns: [zeptoPoHeader.id],
			name: "zepto_po_lines_po_header_id_zepto_po_header_id_fk"
		}).onDelete("cascade"),
]);

export const poLines = pgTable("po_lines", {
	id: serial().primaryKey().notNull(),
	poId: integer("po_id").notNull(),
	platformProductCodeId: integer("platform_product_code_id").notNull(),
	quantity: numeric({ precision: 12, scale:  2 }).notNull(),
	basicAmount: numeric("basic_amount", { precision: 14, scale:  2 }).notNull(),
	tax: numeric({ precision: 14, scale:  2 }),
	landingAmount: numeric("landing_amount", { precision: 14, scale:  2 }),
	totalAmount: numeric("total_amount", { precision: 14, scale:  2 }).notNull(),
	uom: varchar({ length: 50 }),
	totalLiter: numeric("total_liter", { precision: 14, scale:  2 }),
	boxes: integer(),
	remark: text(),
	invoiceDate: date("invoice_date"),
	invoiceLitre: numeric("invoice_litre", { precision: 14, scale:  2 }),
	invoiceAmount: numeric("invoice_amount", { precision: 14, scale:  2 }),
	invoiceQty: numeric("invoice_qty", { precision: 14, scale:  2 }),
	dispatchDate: date("dispatch_date"),
	deliveryDate: date("delivery_date"),
	status: integer(),
	delete: boolean().default(false),
	deleted: boolean().default(false),
}, (table) => [
	index("idx_po_lines_po_id").using("btree", table.poId.asc().nullsLast().op("int4_ops")),
	index("idx_po_lines_product_code").using("btree", table.platformProductCodeId.asc().nullsLast().op("int4_ops")),
	foreignKey({
			columns: [table.poId],
			foreignColumns: [poMaster.id],
			name: "po_lines_po_id_fkey"
		}).onUpdate("cascade").onDelete("cascade"),
]);

export const zomatoPoItems = pgTable("zomato_po_items", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "zomato_po_items_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poHeaderId: integer("po_header_id").notNull(),
	lineNumber: integer("line_number").notNull(),
	productNumber: varchar("product_number", { length: 100 }),
	productName: text("product_name"),
	hsnCode: varchar("hsn_code", { length: 20 }),
	quantityOrdered: numeric("quantity_ordered", { precision: 15, scale:  2 }),
	pricePerUnit: numeric("price_per_unit", { precision: 15, scale:  2 }),
	uom: varchar({ length: 50 }),
	gstRate: numeric("gst_rate", { precision: 5, scale:  4 }),
	totalTaxAmount: numeric("total_tax_amount", { precision: 15, scale:  2 }),
	lineTotal: numeric("line_total", { precision: 15, scale:  2 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	foreignKey({
			columns: [table.poHeaderId],
			foreignColumns: [zomatoPoHeader.id],
			name: "zomato_po_items_po_header_id_zomato_po_header_id_fk"
		}).onDelete("cascade"),
]);

export const zeptoPoHeader = pgTable("zepto_po_header", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "zepto_po_header_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poNumber: varchar("po_number", { length: 50 }).notNull(),
	status: varchar({ length: 20 }).default('Open'),
	totalQuantity: integer("total_quantity").default(0),
	totalCostValue: numeric("total_cost_value", { precision: 15, scale:  2 }).default('0'),
	totalTaxAmount: numeric("total_tax_amount", { precision: 15, scale:  2 }).default('0'),
	totalAmount: numeric("total_amount", { precision: 15, scale:  2 }).default('0'),
	uniqueBrands: text("unique_brands").array(),
	createdBy: varchar("created_by", { length: 100 }),
	uploadedBy: varchar("uploaded_by", { length: 100 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_zepto_po_header_po_number").using("btree", table.poNumber.asc().nullsLast().op("text_ops")),
]);

export const zomatoPoHeader = pgTable("zomato_po_header", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "zomato_po_header_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poNumber: varchar("po_number", { length: 100 }).notNull(),
	poDate: timestamp("po_date", { mode: 'string' }),
	expectedDeliveryDate: timestamp("expected_delivery_date", { mode: 'string' }),
	accountNumber: varchar("account_number", { length: 50 }),
	vendorId: varchar("vendor_id", { length: 50 }),
	billFromName: text("bill_from_name"),
	billFromAddress: text("bill_from_address"),
	billFromGstin: varchar("bill_from_gstin", { length: 20 }),
	billFromPhone: varchar("bill_from_phone", { length: 20 }),
	billToName: text("bill_to_name"),
	billToAddress: text("bill_to_address"),
	billToGstin: varchar("bill_to_gstin", { length: 20 }),
	shipFromName: text("ship_from_name"),
	shipFromAddress: text("ship_from_address"),
	shipFromGstin: varchar("ship_from_gstin", { length: 20 }),
	shipToName: text("ship_to_name"),
	shipToAddress: text("ship_to_address"),
	shipToGstin: varchar("ship_to_gstin", { length: 20 }),
	totalItems: integer("total_items").default(0),
	totalQuantity: numeric("total_quantity", { precision: 15, scale:  2 }).default('0'),
	grandTotal: numeric("grand_total", { precision: 15, scale:  2 }).default('0'),
	totalTaxAmount: numeric("total_tax_amount", { precision: 15, scale:  2 }).default('0'),
	uploadedBy: varchar("uploaded_by", { length: 100 }).default('admin'),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	unique("zomato_po_header_po_number_unique").on(table.poNumber),
]);

export const distributorOrderItems = pgTable("distributor_order_items", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "distributor_order_items_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poId: integer("po_id").notNull(),
	itemName: text("item_name").notNull(),
	quantity: integer().notNull(),
	sapCode: varchar("sap_code", { length: 50 }),
	category: varchar({ length: 100 }),
	subcategory: varchar({ length: 100 }),
	basicRate: numeric("basic_rate", { precision: 10, scale:  2 }).notNull(),
	gstRate: numeric("gst_rate", { precision: 5, scale:  2 }).notNull(),
	landingRate: numeric("landing_rate", { precision: 10, scale:  2 }).notNull(),
	totalLitres: numeric("total_litres", { precision: 10, scale:  3 }),
	status: varchar({ length: 50 }).default('Pending'),
	hsnCode: varchar("hsn_code", { length: 20 }),
}, (table) => [
	foreignKey({
			columns: [table.poId],
			foreignColumns: [distributorPo.id],
			name: "distributor_order_items_po_id_distributor_po_id_fk"
		}).onDelete("cascade"),
]);

export const bigbasketPoLines = pgTable("bigbasket_po_lines", {
	id: serial().primaryKey().notNull(),
	poId: integer("po_id"),
	sNo: integer("s_no").notNull(),
	hsnCode: varchar("hsn_code", { length: 20 }),
	skuCode: varchar("sku_code", { length: 100 }).notNull(),
	description: text(),
	eanUpcCode: varchar("ean_upc_code", { length: 50 }),
	caseQuantity: integer("case_quantity"),
	quantity: integer().notNull(),
	basicCost: numeric("basic_cost", { precision: 10, scale:  2 }),
	sgstPercent: numeric("sgst_percent", { precision: 5, scale:  2 }),
	sgstAmount: numeric("sgst_amount", { precision: 10, scale:  2 }),
	cgstPercent: numeric("cgst_percent", { precision: 5, scale:  2 }),
	cgstAmount: numeric("cgst_amount", { precision: 10, scale:  2 }),
	igstPercent: numeric("igst_percent", { precision: 5, scale:  2 }),
	igstAmount: numeric("igst_amount", { precision: 10, scale:  2 }),
	gstPercent: numeric("gst_percent", { precision: 5, scale:  2 }),
	gstAmount: numeric("gst_amount", { precision: 10, scale:  2 }),
	cessPercent: numeric("cess_percent", { precision: 5, scale:  2 }),
	cessValue: numeric("cess_value", { precision: 10, scale:  2 }),
	stateCessPercent: numeric("state_cess_percent", { precision: 5, scale:  2 }),
	stateCess: numeric("state_cess", { precision: 10, scale:  2 }),
	landingCost: numeric("landing_cost", { precision: 10, scale:  2 }),
	mrp: numeric({ precision: 10, scale:  2 }),
	totalValue: numeric("total_value", { precision: 12, scale:  2 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	foreignKey({
			columns: [table.poId],
			foreignColumns: [bigbasketPoHeader.id],
			name: "bigbasket_po_lines_po_id_bigbasket_po_header_id_fk"
		}).onDelete("cascade"),
]);

export const statesMst = pgTable("states_mst", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "states_mst_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	stateName: varchar("state_name", { length: 100 }).notNull(),
	stateCode: varchar("state_code", { length: 10 }),
	region: varchar({ length: 50 }),
	status: varchar({ length: 20 }).default('Active').notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	unique("states_mst_state_name_key").on(table.stateName),
	unique("states_mst_state_code_key").on(table.stateCode),
]);

export const platformProductCodes = pgTable("platform_product_codes", {
	id: integer().primaryKey().generatedAlwaysAsIdentity({ name: "platform_product_codes_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	platformId: integer("platform_id").notNull(),
	sapCode: varchar("sap_code", { length: 100 }).notNull(),
	platformCode: varchar("platform_code", { length: 100 }).notNull(),
	itemName: varchar("item_name", { length: 256 }).notNull(),
	uom: varchar({ length: 50 }),
	variety: varchar({ length: 100 }),
	subGroup: varchar("sub_group", { length: 100 }),
	type: varchar({ length: 100 }),
	volumeIsLitre: boolean("volume_is_litre"),
	unitSize: integer("unit_size"),
	boxSize: integer("box_size"),
	brand: varchar({ length: 100 }),
	tax: numeric({ precision: 5, scale:  2 }).default('0.0'),
}, (table) => [
	index("idx_platform_product_codes_platform_id").using("btree", table.platformId.asc().nullsLast().op("int4_ops")),
	foreignKey({
			columns: [table.platformId],
			foreignColumns: [platforms.id],
			name: "platform_product_codes_platform_id_fkey"
		}).onDelete("cascade"),
	unique("platform_product_codes_platform_id_platform_code_key").on(table.platformId, table.platformCode),
]);

export const swiggyPos = pgTable("swiggy_pos", {
	id: serial().primaryKey().notNull(),
	poNumber: varchar("po_number", { length: 100 }).notNull(),
	poDate: timestamp("po_date", { mode: 'string' }),
	poReleaseDate: timestamp("po_release_date", { mode: 'string' }),
	expectedDeliveryDate: timestamp("expected_delivery_date", { mode: 'string' }),
	poExpiryDate: timestamp("po_expiry_date", { mode: 'string' }),
	vendorName: varchar("vendor_name", { length: 255 }),
	paymentTerms: varchar("payment_terms", { length: 100 }),
	totalItems: integer("total_items").default(0),
	totalQuantity: integer("total_quantity").default(0),
	totalTaxableValue: numeric("total_taxable_value", { precision: 15, scale:  2 }),
	totalTaxAmount: numeric("total_tax_amount", { precision: 15, scale:  2 }),
	grandTotal: numeric("grand_total", { precision: 15, scale:  2 }),
	uniqueHsnCodes: varchar("unique_hsn_codes").array(),
	status: varchar({ length: 50 }).default('pending'),
	createdBy: varchar("created_by", { length: 100 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	unique("swiggy_pos_po_number_unique").on(table.poNumber),
]);

export const platformMst = pgTable("platform_mst", {
	id: serial().primaryKey().notNull(),
	platformName: varchar("platform_name", { length: 100 }).notNull(),
	platformType: varchar("platform_type", { length: 50 }),
	status: varchar({ length: 20 }).default('active'),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
}, (table) => [
	unique("platform_mst_platform_name_key").on(table.platformName),
]);

export const blinkitPoLines = pgTable("blinkit_po_lines", {
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	id: bigint({ mode: "number" }).primaryKey().generatedAlwaysAsIdentity({ name: "blinkit_po_lines_id_seq1", startWith: 1, increment: 1, minValue: 1, maxValue: 9223372036854775807, cache: 1 }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	headerId: bigint("header_id", { mode: "number" }).notNull(),
	itemCode: varchar("item_code", { length: 50 }),
	hsnCode: varchar("hsn_code", { length: 50 }),
	productUpc: varchar("product_upc", { length: 50 }),
	productDescription: text("product_description"),
	basicCostPrice: numeric("basic_cost_price", { precision: 18, scale:  2 }),
	igstPercent: numeric("igst_percent", { precision: 5, scale:  2 }),
	cessPercent: numeric("cess_percent", { precision: 5, scale:  2 }),
	addtCess: numeric("addt_cess", { precision: 5, scale:  2 }),
	taxAmount: numeric("tax_amount", { precision: 18, scale:  2 }),
	landingRate: numeric("landing_rate", { precision: 18, scale:  2 }),
	quantity: integer(),
	mrp: numeric({ precision: 18, scale:  2 }),
	marginPercent: numeric("margin_percent", { precision: 5, scale:  2 }),
	totalAmount: numeric("total_amount", { precision: 18, scale:  2 }),
}, (table) => [
	foreignKey({
			columns: [table.headerId],
			foreignColumns: [blinkitPoHeader.id],
			name: "blinkit_po_lines_header_id_fkey"
		}),
]);

export const swiggyPoLines = pgTable("swiggy_po_lines", {
	id: serial().primaryKey().notNull(),
	poId: integer("po_id"),
	lineNumber: integer("line_number").notNull(),
	itemCode: varchar("item_code", { length: 100 }).notNull(),
	itemDescription: text("item_description"),
	hsnCode: varchar("hsn_code", { length: 20 }),
	quantity: integer().notNull(),
	mrp: numeric({ precision: 10, scale:  2 }),
	unitBaseCost: numeric("unit_base_cost", { precision: 10, scale:  3 }),
	taxableValue: numeric("taxable_value", { precision: 12, scale:  5 }),
	cgstRate: numeric("cgst_rate", { precision: 5, scale:  2 }),
	cgstAmount: numeric("cgst_amount", { precision: 10, scale:  5 }),
	sgstRate: numeric("sgst_rate", { precision: 5, scale:  2 }),
	sgstAmount: numeric("sgst_amount", { precision: 10, scale:  5 }),
	igstRate: numeric("igst_rate", { precision: 5, scale:  2 }),
	igstAmount: numeric("igst_amount", { precision: 10, scale:  5 }),
	cessRate: numeric("cess_rate", { precision: 5, scale:  2 }),
	cessAmount: numeric("cess_amount", { precision: 10, scale:  5 }),
	additionalCess: numeric("additional_cess", { precision: 10, scale:  5 }),
	totalTaxAmount: numeric("total_tax_amount", { precision: 10, scale:  5 }),
	lineTotal: numeric("line_total", { precision: 12, scale:  5 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	foreignKey({
			columns: [table.poId],
			foreignColumns: [swiggyPos.id],
			name: "swiggy_po_lines_po_id_swiggy_pos_id_fk"
		}).onDelete("cascade"),
]);

export const cityMallPoHeaderLog = pgTable("city_mall_po_header_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoNumber: varchar("original_po_number", { length: 50 }),
	originalStatus: varchar("original_status", { length: 20 }).default('Open'),
	originalTotalQuantity: integer("original_total_quantity").default(0),
	originalTotalBaseAmount: numeric("original_total_base_amount").default('0'),
	originalTotalIgstAmount: numeric("original_total_igst_amount").default('0'),
	originalTotalCessAmount: numeric("original_total_cess_amount").default('0'),
	originalTotalAmount: numeric("original_total_amount").default('0'),
	originalUniqueHsnCodes: text("original_unique_hsn_codes").array(),
	originalCreatedBy: varchar("original_created_by", { length: 100 }),
	originalUploadedBy: varchar("original_uploaded_by", { length: 100 }),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_city_mall_po_header_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_city_mall_po_header_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_city_mall_po_header_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_city_mall_po_header_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const cityMallPoLinesLog = pgTable("city_mall_po_lines_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoHeaderId: integer("original_po_header_id"),
	originalLineNumber: integer("original_line_number"),
	originalArticleId: varchar("original_article_id", { length: 50 }),
	originalArticleName: text("original_article_name"),
	originalHsnCode: varchar("original_hsn_code", { length: 20 }),
	originalMrp: numeric("original_mrp"),
	originalBaseCostPrice: numeric("original_base_cost_price"),
	originalQuantity: integer("original_quantity").default(0),
	originalBaseAmount: numeric("original_base_amount"),
	originalIgstPercent: numeric("original_igst_percent"),
	originalCessPercent: numeric("original_cess_percent"),
	originalIgstAmount: numeric("original_igst_amount"),
	originalCessAmount: numeric("original_cess_amount"),
	originalTotalAmount: numeric("original_total_amount"),
	originalStatus: varchar("original_status", { length: 20 }).default('Pending'),
	originalCreatedBy: varchar("original_created_by", { length: 100 }),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_city_mall_po_lines_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_city_mall_po_lines_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_city_mall_po_lines_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_city_mall_po_lines_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const dealsharePoHeaderLog = pgTable("dealshare_po_header_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoNumber: varchar("original_po_number", { length: 100 }),
	originalPoCreatedDate: timestamp("original_po_created_date", { mode: 'string' }),
	originalPoDeliveryDate: timestamp("original_po_delivery_date", { mode: 'string' }),
	originalPoExpiryDate: timestamp("original_po_expiry_date", { mode: 'string' }),
	originalShippedBy: text("original_shipped_by"),
	originalShippedByAddress: text("original_shipped_by_address"),
	originalShippedByGstin: varchar("original_shipped_by_gstin", { length: 20 }),
	originalShippedByPhone: varchar("original_shipped_by_phone", { length: 20 }),
	originalVendorCode: varchar("original_vendor_code", { length: 50 }),
	originalShippedTo: text("original_shipped_to"),
	originalShippedToAddress: text("original_shipped_to_address"),
	originalShippedToGstin: varchar("original_shipped_to_gstin", { length: 20 }),
	originalBillTo: text("original_bill_to"),
	originalBillToAddress: text("original_bill_to_address"),
	originalBillToGstin: varchar("original_bill_to_gstin", { length: 20 }),
	originalComments: text("original_comments"),
	originalTotalItems: integer("original_total_items").default(0),
	originalTotalQuantity: numeric("original_total_quantity").default('0'),
	originalTotalGrossAmount: numeric("original_total_gross_amount").default('0'),
	originalUploadedBy: varchar("original_uploaded_by", { length: 100 }).default('admin'),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_dealshare_po_header_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_dealshare_po_header_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_dealshare_po_header_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_dealshare_po_header_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const dealsharePoItemsLog = pgTable("dealshare_po_items_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoHeaderId: integer("original_po_header_id"),
	originalLineNumber: integer("original_line_number"),
	originalSku: varchar("original_sku", { length: 100 }),
	originalProductName: text("original_product_name"),
	originalHsnCode: varchar("original_hsn_code", { length: 20 }),
	originalQuantity: integer("original_quantity"),
	originalMrpTaxInclusive: numeric("original_mrp_tax_inclusive"),
	originalBuyingPrice: numeric("original_buying_price"),
	originalGstPercent: numeric("original_gst_percent"),
	originalCessPercent: numeric("original_cess_percent"),
	originalGrossAmount: numeric("original_gross_amount"),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_dealshare_po_items_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_dealshare_po_items_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_dealshare_po_items_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_dealshare_po_items_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const flipkartGroceryPoHeaderLog = pgTable("flipkart_grocery_po_header_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoNumber: varchar("original_po_number", { length: 50 }),
	originalSupplierName: text("original_supplier_name"),
	originalSupplierAddress: text("original_supplier_address"),
	originalSupplierContact: varchar("original_supplier_contact", { length: 20 }),
	originalSupplierEmail: varchar("original_supplier_email", { length: 100 }),
	originalSupplierGstin: varchar("original_supplier_gstin", { length: 20 }),
	originalBilledToAddress: text("original_billed_to_address"),
	originalBilledToGstin: varchar("original_billed_to_gstin", { length: 20 }),
	originalShippedToAddress: text("original_shipped_to_address"),
	originalShippedToGstin: varchar("original_shipped_to_gstin", { length: 20 }),
	originalNatureOfSupply: varchar("original_nature_of_supply", { length: 50 }),
	originalNatureOfTransaction: varchar("original_nature_of_transaction", { length: 50 }),
	originalPoExpiryDate: timestamp("original_po_expiry_date", { mode: 'string' }),
	originalCategory: varchar("original_category", { length: 100 }),
	originalOrderDate: timestamp("original_order_date", { mode: 'string' }),
	originalModeOfPayment: varchar("original_mode_of_payment", { length: 50 }),
	originalContractRefId: varchar("original_contract_ref_id", { length: 100 }),
	originalContractVersion: varchar("original_contract_version", { length: 10 }),
	originalCreditTerm: varchar("original_credit_term", { length: 100 }),
	originalTotalQuantity: integer("original_total_quantity"),
	originalTotalTaxableValue: numeric("original_total_taxable_value"),
	originalTotalTaxAmount: numeric("original_total_tax_amount"),
	originalTotalAmount: numeric("original_total_amount"),
	originalStatus: varchar("original_status", { length: 20 }).default('Open'),
	originalCreatedBy: varchar("original_created_by", { length: 100 }),
	originalUploadedBy: varchar("original_uploaded_by", { length: 100 }),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
	originalDistributor: varchar("original_distributor", { length: 200 }),
	originalArea: varchar("original_area", { length: 100 }),
	originalCity: varchar("original_city", { length: 100 }),
	originalRegion: varchar("original_region", { length: 100 }),
	originalState: varchar("original_state", { length: 100 }),
	originalDispatchFrom: varchar("original_dispatch_from", { length: 100 }),
}, (table) => [
	index("idx_flipkart_grocery_po_header_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_flipkart_grocery_po_header_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_flipkart_grocery_po_header_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_flipkart_grocery_po_header_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const flipkartGroceryPoLinesLog = pgTable("flipkart_grocery_po_lines_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalHeaderId: integer("original_header_id"),
	originalLineNumber: integer("original_line_number"),
	originalHsnCode: varchar("original_hsn_code", { length: 20 }),
	originalFsnIsbn: varchar("original_fsn_isbn", { length: 50 }),
	originalQuantity: integer("original_quantity"),
	originalPendingQuantity: integer("original_pending_quantity"),
	originalUom: varchar("original_uom", { length: 20 }),
	originalTitle: text("original_title"),
	originalBrand: varchar("original_brand", { length: 100 }),
	originalType: varchar("original_type", { length: 100 }),
	originalEan: varchar("original_ean", { length: 20 }),
	originalVertical: varchar("original_vertical", { length: 100 }),
	originalRequiredByDate: timestamp("original_required_by_date", { mode: 'string' }),
	originalSupplierMrp: numeric("original_supplier_mrp"),
	originalSupplierPrice: numeric("original_supplier_price"),
	originalTaxableValue: numeric("original_taxable_value"),
	originalIgstRate: numeric("original_igst_rate"),
	originalIgstAmountPerUnit: numeric("original_igst_amount_per_unit"),
	originalSgstRate: numeric("original_sgst_rate"),
	originalSgstAmountPerUnit: numeric("original_sgst_amount_per_unit"),
	originalCgstRate: numeric("original_cgst_rate"),
	originalCgstAmountPerUnit: numeric("original_cgst_amount_per_unit"),
	originalCessRate: numeric("original_cess_rate"),
	originalCessAmountPerUnit: numeric("original_cess_amount_per_unit"),
	originalTaxAmount: numeric("original_tax_amount"),
	originalTotalAmount: numeric("original_total_amount"),
	originalStatus: varchar("original_status", { length: 50 }).default('Pending'),
	originalCreatedBy: varchar("original_created_by", { length: 100 }),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_flipkart_grocery_po_lines_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_flipkart_grocery_po_lines_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_flipkart_grocery_po_lines_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_flipkart_grocery_po_lines_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const invBigBasketJmRange = pgTable("INV_BigBasket_JM_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""INV_BigBasket_JM_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	city: text(),
	skuId: text("sku_id"),
	brandName: text("brand_name"),
	skuName: text("sku_name"),
	skuWeight: text("sku_weight"),
	skuPackType: text("sku_pack_type"),
	skuDescription: text("sku_description"),
	topCategoryName: text("top_category_name"),
	midCategoryName: text("mid_category_name"),
	leafCategoryName: text("leaf_category_name"),
	soh: numeric({ precision: 10, scale:  2 }),
	sohValue: numeric("soh_value", { precision: 10, scale:  2 }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const masterUnifiedData = pgTable("master_unified_data", {
	id: bigserial({ mode: "bigint" }).primaryKey().notNull(),
	platform: varchar({ length: 50 }).notNull(),
	platformId: integer("platform_id"),
	businessUnit: varchar("business_unit", { length: 50 }),
	dataCategory: varchar("data_category", { length: 30 }).notNull(),
	reportType: varchar("report_type", { length: 20 }),
	sourceTable: varchar("source_table", { length: 100 }).notNull(),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	sourceId: bigint("source_id", { mode: "number" }),
	distributorId: integer("distributor_id"),
	series: varchar({ length: 250 }),
	companyId: integer("company_id"),
	statusId: integer("status_id"),
	stateId: integer("state_id"),
	districtId: integer("district_id"),
	platformProductCodeId: integer("platform_product_code_id"),
	reportDate: date("report_date"),
	periodStart: date("period_start"),
	periodEnd: date("period_end"),
	dateField: timestamp("date_field", { mode: 'string' }),
	orderedDate: timestamp("ordered_date", { mode: 'string' }),
	saleDate: timestamp("sale_date", { mode: 'string' }),
	shipmentCreatedAt: timestamp("shipment_created_at", { mode: 'string' }),
	acceptedAt: timestamp("accepted_at", { mode: 'string' }),
	acceptanceTatDateTime: timestamp("acceptance_tat_date_time", { mode: 'string' }),
	poDate: timestamp("po_date", { mode: 'string' }),
	poCreatedDate: timestamp("po_created_date", { mode: 'string' }),
	poDeliveryDate: timestamp("po_delivery_date", { mode: 'string' }),
	poExpiryDate: timestamp("po_expiry_date", { mode: 'string' }),
	poReleaseDate: timestamp("po_release_date", { mode: 'string' }),
	expectedDeliveryDate: timestamp("expected_delivery_date", { mode: 'string' }),
	requiredByDate: timestamp("required_by_date", { mode: 'string' }),
	invoiceDate: date("invoice_date"),
	dispatchDate: date("dispatch_date"),
	deliveryDate: date("delivery_date"),
	appointmentDate: timestamp("appointment_date", { mode: 'string' }),
	expiryDate: timestamp("expiry_date", { mode: 'string' }),
	lastUpdatedAt: timestamp("last_updated_at", { mode: 'string' }),
	lastCalculatedAt: text("last_calculated_at"),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	updatedAt: timestamp("updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	sku: varchar({ length: 255 }),
	skuCode: varchar("sku_code", { length: 255 }),
	skuId: varchar("sku_id", { length: 255 }),
	productId: varchar("product_id", { length: 255 }),
	asin: varchar({ length: 100 }),
	fnsku: varchar({ length: 100 }),
	fsn: varchar({ length: 100 }),
	listingId: varchar("listing_id", { length: 100 }),
	itemId: varchar("item_id", { length: 255 }),
	itemCode: varchar("item_code", { length: 255 }),
	ean: varchar({ length: 100 }),
	eanUpcCode: varchar("ean_upc_code", { length: 50 }),
	upc: varchar({ length: 50 }),
	productUpc: varchar("product_upc", { length: 50 }),
	productNumber: varchar("product_number", { length: 100 }),
	styleCode: varchar("style_code", { length: 100 }),
	isbn: varchar({ length: 100 }),
	modelId: varchar("model_id", { length: 100 }),
	hsnCode: varchar("hsn_code", { length: 20 }),
	sapCode: varchar("sap_code", { length: 100 }),
	sapId: varchar("sap_id", { length: 50 }),
	articleId: varchar("article_id", { length: 50 }),
	productName: text("product_name"),
	productTitle: text("product_title"),
	title: text(),
	itemName: text("item_name"),
	skuName: text("sku_name"),
	skuDescription: text("sku_description"),
	productDescription: text("product_description"),
	itemDescription: text("item_description"),
	description: text(),
	variant: text(),
	combo: text(),
	comboItemCode: text("combo_item_code"),
	category: varchar({ length: 255 }),
	subcategory: varchar({ length: 255 }),
	skuCategory: varchar("sku_category", { length: 255 }),
	skuSubCategory: varchar("sku_sub_category", { length: 255 }),
	topCategoryName: varchar("top_category_name", { length: 255 }),
	midCategoryName: varchar("mid_category_name", { length: 255 }),
	leafCategoryName: varchar("leaf_category_name", { length: 255 }),
	topSlug: varchar("top_slug", { length: 255 }),
	midSlug: varchar("mid_slug", { length: 255 }),
	leafSlug: varchar("leaf_slug", { length: 255 }),
	l1Category: varchar("l1_category", { length: 255 }),
	l2Category: varchar("l2_category", { length: 255 }),
	l3Category: varchar("l3_category", { length: 255 }),
	vertical: varchar({ length: 255 }),
	businessCategory: varchar("business_category", { length: 255 }),
	brand: varchar({ length: 255 }),
	brandName: varchar("brand_name", { length: 255 }),
	manufacturerName: varchar("manufacturer_name", { length: 255 }),
	manufacturerId: varchar("manufacturer_id", { length: 255 }),
	publisher: varchar({ length: 255 }),
	size: varchar({ length: 100 }),
	unit: varchar({ length: 50 }),
	uom: varchar({ length: 50 }),
	weightInfo: varchar("weight_info", { length: 100 }),
	skuWeight: varchar("sku_weight", { length: 100 }),
	weightKg: numeric("weight_kg", { precision: 8, scale:  3 }),
	grammage: varchar({ length: 50 }),
	skuPackType: varchar("sku_pack_type", { length: 100 }),
	caseQuantity: integer("case_quantity"),
	casePack: integer("case_pack"),
	unitSize: integer("unit_size"),
	boxSize: integer("box_size"),
	lengthCm: numeric("length_cm", { precision: 8, scale:  6 }),
	breadthCm: numeric("breadth_cm", { precision: 8, scale:  6 }),
	heightCm: numeric("height_cm", { precision: 8, scale:  6 }),
	shelfLifeDays: integer("shelf_life_days"),
	city: varchar({ length: 100 }),
	cityId: varchar("city_id", { length: 100 }),
	cityName: varchar("city_name", { length: 100 }),
	sourceCityName: varchar("source_city_name", { length: 100 }),
	state: varchar({ length: 100 }),
	region: varchar({ length: 100 }),
	area: varchar({ length: 100 }),
	areaName: varchar("area_name", { length: 255 }),
	warehouseLocation: text("warehouse_location"),
	wareHouse: varchar("ware_house", { length: 50 }),
	warehouseId: varchar("warehouse_id", { length: 100 }),
	facilityName: varchar("facility_name", { length: 255 }),
	storeId: varchar("store_id", { length: 100 }),
	storageType: varchar("storage_type", { length: 100 }),
	unitsAvailable: integer("units_available"),
	stockOnHand: integer("stock_on_hand"),
	availableQuantity: integer("available_quantity"),
	reservedQuantity: integer("reserved_quantity"),
	inboundQuantity: integer("inbound_quantity"),
	outboundQuantity: integer("outbound_quantity"),
	researchingQuantity: integer("researching_quantity"),
	damagedQuantity: integer("damaged_quantity"),
	expiredQuantity: integer("expired_quantity"),
	unfulfillableQuantity: integer("unfulfillable_quantity"),
	soh: numeric({ precision: 10, scale:  2 }),
	units: integer(),
	quantity: integer(),
	totalSellableInv: integer("total_sellable_inv"),
	totalUnsellableInv: integer("total_unsellable_inv"),
	fcDmgInv: integer("fc_dmg_inv"),
	lspDmgInv: integer("lsp_dmg_inv"),
	custDmgInv: integer("cust_dmg_inv"),
	recvdDmg: integer("recvd_dmg"),
	expiredInv: integer("expired_inv"),
	otherUnsellableInv: integer("other_unsellable_inv"),
	warehouseQtyAvailable: integer("warehouse_qty_available"),
	quantitySold: numeric("quantity_sold", { precision: 15, scale:  3 }).default('0'),
	qtySold: numeric("qty_sold", { precision: 10, scale:  2 }),
	salesQtyUnits: integer("sales_qty_units"),
	unitsSold: numeric("units_sold", { precision: 10, scale:  2 }),
	comboUnitsSold: numeric("combo_units_sold", { precision: 10, scale:  2 }),
	orderedUnits: integer("ordered_units"),
	shippedUnits: integer("shipped_units"),
	customerReturns: integer("customer_returns"),
	qty: integer(),
	saleQuantity: integer("sale_quantity"),
	totalQuantity: numeric("total_quantity", { precision: 15, scale:  2 }),
	pendingQuantity: integer("pending_quantity"),
	sales7D: integer("sales_7d"),
	sales14D: integer("sales_14d"),
	sales30D: integer("sales_30d"),
	sales60D: integer("sales_60d"),
	sales90D: integer("sales_90d"),
	liveOnWebsite: integer("live_on_website"),
	b2BScheduled: integer("b2b_scheduled"),
	transfersScheduled: integer("transfers_scheduled"),
	b2BShipped: integer("b2b_shipped"),
	transfersShipped: integer("transfers_shipped"),
	b2BReceiving: integer("b2b_receiving"),
	transfersReceiving: integer("transfers_receiving"),
	reservedForOrdersAndRecalls: integer("reserved_for_orders_and_recalls"),
	reservedForInternalProcessing: integer("reserved_for_internal_processing"),
	returnsProcessing: integer("returns_processing"),
	ordersToDispatch: integer("orders_to_dispatch"),
	recallsToDispatch: integer("recalls_to_dispatch"),
	damaged: integer(),
	qcReject: integer("qc_reject"),
	catalogReject: integer("catalog_reject"),
	returnsReject: integer("returns_reject"),
	sellerReturnReject: integer("seller_return_reject"),
	miscellaneous: integer(),
	mtdFwdIntransit: integer("mtd_fwd_intransit"),
	mtdDelvdCust: integer("mtd_delvd_cust"),
	mtdRetIntransit: integer("mtd_ret_intransit"),
	mtdOrderCount: integer("mtd_order_count"),
	rfcId: varchar("rfc_id", { length: 255 }),
	rfcName: varchar("rfc_name", { length: 255 }),
	daysOnHand: integer("days_on_hand"),
	potentialGmvLoss: numeric("potential_gmv_loss", { precision: 10, scale:  2 }),
	openPos: text("open_pos"),
	openPoQuantity: integer("open_po_quantity"),
	mrp: numeric({ precision: 15, scale:  2 }),
	supplierMrp: numeric("supplier_mrp", { precision: 10, scale:  2 }),
	baseMrp: numeric("base_mrp", { precision: 10, scale:  2 }),
	flipkartSellingPrice: numeric("flipkart_selling_price", { precision: 10, scale:  2 }),
	sellingPrice: numeric("selling_price", { precision: 15, scale:  2 }),
	unitPrice: numeric("unit_price", { precision: 10, scale:  2 }),
	pricePerUnit: numeric("price_per_unit", { precision: 15, scale:  2 }),
	costPerUnit: numeric("cost_per_unit", { precision: 15, scale:  4 }),
	unitBaseCost: numeric("unit_base_cost", { precision: 15, scale:  4 }),
	basicCost: numeric("basic_cost", { precision: 10, scale:  2 }),
	basicCostPrice: numeric("basic_cost_price", { precision: 10, scale:  2 }),
	baseCostPrice: numeric("base_cost_price", { precision: 10, scale:  2 }),
	supplierPrice: numeric("supplier_price", { precision: 10, scale:  2 }),
	costPrice: numeric("cost_price", { precision: 10, scale:  2 }),
	buyingPrice: numeric("buying_price", { precision: 10, scale:  2 }),
	basicRate: numeric("basic_rate", { precision: 10, scale:  2 }),
	landingRate: numeric("landing_rate", { precision: 10, scale:  2 }),
	landingCost: numeric("landing_cost", { precision: 10, scale:  2 }),
	totalValue: numeric("total_value", { precision: 15, scale:  2 }),
	sohValue: numeric("soh_value", { precision: 10, scale:  2 }),
	totalSales: numeric("total_sales", { precision: 15, scale:  2 }),
	gmv: numeric({ precision: 15, scale:  2 }),
	revenue: numeric({ precision: 15, scale:  2 }),
	orderedRevenue: numeric("ordered_revenue", { precision: 15, scale:  2 }),
	shippedRevenue: numeric("shipped_revenue", { precision: 15, scale:  2 }),
	cogs: numeric({ precision: 15, scale:  2 }),
	shippedCogs: numeric("shipped_cogs", { precision: 15, scale:  2 }),
	totalMrp: numeric("total_mrp", { precision: 10, scale:  2 }),
	itemTotal: numeric("item_total", { precision: 10, scale:  2 }),
	invoiceAmount: numeric("invoice_amount", { precision: 10, scale:  2 }),
	amount: numeric({ precision: 10, scale:  2 }),
	promotionAmt: numeric("promotion_amt", { precision: 10, scale:  2 }),
	promotionDiscount: numeric("promotion_discount", { precision: 15, scale:  2 }),
	shippingCharge: numeric("shipping_charge", { precision: 10, scale:  2 }),
	shippingFee: numeric("shipping_fee", { precision: 10, scale:  2 }),
	netAmount: numeric("net_amount", { precision: 15, scale:  2 }),
	commissionRate: numeric("commission_rate", { precision: 5, scale:  2 }),
	commissionAmount: numeric("commission_amount", { precision: 10, scale:  2 }),
	marginPercent: numeric("margin_percent", { precision: 5, scale:  2 }),
	gstRate: numeric("gst_rate", { precision: 5, scale:  2 }),
	gstPercent: numeric("gst_percent", { precision: 5, scale:  2 }),
	gstAmount: numeric("gst_amount", { precision: 10, scale:  2 }),
	cgstPercent: numeric("cgst_percent", { precision: 5, scale:  2 }),
	cgstRate: numeric("cgst_rate", { precision: 5, scale:  2 }),
	cgstAmount: numeric("cgst_amount", { precision: 15, scale:  2 }),
	cgstAmountPerUnit: numeric("cgst_amount_per_unit", { precision: 10, scale:  2 }),
	sgstPercent: numeric("sgst_percent", { precision: 5, scale:  2 }),
	sgstRate: numeric("sgst_rate", { precision: 5, scale:  2 }),
	sgstAmount: numeric("sgst_amount", { precision: 15, scale:  2 }),
	sgstAmountPerUnit: numeric("sgst_amount_per_unit", { precision: 10, scale:  2 }),
	igstPercent: numeric("igst_percent", { precision: 5, scale:  2 }),
	igstRate: numeric("igst_rate", { precision: 5, scale:  2 }),
	igstAmount: numeric("igst_amount", { precision: 15, scale:  2 }),
	igstAmountPerUnit: numeric("igst_amount_per_unit", { precision: 10, scale:  2 }),
	cessPercent: numeric("cess_percent", { precision: 5, scale:  2 }),
	cessRate: numeric("cess_rate", { precision: 5, scale:  2 }),
	cessAmount: numeric("cess_amount", { precision: 15, scale:  2 }),
	cessValue: numeric("cess_value", { precision: 10, scale:  2 }),
	cessAmountPerUnit: numeric("cess_amount_per_unit", { precision: 10, scale:  2 }),
	additionalCess: numeric("additional_cess", { precision: 10, scale:  2 }),
	stateCessPercent: numeric("state_cess_percent", { precision: 5, scale:  2 }),
	stateCess: numeric("state_cess", { precision: 10, scale:  2 }),
	taxAmount: numeric("tax_amount", { precision: 15, scale:  2 }),
	totalTaxAmount: numeric("total_tax_amount", { precision: 15, scale:  2 }),
	taxRate: numeric("tax_rate", { precision: 10, scale:  2 }),
	taxableValue: numeric("taxable_value", { precision: 15, scale:  2 }),
	totalItems: integer("total_items").default(0),
	totalBasicCost: numeric("total_basic_cost", { precision: 15, scale:  2 }),
	totalGstAmount: numeric("total_gst_amount", { precision: 15, scale:  2 }),
	totalCessAmount: numeric("total_cess_amount", { precision: 15, scale:  2 }),
	grandTotal: numeric("grand_total", { precision: 15, scale:  2 }),
	totalAmount: numeric("total_amount", { precision: 15, scale:  2 }),
	lineTotal: numeric("line_total", { precision: 15, scale:  2 }),
	grossAmount: numeric("gross_amount", { precision: 15, scale:  2 }),
	totalGrossAmount: numeric("total_gross_amount", { precision: 15, scale:  2 }),
	baseAmount: numeric("base_amount", { precision: 15, scale:  2 }),
	totalBaseAmount: numeric("total_base_amount", { precision: 15, scale:  2 }),
	cartDiscount: numeric("cart_discount", { precision: 15, scale:  2 }),
	totalCostValue: numeric("total_cost_value", { precision: 15, scale:  2 }),
	totalLandingRate: numeric("total_landing_rate", { precision: 15, scale:  2 }),
	totalTaxableValue: numeric("total_taxable_value", { precision: 15, scale:  2 }),
	poNumber: varchar("po_number", { length: 255 }),
	vendorPoNumber: varchar("vendor_po_number", { length: 256 }),
	orderId: varchar("order_id", { length: 255 }),
	invoiceId: varchar("invoice_id", { length: 255 }),
	shipmentNumber: varchar("shipment_number", { length: 255 }),
	trackingCode: varchar("tracking_code", { length: 100 }),
	shippingAgentCode: varchar("shipping_agent_code", { length: 100 }),
	lineNumber: integer("line_number"),
	sNo: integer("s_no"),
	supplierName: text("supplier_name"),
	supplierAddress: text("supplier_address"),
	supplierContact: varchar("supplier_contact", { length: 100 }),
	supplierEmail: varchar("supplier_email", { length: 255 }),
	supplierGstin: varchar("supplier_gstin", { length: 50 }),
	supplierPhone: varchar("supplier_phone", { length: 20 }),
	vendorName: varchar("vendor_name", { length: 255 }),
	vendorId: varchar("vendor_id", { length: 100 }),
	vendorCode: varchar("vendor_code", { length: 50 }),
	fulfillerName: varchar("fulfiller_name", { length: 255 }),
	retailerId: varchar("retailer_id", { length: 100 }),
	retailerName: varchar("retailer_name", { length: 100 }),
	tenantId: varchar("tenant_id", { length: 100 }),
	accountNumber: varchar("account_number", { length: 50 }),
	warehouseAddress: text("warehouse_address"),
	deliveryAddress: text("delivery_address"),
	dcAddress: text("dc_address"),
	dcGstin: varchar("dc_gstin", { length: 50 }),
	billToName: text("bill_to_name"),
	billToAddress: text("bill_to_address"),
	billToGstin: varchar("bill_to_gstin", { length: 50 }),
	billFromName: text("bill_from_name"),
	billFromAddress: text("bill_from_address"),
	billFromGstin: varchar("bill_from_gstin", { length: 20 }),
	billFromPhone: varchar("bill_from_phone", { length: 20 }),
	shipToName: text("ship_to_name"),
	shipToAddress: text("ship_to_address"),
	shipToGstin: varchar("ship_to_gstin", { length: 50 }),
	shipFromName: text("ship_from_name"),
	shipFromAddress: text("ship_from_address"),
	shipFromGstin: varchar("ship_from_gstin", { length: 20 }),
	shippedBy: text("shipped_by"),
	shippedByAddress: text("shipped_by_address"),
	shippedByGstin: varchar("shipped_by_gstin", { length: 20 }),
	shippedByPhone: varchar("shipped_by_phone", { length: 20 }),
	shippedTo: text("shipped_to"),
	shippedToAddress: text("shipped_to_address"),
	shippedToGstin: varchar("shipped_to_gstin", { length: 20 }),
	billedToAddress: text("billed_to_address"),
	billedToGstin: varchar("billed_to_gstin", { length: 20 }),
	status: varchar({ length: 100 }),
	productStatus: varchar("product_status", { length: 100 }),
	shipmentStatus: varchar("shipment_status", { length: 50 }),
	conditionField: varchar("condition_field", { length: 50 }),
	fulfillmentChannel: varchar("fulfillment_channel", { length: 100 }),
	fulfillmentType: varchar("fulfillment_type", { length: 100 }),
	fulfilmentType: varchar("fulfilment_type", { length: 100 }),
	fulfillmentMethod: varchar("fulfillment_method", { length: 50 }),
	paymentMethod: varchar("payment_method", { length: 100 }),
	paymentMethodUsed: varchar("payment_method_used", { length: 100 }),
	natureOfSupply: varchar("nature_of_supply", { length: 50 }),
	natureOfTransaction: varchar("nature_of_transaction", { length: 50 }),
	modeOfPayment: varchar("mode_of_payment", { length: 50 }),
	contractRefId: varchar("contract_ref_id", { length: 100 }),
	contractVersion: varchar("contract_version", { length: 10 }),
	creditTerm: varchar("credit_term", { length: 100 }),
	paymentTerms: varchar("payment_terms", { length: 100 }),
	fAssuredBadge: varchar("f_assured_badge", { length: 10 }),
	reason: text(),
	comments: text(),
	remark: text(),
	dateRange: text("date_range"),
	uniqueHsnCodes: text("unique_hsn_codes").array(),
	uniqueBrands: text("unique_brands").array(),
	invoiceLitre: numeric("invoice_litre", { precision: 14, scale:  2 }),
	invoiceQty: numeric("invoice_qty", { precision: 14, scale:  2 }),
	totalLitres: numeric("total_litres", { precision: 10, scale:  3 }),
	totalLiter: numeric("total_liter", { precision: 14, scale:  2 }),
	boxes: integer(),
	volumeIsLitre: boolean("volume_is_litre"),
	isLitre: boolean("is_litre").default(false),
	poQty: integer("po_qty").default(0),
	asnQty: integer("asn_qty").default(0),
	grnQty: integer("grn_qty").default(0),
	remainingQty: integer("remaining_qty").default(0),
	quantityOrdered: numeric("quantity_ordered", { precision: 15, scale:  2 }),
	attachmentPath: text("attachment_path"),
	createdBy: varchar("created_by", { length: 100 }),
	uploadedBy: varchar("uploaded_by", { length: 100 }),
	deleteFlag: boolean("delete_flag").default(false),
	deleted: boolean().default(false),
	lastSyncAt: timestamp("last_sync_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	additionalData: jsonb("additional_data"),
}, (table) => [
	index("idx_master_unified_additional_data").using("gin", table.additionalData.asc().nullsLast().op("jsonb_ops")),
	index("idx_master_unified_asin").using("btree", table.asin.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_brand").using("btree", table.brand.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_brand_category").using("btree", table.brand.asc().nullsLast().op("text_ops"), table.category.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_brand_date").using("btree", table.brand.asc().nullsLast().op("date_ops"), table.reportDate.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_brand_name").using("btree", table.brandName.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_business_unit").using("btree", table.businessUnit.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_category").using("btree", table.category.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_city").using("btree", table.city.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_delete_flag").using("btree", table.deleteFlag.asc().nullsLast().op("bool_ops")),
	index("idx_master_unified_ean").using("btree", table.ean.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_invoice_id").using("btree", table.invoiceId.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_order_id").using("btree", table.orderId.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_period").using("btree", table.periodStart.asc().nullsLast().op("date_ops"), table.periodEnd.asc().nullsLast().op("date_ops")),
	index("idx_master_unified_platform").using("btree", table.platform.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_platform_category").using("btree", table.platform.asc().nullsLast().op("text_ops"), table.dataCategory.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_platform_date_category").using("btree", table.platform.asc().nullsLast().op("date_ops"), table.reportDate.asc().nullsLast().op("date_ops"), table.dataCategory.asc().nullsLast().op("date_ops")),
	index("idx_master_unified_po_number").using("btree", table.poNumber.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_product_id").using("btree", table.productId.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_region").using("btree", table.region.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_report_date").using("btree", table.reportDate.asc().nullsLast().op("date_ops")),
	index("idx_master_unified_shipment_number").using("btree", table.shipmentNumber.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_sku").using("btree", table.sku.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_sku_code").using("btree", table.skuCode.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_sku_date").using("btree", table.skuCode.asc().nullsLast().op("text_ops"), table.reportDate.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_sku_id").using("btree", table.skuId.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_source").using("btree", table.sourceTable.asc().nullsLast().op("text_ops"), table.sourceId.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_state").using("btree", table.state.asc().nullsLast().op("text_ops")),
	index("idx_master_unified_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	check("master_unified_data_category_check", sql`(data_category)::text = ANY ((ARRAY['inventory'::character varying, 'sales'::character varying, 'po_header'::character varying, 'po_lines'::character varying, 'cancellation'::character varying])::text[])`),
	check("master_unified_data_report_type_check", sql`(report_type IS NULL) OR ((report_type)::text = ANY ((ARRAY['daily'::character varying, 'range'::character varying, '2month'::character varying])::text[]))`),
]);

export const invAmazonJmRange = pgTable("INV_Amazon_JM_Range", {
	id: serial().primaryKey().notNull(),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	asin: text().notNull(),
	productName: text("product_name"),
	sku: text(),
	fnsku: text(),
	category: text(),
	brand: text(),
	size: text(),
	unit: text(),
	warehouseLocation: text("warehouse_location"),
	condition: text(),
	fulfillmentChannel: text("fulfillment_channel"),
	unitsAvailable: integer("units_available"),
	reservedQuantity: integer("reserved_quantity"),
	inboundQuantity: integer("inbound_quantity"),
	researchingQuantity: integer("researching_quantity"),
	unfulfillableQuantity: integer("unfulfillable_quantity"),
	supplierName: text("supplier_name"),
	costPerUnit: numeric("cost_per_unit", { precision: 10, scale:  2 }),
	totalValue: numeric("total_value", { precision: 10, scale:  2 }),
	lastUpdatedAt: timestamp("last_updated_at", { mode: 'string' }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	updatedAt: timestamp("updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
});

export const invAmazonJwDaily = pgTable("INV_Amazon_JW_Daily", {
	id: serial().primaryKey().notNull(),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	asin: text().notNull(),
	productName: text("product_name"),
	sku: text(),
	fnsku: text(),
	category: text(),
	brand: text(),
	size: text(),
	unit: text(),
	warehouseLocation: text("warehouse_location"),
	condition: text(),
	fulfillmentChannel: text("fulfillment_channel"),
	unitsAvailable: integer("units_available"),
	reservedQuantity: integer("reserved_quantity"),
	inboundQuantity: integer("inbound_quantity"),
	researchingQuantity: integer("researching_quantity"),
	unfulfillableQuantity: integer("unfulfillable_quantity"),
	supplierName: text("supplier_name"),
	costPerUnit: numeric("cost_per_unit", { precision: 10, scale:  2 }),
	totalValue: numeric("total_value", { precision: 10, scale:  2 }),
	lastUpdatedAt: timestamp("last_updated_at", { mode: 'string' }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	updatedAt: timestamp("updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
});

export const invAmazonJwRange = pgTable("INV_Amazon_JW_Range", {
	id: serial().primaryKey().notNull(),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	asin: text().notNull(),
	productName: text("product_name"),
	sku: text(),
	fnsku: text(),
	category: text(),
	brand: text(),
	size: text(),
	unit: text(),
	warehouseLocation: text("warehouse_location"),
	condition: text(),
	fulfillmentChannel: text("fulfillment_channel"),
	unitsAvailable: integer("units_available"),
	reservedQuantity: integer("reserved_quantity"),
	inboundQuantity: integer("inbound_quantity"),
	researchingQuantity: integer("researching_quantity"),
	unfulfillableQuantity: integer("unfulfillable_quantity"),
	supplierName: text("supplier_name"),
	costPerUnit: numeric("cost_per_unit", { precision: 10, scale:  2 }),
	totalValue: numeric("total_value", { precision: 10, scale:  2 }),
	lastUpdatedAt: timestamp("last_updated_at", { mode: 'string' }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	updatedAt: timestamp("updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
});

export const invBlinkitJmDaily = pgTable("INV_Blinkit_JM_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""INV_Blinkit_JM_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	skuId: text("sku_id").notNull(),
	productName: text("product_name"),
	category: text(),
	subcategory: text(),
	brand: text(),
	size: text(),
	unit: text(),
	stockOnHand: integer("stock_on_hand"),
	reservedQuantity: integer("reserved_quantity"),
	availableQuantity: integer("available_quantity"),
	inboundQuantity: integer("inbound_quantity"),
	outboundQuantity: integer("outbound_quantity"),
	damagedQuantity: integer("damaged_quantity"),
	expiredQuantity: integer("expired_quantity"),
	lastUpdatedAt: timestamp("last_updated_at", { mode: 'string' }),
	warehouseLocation: text("warehouse_location"),
	supplierName: text("supplier_name"),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_inv_blinkit_jm_daily_report_date").using("btree", table.reportDate.asc().nullsLast().op("timestamp_ops")),
]);

export const invBlinkitJmRange = pgTable("INV_Blinkit_JM_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""INV_Blinkit_JM_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	skuId: text("sku_id").notNull(),
	productName: text("product_name"),
	category: text(),
	subcategory: text(),
	brand: text(),
	size: text(),
	unit: text(),
	stockOnHand: integer("stock_on_hand"),
	reservedQuantity: integer("reserved_quantity"),
	availableQuantity: integer("available_quantity"),
	inboundQuantity: integer("inbound_quantity"),
	outboundQuantity: integer("outbound_quantity"),
	damagedQuantity: integer("damaged_quantity"),
	expiredQuantity: integer("expired_quantity"),
	lastUpdatedAt: timestamp("last_updated_at", { mode: 'string' }),
	warehouseLocation: text("warehouse_location"),
	supplierName: text("supplier_name"),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const scAmJmRange = pgTable("SC_AM_JM_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""SC_AM_JM_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	asin: varchar({ length: 50 }).notNull(),
	productTitle: text("product_title").notNull(),
	brand: varchar({ length: 100 }),
	orderedRevenue: numeric("ordered_revenue", { precision: 15, scale:  2 }),
	orderedUnits: integer("ordered_units"),
	shippedRevenue: numeric("shipped_revenue", { precision: 15, scale:  2 }),
	shippedCogs: numeric("shipped_cogs", { precision: 15, scale:  2 }),
	shippedUnits: integer("shipped_units"),
	customerReturns: integer("customer_returns"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
	attachmentPath: text("attachment_path"),
});

export const invFlipKartJmRange = pgTable("INV_FlipKart_JM_Range", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""INV_FlipKart_JM_Range_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	periodStart: timestamp("period_start", { mode: 'string' }).notNull(),
	periodEnd: timestamp("period_end", { mode: 'string' }).notNull(),
	warehouseId: varchar({ length: 100 }),
	sku: varchar({ length: 200 }),
	title: text(),
	listingId: varchar({ length: 100 }),
	fsn: varchar({ length: 100 }),
	brand: varchar({ length: 100 }),
	flipkartSellingPrice: numeric({ precision: 10, scale:  2 }),
	liveOnWebsite: integer(),
	sales7D: integer(),
	sales14D: integer(),
	sales30D: integer(),
	sales60D: integer(),
	sales90D: integer(),
	b2BScheduled: integer(),
	transfersScheduled: integer(),
	b2BShipped: integer(),
	transfersShipped: integer(),
	b2BReceiving: integer(),
	transfersReceiving: integer(),
	reservedForOrdersAndRecalls: integer(),
	reservedForInternalProcessing: integer(),
	returnsProcessing: integer(),
	ordersToDispatch: integer(),
	recallsToDispatch: integer(),
	damaged: integer(),
	qcReject: integer(),
	catalogReject: integer(),
	returnsReject: integer(),
	sellerReturnReject: integer(),
	miscellaneous: integer(),
	lengthCm: numeric({ precision: 8, scale:  6 }),
	breadthCm: numeric({ precision: 8, scale:  6 }),
	heightCm: numeric({ precision: 8, scale:  6 }),
	weightKg: numeric({ precision: 8, scale:  3 }),
	fulfilmentType: text(),
	fAssuredBadge: varchar({ length: 10 }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const invBigBasketJmDaily = pgTable("INV_BigBasket_JM_Daily", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: ""INV_BigBasket_JM_Daily_id_seq"", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647 }),
	reportDate: timestamp("report_date", { mode: 'string' }).notNull(),
	city: text(),
	skuId: text("sku_id"),
	brandName: text("brand_name"),
	skuName: text("sku_name"),
	skuWeight: text("sku_weight"),
	skuPackType: text("sku_pack_type"),
	skuDescription: text("sku_description"),
	topCategoryName: text("top_category_name"),
	midCategoryName: text("mid_category_name"),
	leafCategoryName: text("leaf_category_name"),
	soh: numeric({ precision: 10, scale:  2 }),
	sohValue: numeric("soh_value", { precision: 10, scale:  2 }),
	attachmentPath: text("attachment_path"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
});

export const masterPoHeader = pgTable("master_po_header", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "master_po_header_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	sourcePlatform: varchar("source_platform", { length: 50 }).notNull(),
	sourceTable: varchar("source_table", { length: 100 }).notNull(),
	sourceId: integer("source_id").notNull(),
	poNumber: varchar("po_number", { length: 100 }).notNull(),
	poDate: timestamp("po_date", { mode: 'string' }),
	poReleaseDate: timestamp("po_release_date", { mode: 'string' }),
	orderDate: timestamp("order_date", { mode: 'string' }),
	poCreatedDate: timestamp("po_created_date", { mode: 'string' }),
	expectedDeliveryDate: timestamp("expected_delivery_date", { mode: 'string' }),
	poExpiryDate: timestamp("po_expiry_date", { mode: 'string' }),
	requiredByDate: timestamp("required_by_date", { mode: 'string' }),
	vendorId: varchar("vendor_id", { length: 50 }),
	vendorName: varchar("vendor_name", { length: 255 }),
	supplierName: text("supplier_name"),
	vendorCode: varchar("vendor_code", { length: 50 }),
	supplierAddress: text("supplier_address"),
	supplierContact: varchar("supplier_contact", { length: 20 }),
	supplierEmail: varchar("supplier_email", { length: 100 }),
	supplierGstin: varchar("supplier_gstin", { length: 20 }),
	supplierPhone: varchar("supplier_phone", { length: 20 }),
	billFromName: text("bill_from_name"),
	billFromAddress: text("bill_from_address"),
	billFromGstin: varchar("bill_from_gstin", { length: 20 }),
	billFromPhone: varchar("bill_from_phone", { length: 20 }),
	billToName: text("bill_to_name"),
	billToAddress: text("bill_to_address"),
	billToGstin: varchar("bill_to_gstin", { length: 20 }),
	billedToAddress: text("billed_to_address"),
	billedToGstin: varchar("billed_to_gstin", { length: 20 }),
	shipFromName: text("ship_from_name"),
	shipFromAddress: text("ship_from_address"),
	shipFromGstin: varchar("ship_from_gstin", { length: 20 }),
	shippedBy: text("shipped_by"),
	shippedByAddress: text("shipped_by_address"),
	shippedByGstin: varchar("shipped_by_gstin", { length: 20 }),
	shippedByPhone: varchar("shipped_by_phone", { length: 20 }),
	shipToName: text("ship_to_name"),
	shipToAddress: text("ship_to_address"),
	shipToGstin: varchar("ship_to_gstin", { length: 20 }),
	shippedToAddress: text("shipped_to_address"),
	shippedToGstin: varchar("shipped_to_gstin", { length: 20 }),
	warehouseAddress: text("warehouse_address"),
	deliveryAddress: text("delivery_address"),
	dcAddress: text("dc_address"),
	dcGstin: varchar("dc_gstin", { length: 50 }),
	accountNumber: varchar("account_number", { length: 50 }),
	paymentTerms: varchar("payment_terms", { length: 100 }),
	modeOfPayment: varchar("mode_of_payment", { length: 50 }),
	creditTerm: varchar("credit_term", { length: 100 }),
	natureOfSupply: varchar("nature_of_supply", { length: 50 }),
	natureOfTransaction: varchar("nature_of_transaction", { length: 50 }),
	contractRefId: varchar("contract_ref_id", { length: 100 }),
	contractVersion: varchar("contract_version", { length: 10 }),
	distributor: varchar({ length: 200 }),
	area: varchar({ length: 100 }),
	city: varchar({ length: 100 }),
	region: varchar({ length: 100 }),
	state: varchar({ length: 100 }),
	dispatchFrom: varchar("dispatch_from", { length: 100 }),
	category: varchar({ length: 100 }),
	totalItems: integer("total_items").default(0),
	totalQuantity: numeric("total_quantity", { precision: 15, scale:  2 }).default('0'),
	totalBasicCost: numeric("total_basic_cost", { precision: 15, scale:  2 }).default('0'),
	totalCostValue: numeric("total_cost_value", { precision: 15, scale:  2 }).default('0'),
	totalTaxableValue: numeric("total_taxable_value", { precision: 15, scale:  2 }).default('0'),
	totalTaxAmount: numeric("total_tax_amount", { precision: 15, scale:  2 }).default('0'),
	totalGstAmount: numeric("total_gst_amount", { precision: 15, scale:  2 }).default('0'),
	totalCessAmount: numeric("total_cess_amount", { precision: 15, scale:  2 }).default('0'),
	totalIgstAmount: numeric("total_igst_amount", { precision: 15, scale:  2 }).default('0'),
	totalLandingRate: numeric("total_landing_rate", { precision: 15, scale:  2 }).default('0'),
	totalAmount: numeric("total_amount", { precision: 15, scale:  2 }).default('0'),
	grandTotal: numeric("grand_total", { precision: 15, scale:  2 }).default('0'),
	totalGrossAmount: numeric("total_gross_amount", { precision: 15, scale:  2 }).default('0'),
	netAmount: numeric("net_amount", { precision: 15, scale:  2 }).default('0'),
	cartDiscount: numeric("cart_discount", { precision: 15, scale:  2 }).default('0'),
	totalBaseAmount: numeric("total_base_amount", { precision: 15, scale:  2 }).default('0'),
	uniqueBrands: text("unique_brands").array(),
	uniqueHsnCodes: text("unique_hsn_codes").array(),
	status: varchar({ length: 50 }).default('pending'),
	comments: text(),
	createdBy: varchar("created_by", { length: 100 }),
	uploadedBy: varchar("uploaded_by", { length: 100 }).default('admin'),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
	sourceCreatedAt: timestamp("source_created_at", { mode: 'string' }),
	sourceUpdatedAt: timestamp("source_updated_at", { mode: 'string' }),
}, (table) => [
	index("idx_master_po_header_created_at").using("btree", table.createdAt.asc().nullsLast().op("timestamp_ops")),
	index("idx_master_po_header_po_number").using("btree", table.poNumber.asc().nullsLast().op("text_ops")),
	index("idx_master_po_header_source").using("btree", table.sourcePlatform.asc().nullsLast().op("int4_ops"), table.sourceTable.asc().nullsLast().op("text_ops"), table.sourceId.asc().nullsLast().op("text_ops")),
	index("idx_master_po_header_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	unique("master_po_header_unique_source").on(table.sourcePlatform, table.sourceTable, table.sourceId),
]);

export const masterPoLines = pgTable("master_po_lines", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "master_po_lines_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	sourcePlatform: varchar("source_platform", { length: 50 }).notNull(),
	sourceTable: varchar("source_table", { length: 100 }).notNull(),
	sourceId: integer("source_id").notNull(),
	masterPoHeaderId: integer("master_po_header_id").notNull(),
	lineNumber: integer("line_number").notNull(),
	sNo: integer("s_no"),
	poNumber: varchar("po_number", { length: 100 }),
	productNumber: varchar("product_number", { length: 100 }),
	itemCode: varchar("item_code", { length: 100 }),
	sku: varchar({ length: 100 }),
	skuCode: varchar("sku_code", { length: 100 }),
	skuId: varchar("sku_id", { length: 100 }),
	articleId: varchar("article_id", { length: 50 }),
	fsnIsbn: varchar("fsn_isbn", { length: 50 }),
	sapId: varchar("sap_id", { length: 50 }),
	productName: text("product_name"),
	itemDescription: text("item_description"),
	productDescription: text("product_description"),
	description: text(),
	articleName: text("article_name"),
	title: text(),
	brand: varchar({ length: 100 }),
	type: varchar({ length: 100 }),
	vertical: varchar({ length: 100 }),
	grammage: varchar({ length: 50 }),
	hsnCode: varchar("hsn_code", { length: 20 }),
	ean: varchar({ length: 50 }),
	eanNo: varchar("ean_no", { length: 50 }),
	eanUpcCode: varchar("ean_upc_code", { length: 50 }),
	productUpc: varchar("product_upc", { length: 50 }),
	quantity: integer().default(0),
	quantityOrdered: numeric("quantity_ordered", { precision: 15, scale:  2 }),
	poQty: integer("po_qty").default(0),
	asnQty: integer("asn_qty").default(0),
	grnQty: integer("grn_qty").default(0),
	remainingQty: integer("remaining_qty").default(0),
	pendingQuantity: integer("pending_quantity"),
	caseQuantity: integer("case_quantity"),
	uom: varchar({ length: 50 }),
	mrp: numeric({ precision: 15, scale:  2 }),
	supplierMrp: numeric("supplier_mrp", { precision: 15, scale:  2 }),
	pricePerUnit: numeric("price_per_unit", { precision: 15, scale:  2 }),
	supplierPrice: numeric("supplier_price", { precision: 15, scale:  2 }),
	costPrice: numeric("cost_price", { precision: 15, scale:  2 }),
	basicCost: numeric("basic_cost", { precision: 15, scale:  2 }),
	basicCostPrice: numeric("basic_cost_price", { precision: 15, scale:  2 }),
	baseCostPrice: numeric("base_cost_price", { precision: 15, scale:  2 }),
	unitBaseCost: numeric("unit_base_cost", { precision: 15, scale:  3 }),
	buyingPrice: numeric("buying_price", { precision: 15, scale:  2 }),
	landingCost: numeric("landing_cost", { precision: 15, scale:  2 }),
	landingRate: numeric("landing_rate", { precision: 15, scale:  2 }),
	mrpTaxInclusive: numeric("mrp_tax_inclusive", { precision: 15, scale:  2 }),
	gstRate: numeric("gst_rate", { precision: 5, scale:  4 }),
	gstPercent: numeric("gst_percent", { precision: 5, scale:  2 }),
	cgstRate: numeric("cgst_rate", { precision: 5, scale:  2 }),
	cgstPercent: numeric("cgst_percent", { precision: 5, scale:  2 }),
	sgstRate: numeric("sgst_rate", { precision: 5, scale:  2 }),
	sgstPercent: numeric("sgst_percent", { precision: 5, scale:  2 }),
	igstRate: numeric("igst_rate", { precision: 5, scale:  2 }),
	igstPercent: numeric("igst_percent", { precision: 5, scale:  2 }),
	cessRate: numeric("cess_rate", { precision: 5, scale:  2 }),
	cessPercent: numeric("cess_percent", { precision: 5, scale:  2 }),
	gstAmount: numeric("gst_amount", { precision: 15, scale:  5 }),
	cgstAmount: numeric("cgst_amount", { precision: 15, scale:  5 }),
	cgstAmountPerUnit: numeric("cgst_amount_per_unit", { precision: 15, scale:  2 }),
	sgstAmount: numeric("sgst_amount", { precision: 15, scale:  5 }),
	sgstAmountPerUnit: numeric("sgst_amount_per_unit", { precision: 15, scale:  2 }),
	igstAmount: numeric("igst_amount", { precision: 15, scale:  5 }),
	igstAmountPerUnit: numeric("igst_amount_per_unit", { precision: 15, scale:  2 }),
	cessAmount: numeric("cess_amount", { precision: 15, scale:  5 }),
	cessAmountPerUnit: numeric("cess_amount_per_unit", { precision: 15, scale:  2 }),
	cessValue: numeric("cess_value", { precision: 15, scale:  2 }),
	additionalCess: numeric("additional_cess", { precision: 15, scale:  5 }),
	stateCessPercent: numeric("state_cess_percent", { precision: 5, scale:  2 }),
	stateCess: numeric("state_cess", { precision: 15, scale:  2 }),
	taxableValue: numeric("taxable_value", { precision: 15, scale:  5 }),
	totalTaxAmount: numeric("total_tax_amount", { precision: 15, scale:  5 }),
	taxAmount: numeric("tax_amount", { precision: 15, scale:  2 }),
	lineTotal: numeric("line_total", { precision: 15, scale:  5 }),
	totalValue: numeric("total_value", { precision: 15, scale:  2 }),
	totalAmount: numeric("total_amount", { precision: 15, scale:  2 }),
	baseAmount: numeric("base_amount", { precision: 15, scale:  2 }),
	grossAmount: numeric("gross_amount", { precision: 15, scale:  2 }),
	marginPercent: numeric("margin_percent", { precision: 5, scale:  2 }),
	requiredByDate: timestamp("required_by_date", { mode: 'string' }),
	status: varchar({ length: 50 }).default('Pending'),
	resourceSubtype: varchar("resource_subtype", { length: 50 }),
	approvalStatus: varchar("approval_status", { length: 50 }),
	createdBy: varchar("created_by", { length: 100 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
	sourceCreatedAt: timestamp("source_created_at", { mode: 'string' }),
	sourceUpdatedAt: timestamp("source_updated_at", { mode: 'string' }),
}, (table) => [
	index("idx_master_po_lines_header_id").using("btree", table.masterPoHeaderId.asc().nullsLast().op("int4_ops")),
	index("idx_master_po_lines_po_number").using("btree", table.poNumber.asc().nullsLast().op("text_ops")),
	index("idx_master_po_lines_product_codes").using("btree", table.sku.asc().nullsLast().op("text_ops"), table.itemCode.asc().nullsLast().op("text_ops"), table.productNumber.asc().nullsLast().op("text_ops")),
	index("idx_master_po_lines_source").using("btree", table.sourcePlatform.asc().nullsLast().op("text_ops"), table.sourceTable.asc().nullsLast().op("int4_ops"), table.sourceId.asc().nullsLast().op("int4_ops")),
	foreignKey({
			columns: [table.masterPoHeaderId],
			foreignColumns: [masterPoHeader.id],
			name: "master_po_lines_header_fk"
		}).onDelete("cascade"),
	unique("master_po_lines_unique_source").on(table.sourcePlatform, table.sourceTable, table.sourceId),
]);

export const regions = pgTable("regions", {
	id: integer().primaryKey().notNull(),
	name: varchar({ length: 50 }).notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
});

export const roles = pgTable("roles", {
	id: serial().primaryKey().notNull(),
	roleName: varchar("role_name", { length: 50 }).notNull(),
	description: text(),
	isAdmin: boolean("is_admin").default(false),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	unique("roles_role_name_key").on(table.roleName),
]);

export const amazonPoLines = pgTable("amazon_po_lines", {
	id: serial().primaryKey().notNull(),
	poNumber: varchar("po_number", { length: 50 }).notNull(),
	asin: varchar({ length: 50 }),
	cancellationStatus: varchar("cancellation_status", { length: 50 }),
	cancellationDate: date("cancellation_date"),
	externalId: varchar("external_id", { length: 100 }),
	modelNumber: varchar("model_number", { length: 100 }),
	hsn: varchar({ length: 50 }),
	title: text(),
	windowType: varchar("window_type", { length: 100 }),
	expectedDate: date("expected_date"),
	quantityRequested: integer("quantity_requested"),
	acceptedQuantity: integer("accepted_quantity"),
	quantityReceived: integer("quantity_received"),
	quantityOutstanding: integer("quantity_outstanding"),
	unitCost: numeric("unit_cost", { precision: 18, scale:  2 }),
	cancelDate: date("cancel_date"),
	totalCost: numeric("total_cost", { precision: 18, scale:  2 }),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	updatedAt: timestamp("updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
}, (table) => [
	foreignKey({
			columns: [table.poNumber],
			foreignColumns: [amazonPoHeader.poNumber],
			name: "fk_blinkit_po_line_header"
		}).onDelete("cascade"),
]);

export const amazonPoHeader = pgTable("amazon_po_header", {
	id: serial().primaryKey().notNull(),
	poNumber: varchar("po_number", { length: 50 }).notNull(),
	status: varchar({ length: 50 }),
	vendor: varchar({ length: 255 }),
	shipToLocation: varchar("ship_to_location", { length: 255 }),
	orderedOn: date("ordered_on"),
	shipWindow: varchar("ship_window", { length: 100 }),
	freightTerms: varchar("freight_terms", { length: 100 }),
	paymentMethod: varchar("payment_method", { length: 50 }),
	paymentTerms: varchar("payment_terms", { length: 100 }),
	purchasingEntity: varchar("purchasing_entity", { length: 255 }),
	submittedItems: integer("submitted_items"),
	submittedQuantitySubmitted: integer("submitted_quantity_submitted"),
	submittedTotalCost: numeric("submitted_total_cost", { precision: 18, scale:  2 }),
	acceptedItems: integer("accepted_items"),
	acceptedQuantitySubmitted: integer("accepted_quantity_submitted"),
	acceptedTotalCost: numeric("accepted_total_cost", { precision: 18, scale:  2 }),
	cancelledItems: integer("cancelled_items"),
	cancelledQuantitySubmitted: integer("cancelled_quantity_submitted"),
	cancelledTotalCost: numeric("cancelled_total_cost", { precision: 18, scale:  2 }),
	receivedItems: integer("received_items"),
	receivedQuantitySubmitted: integer("received_quantity_submitted"),
	receivedTotalCost: numeric("received_total_cost", { precision: 18, scale:  2 }),
	deliveryAddress: text("delivery_address"),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	updatedAt: timestamp("updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
}, (table) => [
	unique("uq_po_numbers").on(table.poNumber),
]);

export const users = pgTable("users", {
	id: serial().primaryKey().notNull(),
	username: text().notNull(),
	email: text().notNull(),
	password: text().notNull(),
	fullName: text("full_name"),
	phone: varchar({ length: 20 }),
	role: varchar({ length: 20 }).default('user'),
	department: varchar({ length: 100 }).default('E-Com'),
	isActive: boolean("is_active").default(true),
	lastLogin: timestamp("last_login", { mode: 'string' }),
	passwordChangedAt: timestamp("password_changed_at", { mode: 'string' }),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	updatedAt: timestamp("updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	roleId: integer("role_id"),
	status: varchar({ length: 20 }).default('active'),
	createdBy: integer("created_by"),
	passwordHash: text("password_hash"),
}, (table) => [
	index("idx_users_email").using("btree", table.email.asc().nullsLast().op("text_ops")),
	index("idx_users_role_id").using("btree", table.roleId.asc().nullsLast().op("int4_ops")),
	index("idx_users_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	index("idx_users_username").using("btree", table.username.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.roleId],
			foreignColumns: [roles.id],
			name: "users_role_id_fkey"
		}),
	foreignKey({
			columns: [table.createdBy],
			foreignColumns: [table.id],
			name: "users_created_by_fkey"
		}),
	unique("users_username_key").on(table.username),
	unique("users_username_unique").on(table.username),
	unique("users_email_key").on(table.email),
]);

export const rolePermissions = pgTable("role_permissions", {
	id: serial().primaryKey().notNull(),
	roleId: integer("role_id").notNull(),
	permissionId: integer("permission_id").notNull(),
	grantedAt: timestamp("granted_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_role_permissions_permission_id").using("btree", table.permissionId.asc().nullsLast().op("int4_ops")),
	index("idx_role_permissions_role_id").using("btree", table.roleId.asc().nullsLast().op("int4_ops")),
	foreignKey({
			columns: [table.roleId],
			foreignColumns: [roles.id],
			name: "role_permissions_role_id_fkey"
		}).onDelete("cascade"),
	foreignKey({
			columns: [table.permissionId],
			foreignColumns: [permissions.id],
			name: "role_permissions_permission_id_fkey"
		}).onDelete("cascade"),
	unique("role_permissions_role_id_permission_id_key").on(table.roleId, table.permissionId),
]);

export const permissions = pgTable("permissions", {
	id: serial().primaryKey().notNull(),
	permissionName: varchar("permission_name", { length: 100 }).notNull(),
	category: varchar({ length: 50 }).notNull(),
	description: text(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	unique("permissions_permission_name_key").on(table.permissionName),
]);

export const userSessions = pgTable("user_sessions", {
	id: serial().primaryKey().notNull(),
	userId: integer("user_id").notNull(),
	sessionToken: varchar("session_token", { length: 255 }).notNull(),
	expiresAt: timestamp("expires_at", { mode: 'string' }).notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	ipAddress: inet("ip_address"),
	userAgent: text("user_agent"),
}, (table) => [
	index("idx_user_sessions_expires").using("btree", table.expiresAt.asc().nullsLast().op("timestamp_ops")),
	index("idx_user_sessions_token").using("btree", table.sessionToken.asc().nullsLast().op("text_ops")),
	index("idx_user_sessions_user_id").using("btree", table.userId.asc().nullsLast().op("int4_ops")),
	foreignKey({
			columns: [table.userId],
			foreignColumns: [users.id],
			name: "user_sessions_user_id_fkey"
		}).onDelete("cascade"),
	unique("user_sessions_session_token_key").on(table.sessionToken),
]);

export const masterPoHeaderLog = pgTable("master_po_header_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalSourcePlatform: varchar("original_source_platform", { length: 50 }),
	originalSourceTable: varchar("original_source_table", { length: 100 }),
	originalSourceId: integer("original_source_id"),
	originalPoNumber: varchar("original_po_number", { length: 100 }),
	originalPoDate: timestamp("original_po_date", { mode: 'string' }),
	originalPoReleaseDate: timestamp("original_po_release_date", { mode: 'string' }),
	originalOrderDate: timestamp("original_order_date", { mode: 'string' }),
	originalPoCreatedDate: timestamp("original_po_created_date", { mode: 'string' }),
	originalExpectedDeliveryDate: timestamp("original_expected_delivery_date", { mode: 'string' }),
	originalPoExpiryDate: timestamp("original_po_expiry_date", { mode: 'string' }),
	originalRequiredByDate: timestamp("original_required_by_date", { mode: 'string' }),
	originalVendorId: varchar("original_vendor_id", { length: 50 }),
	originalVendorName: varchar("original_vendor_name", { length: 255 }),
	originalSupplierName: text("original_supplier_name"),
	originalVendorCode: varchar("original_vendor_code", { length: 50 }),
	originalSupplierAddress: text("original_supplier_address"),
	originalSupplierContact: varchar("original_supplier_contact", { length: 20 }),
	originalSupplierEmail: varchar("original_supplier_email", { length: 100 }),
	originalSupplierGstin: varchar("original_supplier_gstin", { length: 20 }),
	originalSupplierPhone: varchar("original_supplier_phone", { length: 20 }),
	originalBillFromName: text("original_bill_from_name"),
	originalBillFromAddress: text("original_bill_from_address"),
	originalBillFromGstin: varchar("original_bill_from_gstin", { length: 20 }),
	originalBillFromPhone: varchar("original_bill_from_phone", { length: 20 }),
	originalBillToName: text("original_bill_to_name"),
	originalBillToAddress: text("original_bill_to_address"),
	originalBillToGstin: varchar("original_bill_to_gstin", { length: 20 }),
	originalBilledToAddress: text("original_billed_to_address"),
	originalBilledToGstin: varchar("original_billed_to_gstin", { length: 20 }),
	originalShipFromName: text("original_ship_from_name"),
	originalShipFromAddress: text("original_ship_from_address"),
	originalShipFromGstin: varchar("original_ship_from_gstin", { length: 20 }),
	originalShippedBy: text("original_shipped_by"),
	originalShippedByAddress: text("original_shipped_by_address"),
	originalShippedByGstin: varchar("original_shipped_by_gstin", { length: 20 }),
	originalShippedByPhone: varchar("original_shipped_by_phone", { length: 20 }),
	originalShipToName: text("original_ship_to_name"),
	originalShipToAddress: text("original_ship_to_address"),
	originalShipToGstin: varchar("original_ship_to_gstin", { length: 20 }),
	originalShippedToAddress: text("original_shipped_to_address"),
	originalShippedToGstin: varchar("original_shipped_to_gstin", { length: 20 }),
	originalWarehouseAddress: text("original_warehouse_address"),
	originalDeliveryAddress: text("original_delivery_address"),
	originalDcAddress: text("original_dc_address"),
	originalDcGstin: varchar("original_dc_gstin", { length: 50 }),
	originalAccountNumber: varchar("original_account_number", { length: 50 }),
	originalPaymentTerms: varchar("original_payment_terms", { length: 100 }),
	originalModeOfPayment: varchar("original_mode_of_payment", { length: 50 }),
	originalCreditTerm: varchar("original_credit_term", { length: 100 }),
	originalNatureOfSupply: varchar("original_nature_of_supply", { length: 50 }),
	originalNatureOfTransaction: varchar("original_nature_of_transaction", { length: 50 }),
	originalContractRefId: varchar("original_contract_ref_id", { length: 100 }),
	originalContractVersion: varchar("original_contract_version", { length: 10 }),
	originalDistributor: varchar("original_distributor", { length: 200 }),
	originalArea: varchar("original_area", { length: 100 }),
	originalCity: varchar("original_city", { length: 100 }),
	originalRegion: varchar("original_region", { length: 100 }),
	originalState: varchar("original_state", { length: 100 }),
	originalDispatchFrom: varchar("original_dispatch_from", { length: 100 }),
	originalCategory: varchar("original_category", { length: 100 }),
	originalTotalItems: integer("original_total_items").default(0),
	originalTotalQuantity: numeric("original_total_quantity").default('0'),
	originalTotalBasicCost: numeric("original_total_basic_cost").default('0'),
	originalTotalCostValue: numeric("original_total_cost_value").default('0'),
	originalTotalTaxableValue: numeric("original_total_taxable_value").default('0'),
	originalTotalTaxAmount: numeric("original_total_tax_amount").default('0'),
	originalTotalGstAmount: numeric("original_total_gst_amount").default('0'),
	originalTotalCessAmount: numeric("original_total_cess_amount").default('0'),
	originalTotalIgstAmount: numeric("original_total_igst_amount").default('0'),
	originalTotalLandingRate: numeric("original_total_landing_rate").default('0'),
	originalTotalAmount: numeric("original_total_amount").default('0'),
	originalGrandTotal: numeric("original_grand_total").default('0'),
	originalTotalGrossAmount: numeric("original_total_gross_amount").default('0'),
	originalNetAmount: numeric("original_net_amount").default('0'),
	originalCartDiscount: numeric("original_cart_discount").default('0'),
	originalTotalBaseAmount: numeric("original_total_base_amount").default('0'),
	originalUniqueBrands: text("original_unique_brands").array(),
	originalUniqueHsnCodes: text("original_unique_hsn_codes").array(),
	originalStatus: varchar("original_status", { length: 50 }).default('pending'),
	originalComments: text("original_comments"),
	originalCreatedBy: varchar("original_created_by", { length: 100 }),
	originalUploadedBy: varchar("original_uploaded_by", { length: 100 }).default('admin'),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
	originalSourceCreatedAt: timestamp("original_source_created_at", { mode: 'string' }),
	originalSourceUpdatedAt: timestamp("original_source_updated_at", { mode: 'string' }),
}, (table) => [
	index("idx_master_po_header_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_master_po_header_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_master_po_header_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_master_po_header_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const masterPoLinesLog = pgTable("master_po_lines_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalSourcePlatform: varchar("original_source_platform", { length: 50 }),
	originalSourceTable: varchar("original_source_table", { length: 100 }),
	originalSourceId: integer("original_source_id"),
	originalMasterPoHeaderId: integer("original_master_po_header_id"),
	originalLineNumber: integer("original_line_number"),
	originalSNo: integer("original_s_no"),
	originalPoNumber: varchar("original_po_number", { length: 100 }),
	originalProductNumber: varchar("original_product_number", { length: 100 }),
	originalItemCode: varchar("original_item_code", { length: 100 }),
	originalSku: varchar("original_sku", { length: 100 }),
	originalSkuCode: varchar("original_sku_code", { length: 100 }),
	originalSkuId: varchar("original_sku_id", { length: 100 }),
	originalArticleId: varchar("original_article_id", { length: 50 }),
	originalFsnIsbn: varchar("original_fsn_isbn", { length: 50 }),
	originalSapId: varchar("original_sap_id", { length: 50 }),
	originalProductName: text("original_product_name"),
	originalItemDescription: text("original_item_description"),
	originalProductDescription: text("original_product_description"),
	originalDescription: text("original_description"),
	originalArticleName: text("original_article_name"),
	originalTitle: text("original_title"),
	originalBrand: varchar("original_brand", { length: 100 }),
	originalType: varchar("original_type", { length: 100 }),
	originalVertical: varchar("original_vertical", { length: 100 }),
	originalGrammage: varchar("original_grammage", { length: 50 }),
	originalHsnCode: varchar("original_hsn_code", { length: 20 }),
	originalEan: varchar("original_ean", { length: 50 }),
	originalEanNo: varchar("original_ean_no", { length: 50 }),
	originalEanUpcCode: varchar("original_ean_upc_code", { length: 50 }),
	originalProductUpc: varchar("original_product_upc", { length: 50 }),
	originalQuantity: integer("original_quantity").default(0),
	originalQuantityOrdered: numeric("original_quantity_ordered"),
	originalPoQty: integer("original_po_qty").default(0),
	originalAsnQty: integer("original_asn_qty").default(0),
	originalGrnQty: integer("original_grn_qty").default(0),
	originalRemainingQty: integer("original_remaining_qty").default(0),
	originalPendingQuantity: integer("original_pending_quantity"),
	originalCaseQuantity: integer("original_case_quantity"),
	originalUom: varchar("original_uom", { length: 50 }),
	originalMrp: numeric("original_mrp"),
	originalSupplierMrp: numeric("original_supplier_mrp"),
	originalPricePerUnit: numeric("original_price_per_unit"),
	originalSupplierPrice: numeric("original_supplier_price"),
	originalCostPrice: numeric("original_cost_price"),
	originalBasicCost: numeric("original_basic_cost"),
	originalBasicCostPrice: numeric("original_basic_cost_price"),
	originalBaseCostPrice: numeric("original_base_cost_price"),
	originalUnitBaseCost: numeric("original_unit_base_cost"),
	originalBuyingPrice: numeric("original_buying_price"),
	originalLandingCost: numeric("original_landing_cost"),
	originalLandingRate: numeric("original_landing_rate"),
	originalMrpTaxInclusive: numeric("original_mrp_tax_inclusive"),
	originalGstRate: numeric("original_gst_rate"),
	originalGstPercent: numeric("original_gst_percent"),
	originalCgstRate: numeric("original_cgst_rate"),
	originalCgstPercent: numeric("original_cgst_percent"),
	originalSgstRate: numeric("original_sgst_rate"),
	originalSgstPercent: numeric("original_sgst_percent"),
	originalIgstRate: numeric("original_igst_rate"),
	originalIgstPercent: numeric("original_igst_percent"),
	originalCessRate: numeric("original_cess_rate"),
	originalCessPercent: numeric("original_cess_percent"),
	originalGstAmount: numeric("original_gst_amount"),
	originalCgstAmount: numeric("original_cgst_amount"),
	originalCgstAmountPerUnit: numeric("original_cgst_amount_per_unit"),
	originalSgstAmount: numeric("original_sgst_amount"),
	originalSgstAmountPerUnit: numeric("original_sgst_amount_per_unit"),
	originalIgstAmount: numeric("original_igst_amount"),
	originalIgstAmountPerUnit: numeric("original_igst_amount_per_unit"),
	originalCessAmount: numeric("original_cess_amount"),
	originalCessAmountPerUnit: numeric("original_cess_amount_per_unit"),
	originalCessValue: numeric("original_cess_value"),
	originalAdditionalCess: numeric("original_additional_cess"),
	originalStateCessPercent: numeric("original_state_cess_percent"),
	originalStateCess: numeric("original_state_cess"),
	originalTaxableValue: numeric("original_taxable_value"),
	originalTotalTaxAmount: numeric("original_total_tax_amount"),
	originalTaxAmount: numeric("original_tax_amount"),
	originalLineTotal: numeric("original_line_total"),
	originalTotalValue: numeric("original_total_value"),
	originalTotalAmount: numeric("original_total_amount"),
	originalBaseAmount: numeric("original_base_amount"),
	originalGrossAmount: numeric("original_gross_amount"),
	originalMarginPercent: numeric("original_margin_percent"),
	originalRequiredByDate: timestamp("original_required_by_date", { mode: 'string' }),
	originalStatus: varchar("original_status", { length: 50 }).default('Pending'),
	originalResourceSubtype: varchar("original_resource_subtype", { length: 50 }),
	originalApprovalStatus: varchar("original_approval_status", { length: 50 }),
	originalCreatedBy: varchar("original_created_by", { length: 100 }),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
	originalSourceCreatedAt: timestamp("original_source_created_at", { mode: 'string' }),
	originalSourceUpdatedAt: timestamp("original_source_updated_at", { mode: 'string' }),
}, (table) => [
	index("idx_master_po_lines_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_master_po_lines_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_master_po_lines_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_master_po_lines_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const pfItemMstLog = pgTable("pf_item_mst_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPfItemcode: varchar("original_pf_itemcode", { length: 100 }),
	originalPfItemname: text("original_pf_itemname"),
	originalPfId: integer("original_pf_id"),
	originalSapId: char("original_sap_id", { length: 100 }),
}, (table) => [
	index("idx_pf_item_mst_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_pf_item_mst_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_pf_item_mst_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_pf_item_mst_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const pfMstLog = pgTable("pf_mst_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPfName: varchar("original_pf_name", { length: 100 }),
}, (table) => [
	index("idx_pf_mst_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_pf_mst_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_pf_mst_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_pf_mst_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const pfOrderItemsLog = pgTable("pf_order_items_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoId: integer("original_po_id"),
	originalItemName: text("original_item_name"),
	originalQuantity: integer("original_quantity"),
	originalSapCode: varchar("original_sap_code", { length: 50 }),
	originalCategory: varchar("original_category", { length: 100 }),
	originalSubcategory: varchar("original_subcategory", { length: 100 }),
	originalBasicRate: numeric("original_basic_rate"),
	originalGstRate: numeric("original_gst_rate"),
	originalLandingRate: numeric("original_landing_rate"),
	originalStatus: varchar("original_status", { length: 50 }).default('Pending'),
	originalTotalLitres: numeric("original_total_litres"),
	originalHsnCode: varchar("original_hsn_code", { length: 20 }),
	originalInvoiceDate: date("original_invoice_date"),
	originalInvoiceLitre: numeric("original_invoice_litre"),
	originalInvoiceAmount: numeric("original_invoice_amount"),
	originalInvoiceQty: numeric("original_invoice_qty"),
}, (table) => [
	index("idx_pf_order_items_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_pf_order_items_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_pf_order_items_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_pf_order_items_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const pfPoLog = pgTable("pf_po_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoNumber: varchar("original_po_number", { length: 100 }),
	originalPlatform: integer("original_platform"),
	originalServingDistributor: varchar("original_serving_distributor", { length: 200 }),
	originalOrderDate: timestamp("original_order_date", { mode: 'string' }),
	originalExpiryDate: timestamp("original_expiry_date", { mode: 'string' }),
	originalAppointmentDate: timestamp("original_appointment_date", { mode: 'string' }),
	originalRegion: varchar("original_region", { length: 50 }),
	originalState: varchar("original_state", { length: 50 }),
	originalCity: varchar("original_city", { length: 100 }),
	originalArea: varchar("original_area", { length: 100 }),
	originalStatus: varchar("original_status", { length: 20 }).default('Open'),
	originalAttachment: text("original_attachment"),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
	originalStateId: integer("original_state_id"),
	originalDistrictId: integer("original_district_id"),
}, (table) => [
	index("idx_pf_po_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_pf_po_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_pf_po_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_pf_po_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const platformPoAttachmentsLog = pgTable("platform_po_attachments_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoId: integer("original_po_id"),
	originalFileName: text("original_file_name"),
	originalFilePath: text("original_file_path"),
	originalFileType: text("original_file_type"),
	originalFileSize: integer("original_file_size"),
	originalUploadedBy: integer("original_uploaded_by"),
	originalUploadedAt: timestamp("original_uploaded_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	originalDescription: text("original_description"),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
}, (table) => [
	index("idx_platform_po_attachments_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_platform_po_attachments_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_platform_po_attachments_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_platform_po_attachments_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const poAttachmentsLog = pgTable("po_attachments_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoId: integer("original_po_id"),
	originalPoType: varchar("original_po_type", { length: 50 }),
	originalFileName: varchar("original_file_name", { length: 255 }),
	originalOriginalName: varchar("original_original_name", { length: 255 }),
	originalFilePath: text("original_file_path"),
	originalFileSize: integer("original_file_size"),
	originalMimeType: varchar("original_mime_type", { length: 100 }),
	originalUploadedBy: integer("original_uploaded_by"),
	originalUploadedAt: timestamp("original_uploaded_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	originalIsActive: boolean("original_is_active").default(true),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
}, (table) => [
	index("idx_po_attachments_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_po_attachments_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_po_attachments_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_po_attachments_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const swiggyPoLinesLog = pgTable("swiggy_po_lines_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoId: integer("original_po_id"),
	originalLineNumber: integer("original_line_number"),
	originalItemCode: varchar("original_item_code", { length: 100 }),
	originalItemDescription: text("original_item_description"),
	originalHsnCode: varchar("original_hsn_code", { length: 20 }),
	originalQuantity: integer("original_quantity"),
	originalMrp: numeric("original_mrp"),
	originalUnitBaseCost: numeric("original_unit_base_cost"),
	originalTaxableValue: numeric("original_taxable_value"),
	originalCgstRate: numeric("original_cgst_rate"),
	originalCgstAmount: numeric("original_cgst_amount"),
	originalSgstRate: numeric("original_sgst_rate"),
	originalSgstAmount: numeric("original_sgst_amount"),
	originalIgstRate: numeric("original_igst_rate"),
	originalIgstAmount: numeric("original_igst_amount"),
	originalCessRate: numeric("original_cess_rate"),
	originalCessAmount: numeric("original_cess_amount"),
	originalAdditionalCess: numeric("original_additional_cess"),
	originalTotalTaxAmount: numeric("original_total_tax_amount"),
	originalLineTotal: numeric("original_line_total"),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_swiggy_po_lines_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_swiggy_po_lines_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_swiggy_po_lines_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_swiggy_po_lines_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const swiggyPosLog = pgTable("swiggy_pos_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoNumber: varchar("original_po_number", { length: 100 }),
	originalPoDate: timestamp("original_po_date", { mode: 'string' }),
	originalPoReleaseDate: timestamp("original_po_release_date", { mode: 'string' }),
	originalExpectedDeliveryDate: timestamp("original_expected_delivery_date", { mode: 'string' }),
	originalPoExpiryDate: timestamp("original_po_expiry_date", { mode: 'string' }),
	originalVendorName: varchar("original_vendor_name", { length: 255 }),
	originalPaymentTerms: varchar("original_payment_terms", { length: 100 }),
	originalTotalItems: integer("original_total_items").default(0),
	originalTotalQuantity: integer("original_total_quantity").default(0),
	originalTotalTaxableValue: numeric("original_total_taxable_value"),
	originalTotalTaxAmount: numeric("original_total_tax_amount"),
	originalGrandTotal: numeric("original_grand_total"),
	originalUniqueHsnCodes: text("original_unique_hsn_codes").array(),
	originalStatus: varchar("original_status", { length: 50 }).default('pending'),
	originalCreatedBy: varchar("original_created_by", { length: 100 }),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_swiggy_pos_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_swiggy_pos_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_swiggy_pos_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_swiggy_pos_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const zeptoPoHeaderLog = pgTable("zepto_po_header_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoNumber: varchar("original_po_number", { length: 50 }),
	originalStatus: varchar("original_status", { length: 20 }).default('Open'),
	originalTotalQuantity: integer("original_total_quantity").default(0),
	originalTotalCostValue: numeric("original_total_cost_value").default('0'),
	originalTotalTaxAmount: numeric("original_total_tax_amount").default('0'),
	originalTotalAmount: numeric("original_total_amount").default('0'),
	originalUniqueBrands: text("original_unique_brands").array(),
	originalCreatedBy: varchar("original_created_by", { length: 100 }),
	originalUploadedBy: varchar("original_uploaded_by", { length: 100 }),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_zepto_po_header_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_zepto_po_header_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_zepto_po_header_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_zepto_po_header_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const zeptoPoLinesLog = pgTable("zepto_po_lines_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoHeaderId: integer("original_po_header_id"),
	originalLineNumber: integer("original_line_number"),
	originalPoNumber: varchar("original_po_number", { length: 50 }),
	originalSku: text("original_sku"),
	originalBrand: varchar("original_brand", { length: 100 }),
	originalSkuId: varchar("original_sku_id", { length: 100 }),
	originalSapId: varchar("original_sap_id", { length: 50 }),
	originalHsnCode: varchar("original_hsn_code", { length: 20 }),
	originalEanNo: varchar("original_ean_no", { length: 50 }),
	originalPoQty: integer("original_po_qty").default(0),
	originalAsnQty: integer("original_asn_qty").default(0),
	originalGrnQty: integer("original_grn_qty").default(0),
	originalRemainingQty: integer("original_remaining_qty").default(0),
	originalCostPrice: numeric("original_cost_price"),
	originalCgst: numeric("original_cgst"),
	originalSgst: numeric("original_sgst"),
	originalIgst: numeric("original_igst"),
	originalCess: numeric("original_cess"),
	originalMrp: numeric("original_mrp"),
	originalTotalValue: numeric("original_total_value"),
	originalStatus: varchar("original_status", { length: 50 }).default('Pending'),
	originalCreatedBy: varchar("original_created_by", { length: 100 }),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_zepto_po_lines_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_zepto_po_lines_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_zepto_po_lines_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_zepto_po_lines_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const zomatoPoHeaderLog = pgTable("zomato_po_header_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoNumber: varchar("original_po_number", { length: 100 }),
	originalPoDate: timestamp("original_po_date", { mode: 'string' }),
	originalExpectedDeliveryDate: timestamp("original_expected_delivery_date", { mode: 'string' }),
	originalAccountNumber: varchar("original_account_number", { length: 50 }),
	originalVendorId: varchar("original_vendor_id", { length: 50 }),
	originalBillFromName: text("original_bill_from_name"),
	originalBillFromAddress: text("original_bill_from_address"),
	originalBillFromGstin: varchar("original_bill_from_gstin", { length: 20 }),
	originalBillFromPhone: varchar("original_bill_from_phone", { length: 20 }),
	originalBillToName: text("original_bill_to_name"),
	originalBillToAddress: text("original_bill_to_address"),
	originalBillToGstin: varchar("original_bill_to_gstin", { length: 20 }),
	originalShipFromName: text("original_ship_from_name"),
	originalShipFromAddress: text("original_ship_from_address"),
	originalShipFromGstin: varchar("original_ship_from_gstin", { length: 20 }),
	originalShipToName: text("original_ship_to_name"),
	originalShipToAddress: text("original_ship_to_address"),
	originalShipToGstin: varchar("original_ship_to_gstin", { length: 20 }),
	originalTotalItems: integer("original_total_items").default(0),
	originalTotalQuantity: numeric("original_total_quantity").default('0'),
	originalGrandTotal: numeric("original_grand_total").default('0'),
	originalTotalTaxAmount: numeric("original_total_tax_amount").default('0'),
	originalUploadedBy: varchar("original_uploaded_by", { length: 100 }).default('admin'),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_zomato_po_header_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_zomato_po_header_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_zomato_po_header_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_zomato_po_header_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const zomatoPoItemsLog = pgTable("zomato_po_items_log", {
	logId: serial("log_id").primaryKey().notNull(),
	operationType: varchar("operation_type", { length: 20 }).notNull(),
	operationTimestamp: timestamp("operation_timestamp", { mode: 'string' }).defaultNow(),
	userName: varchar("user_name", { length: 100 }),
	userId: integer("user_id"),
	ipAddress: varchar("ip_address", { length: 45 }),
	sessionInfo: text("session_info"),
	originalId: integer("original_id"),
	originalPoHeaderId: integer("original_po_header_id"),
	originalLineNumber: integer("original_line_number"),
	originalProductNumber: varchar("original_product_number", { length: 100 }),
	originalProductName: text("original_product_name"),
	originalHsnCode: varchar("original_hsn_code", { length: 20 }),
	originalQuantityOrdered: numeric("original_quantity_ordered"),
	originalPricePerUnit: numeric("original_price_per_unit"),
	originalUom: varchar("original_uom", { length: 50 }),
	originalGstRate: numeric("original_gst_rate"),
	originalTotalTaxAmount: numeric("original_total_tax_amount"),
	originalLineTotal: numeric("original_line_total"),
	originalCreatedAt: timestamp("original_created_at", { mode: 'string' }).defaultNow(),
	originalUpdatedAt: timestamp("original_updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	index("idx_zomato_po_items_log_operation").using("btree", table.operationType.asc().nullsLast().op("text_ops")),
	index("idx_zomato_po_items_log_original_id").using("btree", table.originalId.asc().nullsLast().op("int4_ops")),
	index("idx_zomato_po_items_log_timestamp").using("btree", table.operationTimestamp.asc().nullsLast().op("timestamp_ops")),
	index("idx_zomato_po_items_log_user").using("btree", table.userName.asc().nullsLast().op("text_ops")),
]);

export const amazonInventory = pgTable("amazon_inventory", {
	id: serial().primaryKey().notNull(),
	asin: varchar({ length: 50 }),
	externalId: varchar("external_id", { length: 100 }),
	externalIdType: varchar("external_id_type", { length: 50 }),
	modelNumber: varchar("model_number", { length: 100 }),
	title: text(),
	windowType: varchar("window_type", { length: 50 }),
	expectedDate: timestamp("expected_date", { mode: 'string' }),
	quantityRequested: integer("quantity_requested").default(0),
	acceptedQuantity: integer("accepted_quantity").default(0),
	quantityReceived: integer("quantity_received").default(0),
	quantityOutstanding: integer("quantity_outstanding").default(0),
	unitCost: numeric("unit_cost", { precision: 15, scale:  2 }).default('0'),
	totalCost: numeric("total_cost", { precision: 15, scale:  2 }).default('0'),
	createdAt: timestamp("created_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
	updatedAt: timestamp("updated_at", { mode: 'string' }).default(sql`CURRENT_TIMESTAMP`),
}, (table) => [
	index("idx_amazon_inventory_asin").using("btree", table.asin.asc().nullsLast().op("text_ops")),
	index("idx_amazon_inventory_created_at").using("btree", table.createdAt.asc().nullsLast().op("timestamp_ops")),
	index("idx_amazon_inventory_expected_date").using("btree", table.expectedDate.asc().nullsLast().op("timestamp_ops")),
	index("idx_amazon_inventory_external_id").using("btree", table.externalId.asc().nullsLast().op("text_ops")),
]);

export const flipkartGroceryPoHeader = pgTable("flipkart_grocery_po_header", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "flipkart_grocery_po_header_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	poNumber: varchar("po_number", { length: 50 }).notNull(),
	supplierName: text("supplier_name").notNull(),
	supplierAddress: text("supplier_address"),
	supplierContact: varchar("supplier_contact", { length: 20 }),
	supplierEmail: varchar("supplier_email", { length: 100 }),
	supplierGstin: varchar("supplier_gstin", { length: 20 }),
	billedToAddress: text("billed_to_address"),
	billedToGstin: varchar("billed_to_gstin", { length: 20 }),
	shippedToAddress: text("shipped_to_address"),
	shippedToGstin: varchar("shipped_to_gstin", { length: 20 }),
	natureOfSupply: varchar("nature_of_supply", { length: 50 }),
	natureOfTransaction: varchar("nature_of_transaction", { length: 50 }),
	poExpiryDate: timestamp("po_expiry_date", { mode: 'string' }),
	category: varchar({ length: 100 }),
	orderDate: timestamp("order_date", { mode: 'string' }).notNull(),
	modeOfPayment: varchar("mode_of_payment", { length: 50 }),
	contractRefId: varchar("contract_ref_id", { length: 100 }),
	contractVersion: varchar("contract_version", { length: 10 }),
	creditTerm: varchar("credit_term", { length: 100 }),
	totalQuantity: integer("total_quantity"),
	totalTaxableValue: numeric("total_taxable_value", { precision: 12, scale:  2 }),
	totalTaxAmount: numeric("total_tax_amount", { precision: 12, scale:  2 }),
	totalAmount: numeric("total_amount", { precision: 12, scale:  2 }),
	status: varchar({ length: 20 }).default('Open').notNull(),
	createdBy: varchar("created_by", { length: 100 }),
	uploadedBy: varchar("uploaded_by", { length: 100 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
	distributor: varchar({ length: 200 }),
	area: varchar({ length: 100 }),
	city: varchar({ length: 100 }),
	region: varchar({ length: 100 }),
	state: varchar({ length: 100 }),
	dispatchFrom: varchar("dispatch_from", { length: 100 }),
}, (table) => [
	index("idx_flipkart_po_header_order_date").using("btree", table.orderDate.asc().nullsLast().op("timestamp_ops")),
	index("idx_flipkart_po_header_po_number").using("btree", table.poNumber.asc().nullsLast().op("text_ops")),
	unique("flipkart_grocery_po_header_po_number_unique").on(table.poNumber),
]);

export const flipkartGroceryPoLines = pgTable("flipkart_grocery_po_lines", {
	id: integer().primaryKey().generatedByDefaultAsIdentity({ name: "flipkart_grocery_po_lines_id_seq", startWith: 1, increment: 1, minValue: 1, maxValue: 2147483647, cache: 1 }),
	headerId: integer("header_id").notNull(),
	lineNumber: integer("line_number").notNull(),
	hsnCode: varchar("hsn_code", { length: 20 }),
	fsnIsbn: varchar("fsn_isbn", { length: 50 }),
	quantity: integer().notNull(),
	pendingQuantity: integer("pending_quantity"),
	uom: varchar({ length: 20 }),
	title: text().notNull(),
	brand: varchar({ length: 100 }),
	type: varchar({ length: 100 }),
	ean: varchar({ length: 20 }),
	vertical: varchar({ length: 100 }),
	requiredByDate: timestamp("required_by_date", { mode: 'string' }),
	supplierMrp: numeric("supplier_mrp", { precision: 10, scale:  2 }),
	supplierPrice: numeric("supplier_price", { precision: 10, scale:  2 }),
	taxableValue: numeric("taxable_value", { precision: 10, scale:  2 }),
	igstRate: numeric("igst_rate", { precision: 5, scale:  2 }),
	igstAmountPerUnit: numeric("igst_amount_per_unit", { precision: 10, scale:  2 }),
	sgstRate: numeric("sgst_rate", { precision: 5, scale:  2 }),
	sgstAmountPerUnit: numeric("sgst_amount_per_unit", { precision: 10, scale:  2 }),
	cgstRate: numeric("cgst_rate", { precision: 5, scale:  2 }),
	cgstAmountPerUnit: numeric("cgst_amount_per_unit", { precision: 10, scale:  2 }),
	cessRate: numeric("cess_rate", { precision: 5, scale:  2 }),
	cessAmountPerUnit: numeric("cess_amount_per_unit", { precision: 10, scale:  2 }),
	taxAmount: numeric("tax_amount", { precision: 10, scale:  2 }),
	totalAmount: numeric("total_amount", { precision: 10, scale:  2 }),
	status: varchar({ length: 50 }).default('Pending'),
	createdBy: varchar("created_by", { length: 100 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	foreignKey({
			columns: [table.headerId],
			foreignColumns: [flipkartGroceryPoHeader.id],
			name: "flipkart_grocery_po_lines_header_id_flipkart_grocery_po_header_"
		}).onDelete("cascade"),
]);
