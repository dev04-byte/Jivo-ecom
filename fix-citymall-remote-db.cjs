// Fix CityMall tables in the remote PostgreSQL database
const { Pool } = require('pg');

// Use the exact database connection from .env
const pool = new Pool({
  connectionString: 'postgresql://postgres:root@103.89.44.240:5432/ecom',
  ssl: false // DATABASE_SSL=false
});

async function fixCityMallTables() {
  try {
    console.log('üîß Connecting to remote PostgreSQL database...');
    console.log('üîó Host: 103.89.44.240:5432');
    console.log('üîó Database: ecom');

    // Test connection
    const testResult = await pool.query('SELECT NOW() as current_time');
    console.log('‚úÖ Connected successfully at:', testResult.rows[0].current_time);

    // Check if CityMall tables exist
    console.log('üîç Checking existing CityMall tables...');
    const existingTables = await pool.query(`
      SELECT table_name, column_name, data_type, character_maximum_length
      FROM information_schema.columns
      WHERE table_name IN ('city_mall_po_header', 'city_mall_po_lines')
      ORDER BY table_name, ordinal_position
    `);

    console.log('üìã Found columns:', existingTables.rows.length);

    if (existingTables.rows.length > 0) {
      console.log('üìä Current structure:');
      existingTables.rows.forEach(row => {
        const maxLength = row.character_maximum_length ? `(${row.character_maximum_length})` : '';
        console.log(`  ${row.table_name}.${row.column_name}: ${row.data_type}${maxLength}`);
      });
    }

    // Check current data count
    let headerCount = 0, linesCount = 0;
    try {
      const headerResult = await pool.query('SELECT COUNT(*) FROM city_mall_po_header');
      const linesResult = await pool.query('SELECT COUNT(*) FROM city_mall_po_lines');
      headerCount = parseInt(headerResult.rows[0].count);
      linesCount = parseInt(linesResult.rows[0].count);
      console.log(`üìä Current data: ${headerCount} headers, ${linesCount} lines`);
    } catch (error) {
      console.log('‚ö†Ô∏è Tables might not exist yet');
    }

    // Fix/Create the tables with correct structure
    console.log('üîß Creating/updating CityMall tables with correct structure...');

    // Start transaction
    await pool.query('BEGIN');

    // Drop existing tables if they exist (preserving data approach would be more complex)
    if (existingTables.rows.length > 0) {
      console.log('üóëÔ∏è Dropping existing tables to recreate with correct structure...');
      await pool.query('DROP TABLE IF EXISTS city_mall_po_lines CASCADE');
      await pool.query('DROP TABLE IF EXISTS city_mall_po_header CASCADE');
    }

    // Create CityMall PO Header table with correct schema
    console.log('üìã Creating city_mall_po_header table...');
    await pool.query(`
      CREATE TABLE city_mall_po_header (
        id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        po_number VARCHAR(50) NOT NULL,
        po_date TIMESTAMP,
        po_expiry_date TIMESTAMP,
        vendor_name TEXT,
        vendor_gstin TEXT,
        vendor_code TEXT,
        status VARCHAR(20) DEFAULT 'Open',
        total_quantity INTEGER DEFAULT 0,
        total_base_amount DECIMAL(15,2) DEFAULT 0,
        total_igst_amount DECIMAL(15,2) DEFAULT 0,
        total_cess_amount DECIMAL(15,2) DEFAULT 0,
        total_amount DECIMAL(15,2) DEFAULT 0,
        unique_hsn_codes TEXT[],
        created_by VARCHAR(100),
        uploaded_by VARCHAR(100),
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      )
    `);

    // Create CityMall PO Lines table
    console.log('üìù Creating city_mall_po_lines table...');
    await pool.query(`
      CREATE TABLE city_mall_po_lines (
        id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        po_header_id INTEGER REFERENCES city_mall_po_header(id) ON DELETE CASCADE,
        line_number INTEGER NOT NULL,
        article_id VARCHAR(50),
        article_name TEXT,
        hsn_code VARCHAR(20),
        mrp DECIMAL(10,2),
        base_cost_price DECIMAL(10,2),
        quantity INTEGER DEFAULT 0,
        base_amount DECIMAL(15,2),
        igst_percent DECIMAL(5,2),
        cess_percent DECIMAL(5,2),
        igst_amount DECIMAL(10,2),
        cess_amount DECIMAL(10,2),
        total_amount DECIMAL(15,2),
        status VARCHAR(20) DEFAULT 'Pending',
        created_by VARCHAR(100),
        created_at TIMESTAMP DEFAULT NOW()
      )
    `);

    // Create indexes for performance
    console.log('üîó Creating indexes...');
    await pool.query('CREATE INDEX idx_city_mall_po_header_po_number ON city_mall_po_header(po_number)');
    await pool.query('CREATE INDEX idx_city_mall_po_header_created_at ON city_mall_po_header(created_at)');
    await pool.query('CREATE INDEX idx_city_mall_po_lines_po_header_id ON city_mall_po_lines(po_header_id)');

    // Commit transaction
    await pool.query('COMMIT');
    console.log('‚úÖ Transaction committed successfully');

    // Test the tables work correctly
    console.log('üß™ Testing table functionality...');

    const testHeader = {
      po_number: 'TEST-DB-FIX-' + Date.now(),
      po_date: new Date(),
      vendor_name: 'Test Vendor',
      vendor_gstin: 'TEST123456789',
      total_amount: 1000.00,
      created_by: 'db-fix-test'
    };

    const insertResult = await pool.query(`
      INSERT INTO city_mall_po_header (po_number, po_date, vendor_name, vendor_gstin, total_amount, created_by)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING *
    `, [testHeader.po_number, testHeader.po_date, testHeader.vendor_name, testHeader.vendor_gstin, testHeader.total_amount, testHeader.created_by]);

    console.log('‚úÖ Test header inserted:', insertResult.rows[0].id);
    console.log('üìã Vendor name (no padding):', `"${insertResult.rows[0].vendor_name}"`);
    console.log('üìã Vendor GSTIN (no padding):', `"${insertResult.rows[0].vendor_gstin}"`);

    const testLine = {
      po_header_id: insertResult.rows[0].id,
      line_number: 1,
      article_id: 'ART001',
      article_name: 'Test Article',
      hsn_code: '12345678',
      quantity: 5,
      mrp: 100.00,
      base_cost_price: 80.00,
      total_amount: 400.00
    };

    const lineResult = await pool.query(`
      INSERT INTO city_mall_po_lines (po_header_id, line_number, article_id, article_name, hsn_code, quantity, mrp, base_cost_price, total_amount)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      RETURNING *
    `, [testLine.po_header_id, testLine.line_number, testLine.article_id, testLine.article_name, testLine.hsn_code, testLine.quantity, testLine.mrp, testLine.base_cost_price, testLine.total_amount]);

    console.log('‚úÖ Test line inserted:', lineResult.rows[0].id);

    // Clean up test data
    await pool.query('DELETE FROM city_mall_po_lines WHERE po_header_id = $1', [insertResult.rows[0].id]);
    await pool.query('DELETE FROM city_mall_po_header WHERE id = $1', [insertResult.rows[0].id]);
    console.log('üßπ Test data cleaned up');

    // Verify final structure
    console.log('üîç Verifying final table structure...');
    const finalStructure = await pool.query(`
      SELECT table_name, column_name, data_type, character_maximum_length, is_nullable
      FROM information_schema.columns
      WHERE table_name IN ('city_mall_po_header', 'city_mall_po_lines')
      ORDER BY table_name, ordinal_position
    `);

    console.log('üìä Final structure:');
    finalStructure.rows.forEach(row => {
      const maxLength = row.character_maximum_length ? `(${row.character_maximum_length})` : '';
      const nullable = row.is_nullable === 'YES' ? 'NULL' : 'NOT NULL';
      console.log(`  ${row.table_name}.${row.column_name}: ${row.data_type}${maxLength} ${nullable}`);
    });

    console.log('üéâ CityMall tables fixed successfully!');
    console.log('üí° The tables are now ready for proper data insertion without padding issues');

  } catch (error) {
    console.error('‚ùå Database fix failed:', error);
    try {
      await pool.query('ROLLBACK');
      console.log('üîÑ Transaction rolled back');
    } catch (rollbackError) {
      console.error('‚ö†Ô∏è Rollback failed:', rollbackError);
    }
  } finally {
    await pool.end();
  }
}

fixCityMallTables();